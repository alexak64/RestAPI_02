{
  "openapi": "3.0.1",
  "info": {
    "title": "API of Pantheon",
    "description": "Swagger with ASP.NET Core API of Helios Pantheon.\r\n(0.0.53-beta)",
    "termsOfService": "https://www.helios.eu/vseobecne-obchodni-podminky/",
    "contact": {
      "name": "Asseco Solutions, a.s.",
      "url": "https://www.heliosnephrite.cz/",
      "email": "info@helios.eu"
    },
    "license": {
      "name": "Asseco Solutions, a.s. Helios Pantheon license",
      "url": "https://www.helios.eu/vseobecne-obchodni-podminky/"
    },
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://localhost:5556"
    }
  ],
  "paths": {
    "/api/v1/Customer/Pantheon/AdresaUpdate": {
      "put": {
        "tags": [
          "AdresaUpdate"
        ],
        "summary": "Změna údajů existující adresy",
        "description": "<b>Příklad volání:</b>\r\n<p>Curl</p>\r\n             curl -X PUT \"https://localhost:5020/api/v1/AdresaUpdate\" -H  \"accept: application/json\" -H  \"Content-Type: application/json\" -d \"{\\\"organizaceIdEx\\\":\\\"OIX_0001\\\",\\\"typAdresy\\\":\\\"Trvalá\\\",\\\"cisloCo\\\":\\\"15\\\",\\\"cisloCp\\\":\\\"263\\\",\\\"obec\\\":\\\"Plzeň\\\",\\\"castObce\\\":\\\"Bolevec\\\",\\\"mestskyObvod\\\":\\\"Plzeň 1\\\",\\\"okres\\\":\\\"Plzeň město\\\",\\\"pismenoCo\\\":\\\"a\\\",\\\"psc\\\":\\\"32300\\\",\\\"stavAdresy\\\":1,\\\"typCislaDomovniho\\\":1,\\\"ulice\\\":\\\"Nefritová\\\"}\"\r\n             <p>Request URL</p>\r\n             https://localhost:5020/api/v1/AdresaUpdate",
        "parameters": [
          {
            "name": "recordNumber",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdresaUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizaceDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Custom/MIM/AssetsInventories/{id}": {
      "get": {
        "tags": [
          "AssetsInventories"
        ],
        "summary": "Gets info about assets inventory.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of an inventory (PK).",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RetrievalRange.HeaderOnly",
            "in": "query",
            "description": "Gets or sets whether only header of record should be retrieved. \r\nUsable for entities with items only!\r\nDefault is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RetrievalRange.ExcludeStaticRelations",
            "in": "query",
            "description": "Gets or sets which static relations (foreign keys) will be excluded.\r\nDefault is ASOL.Nephrite.WebAPI.Contracts.QueryParameters.RecordPartScope.None.",
            "schema": {
              "$ref": "#/components/schemas/RecordPartScope"
            }
          },
          {
            "name": "RetrievalRange.ExcludeDynamicRelations",
            "in": "query",
            "description": "Gets or sets which dynamic relations will be excluded.\r\nDefault is ASOL.Nephrite.WebAPI.Contracts.QueryParameters.RecordPartScope.None.",
            "schema": {
              "$ref": "#/components/schemas/RecordPartScope"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsInventoryResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "AssetsInventories"
        ],
        "summary": "Gets info about assets inventory.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of an inventory (PK).",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RetrievalRange.HeaderOnly",
            "in": "query",
            "description": "Gets or sets whether only header of record should be retrieved. \r\nUsable for entities with items only!\r\nDefault is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RetrievalRange.ExcludeStaticRelations",
            "in": "query",
            "description": "Gets or sets which static relations (foreign keys) will be excluded.\r\nDefault is ASOL.Nephrite.WebAPI.Contracts.QueryParameters.RecordPartScope.None.",
            "schema": {
              "$ref": "#/components/schemas/RecordPartScope"
            }
          },
          {
            "name": "RetrievalRange.ExcludeDynamicRelations",
            "in": "query",
            "description": "Gets or sets which dynamic relations will be excluded.\r\nDefault is ASOL.Nephrite.WebAPI.Contracts.QueryParameters.RecordPartScope.None.",
            "schema": {
              "$ref": "#/components/schemas/RecordPartScope"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsInventoryResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "AssetsInventories"
        ],
        "summary": "Update changed properties of an assets inventory.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of record to update.",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Data of an assets inventory to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetsInventoryUpdate"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Custom/MIM/AssetsInventories": {
      "get": {
        "tags": [
          "AssetsInventories"
        ],
        "summary": "Gets collection of assets inventories according to parameters.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "<br>\r\n            Gets or sets identifier of template or view which is used to browse data.\r\n            0 or unspecified value means a user default template or view.\r\n            \r\n<br>Use this parameter instead of former 'BrowseId.BrowseNumber' parameter.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Type",
            "in": "query",
            "description": "<br>\r\n            Type of a browse. Default is ASOL.Nephrite.WebAPI.Contracts.BrowseType.Template.\r\n            \r\n<br>\r\n            Use this parameter instead of former 'BrowseId.Type' parameter.\r\n            ",
            "schema": {
              "$ref": "#/components/schemas/BrowseType"
            }
          },
          {
            "name": "FilterId",
            "in": "query",
            "description": "Unique identifier of a predefined filter to get data.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FilterParams",
            "in": "query",
            "description": "<br>Optional. It has to be specified when a filter definition (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId) contains variable arguments.\r\n<br>\r\n            Variable arguments of a filter which is specified in ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId.\r\n            They have to be specified when this filter contains at least one parameter which value is specified as a variable (a named parameter).\r\n            This value has to be specified at the moment when the filter is applied.\r\n            If value of parameter is not set, it will be marked as skipped, see Description in example.\r\n            If value is null, a null value will be passed to parameter. \r\n            \r\n<br>\r\n            Example: ?FilterParams=Code='ABC'&FilterParams=Price=123.56&FilterParams=issueDate=2021-11-03T00:00:00&FilterParams=Description&FilterParams=Code=null\r\n            ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "TemplateFilterParams",
            "in": "query",
            "description": "<br>Optional. It has to be specified when a browse template filter definition (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id) contains variable arguments.\r\n<br>\r\n            Variable arguments of a filter which is part of a browse template filter definition (default one for a current user or specified in ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id).\r\n            They have to be specified when this filter contains at least one parameter which value is specified as a variable (a named parameter).\r\n            This value has to be specified at the moment when the filter is applied.\r\n            If value of parameter is not set, it will be marked as skipped, see Description in example.\r\n            If value is null, a null value will be passed to parameter. \r\n            \r\n<br>\r\n            Example: TemplateFilterParams=Code='ABC'&TemplateFilterParams=Price=123.56&TemplateFilterParams=issueDate=2021-11-03T00:00:00&TemplateFilterParams=Description&TemplateFilterParams=Code=null\r\n            ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "FolderId",
            "in": "query",
            "description": "Folder where records to get are stored.\r\nIf zero or null, default folder is used.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "description": "<br>\r\n            Filter expression to get data.\r\n            \r\n<br>\r\n            THIS PROPERTY'S NOT SUPPORTED YET! DON'T USE IT AT ALL! IT IS IGNORED!\r\n            INSTEAD, USE A PREDEFINED FILTER (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId) or filter which is a part of a browse template (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id).\r\n            ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "Sort order rules for returned data.\r\nRules have to match a column definition of template which is used to retrieve data.\r\nFormat is: \"[template column name] [sort direction]\", e.g.: ?orderBy=name desc,hireDate. Also \"asc\" can be used for more clarity.\r\nIf neither \"desc\" nor \"asc\" is used, \"asc\" is used by default.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TotalCount",
            "in": "query",
            "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.BrowseResponse should contain the total number of rows.\r\nDefault is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Count",
            "in": "query",
            "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.BrowseResponse should contain the number of rows on current page..\r\nDefault is true.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Number of rows which are skipped during retrieval of data.\r\nIf not specified, no rows are skipped. It means, the first row on the first page is displayed at the top of the page.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "Top",
            "in": "query",
            "description": "Page size.\r\nIf not specified, default user settings will be used.",
            "schema": {
              "maximum": 2147483647,
              "minimum": -1,
              "type": "integer",
              "format": "int32",
              "example": 100
            },
            "example": 100
          },
          {
            "name": "InstalledOnly",
            "in": "query",
            "description": "True if only installed inventories should be returned .",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfAssetsInventoryBrowseResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "AssetsInventories"
        ],
        "summary": "Gets collection of assets inventories according to parameters.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "<br>\r\n            Gets or sets identifier of template or view which is used to browse data.\r\n            0 or unspecified value means a user default template or view.\r\n            \r\n<br>Use this parameter instead of former 'BrowseId.BrowseNumber' parameter.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Type",
            "in": "query",
            "description": "<br>\r\n            Type of a browse. Default is ASOL.Nephrite.WebAPI.Contracts.BrowseType.Template.\r\n            \r\n<br>\r\n            Use this parameter instead of former 'BrowseId.Type' parameter.\r\n            ",
            "schema": {
              "$ref": "#/components/schemas/BrowseType"
            }
          },
          {
            "name": "FilterId",
            "in": "query",
            "description": "Unique identifier of a predefined filter to get data.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FilterParams",
            "in": "query",
            "description": "<br>Optional. It has to be specified when a filter definition (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId) contains variable arguments.\r\n<br>\r\n            Variable arguments of a filter which is specified in ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId.\r\n            They have to be specified when this filter contains at least one parameter which value is specified as a variable (a named parameter).\r\n            This value has to be specified at the moment when the filter is applied.\r\n            If value of parameter is not set, it will be marked as skipped, see Description in example.\r\n            If value is null, a null value will be passed to parameter. \r\n            \r\n<br>\r\n            Example: ?FilterParams=Code='ABC'&FilterParams=Price=123.56&FilterParams=issueDate=2021-11-03T00:00:00&FilterParams=Description&FilterParams=Code=null\r\n            ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "TemplateFilterParams",
            "in": "query",
            "description": "<br>Optional. It has to be specified when a browse template filter definition (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id) contains variable arguments.\r\n<br>\r\n            Variable arguments of a filter which is part of a browse template filter definition (default one for a current user or specified in ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id).\r\n            They have to be specified when this filter contains at least one parameter which value is specified as a variable (a named parameter).\r\n            This value has to be specified at the moment when the filter is applied.\r\n            If value of parameter is not set, it will be marked as skipped, see Description in example.\r\n            If value is null, a null value will be passed to parameter. \r\n            \r\n<br>\r\n            Example: TemplateFilterParams=Code='ABC'&TemplateFilterParams=Price=123.56&TemplateFilterParams=issueDate=2021-11-03T00:00:00&TemplateFilterParams=Description&TemplateFilterParams=Code=null\r\n            ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "FolderId",
            "in": "query",
            "description": "Folder where records to get are stored.\r\nIf zero or null, default folder is used.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "description": "<br>\r\n            Filter expression to get data.\r\n            \r\n<br>\r\n            THIS PROPERTY'S NOT SUPPORTED YET! DON'T USE IT AT ALL! IT IS IGNORED!\r\n            INSTEAD, USE A PREDEFINED FILTER (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId) or filter which is a part of a browse template (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id).\r\n            ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "Sort order rules for returned data.\r\nRules have to match a column definition of template which is used to retrieve data.\r\nFormat is: \"[template column name] [sort direction]\", e.g.: ?orderBy=name desc,hireDate. Also \"asc\" can be used for more clarity.\r\nIf neither \"desc\" nor \"asc\" is used, \"asc\" is used by default.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TotalCount",
            "in": "query",
            "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.BrowseResponse should contain the total number of rows.\r\nDefault is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Count",
            "in": "query",
            "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.BrowseResponse should contain the number of rows on current page..\r\nDefault is true.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Number of rows which are skipped during retrieval of data.\r\nIf not specified, no rows are skipped. It means, the first row on the first page is displayed at the top of the page.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "Top",
            "in": "query",
            "description": "Page size.\r\nIf not specified, default user settings will be used.",
            "schema": {
              "maximum": 2147483647,
              "minimum": -1,
              "type": "integer",
              "format": "int32",
              "example": 100
            },
            "example": 100
          },
          {
            "name": "InstalledOnly",
            "in": "query",
            "description": "True if only installed inventories should be returned .",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfAssetsInventoryBrowseResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Cache/{key}": {
      "get": {
        "tags": [
          "Cache"
        ],
        "summary": "Gets a value stored in cache.\r\nIf key is not in cache",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Key of entry in a cache.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CacheResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Cache": {
      "put": {
        "tags": [
          "Cache"
        ],
        "summary": "Sets value to a memory cache with a specified key.",
        "parameters": [
          {
            "name": "Priority",
            "in": "query",
            "description": "The priority for keeping the cache entry in the cache during a memory pressure tokened cleanup.\r\nSpecifies how items are prioritized for preservation during a memory pressure triggered cleanup.\r\nPossible values: low, normal, high, neverRemove.",
            "schema": {
              "$ref": "#/components/schemas/CacheItemPriority"
            }
          },
          {
            "name": "SlidingExpiration",
            "in": "query",
            "description": "Period how long (in minutes) the cache entry can be inactive (e.g. not accessed) before it will be removed. \r\nThis will not extend the entry lifetime beyond the absolute expiration (if set).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "AbsoluteExpirationRelativeToNow",
            "in": "query",
            "description": "An absolute expiration time (in minutes), relative to time when a cache entry was stored.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Key and value.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CacheRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CacheResponse"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/CiselnikEvidencniTyp": {
      "get": {
        "tags": [
          "CiselnikEvidencniTyp"
        ],
        "summary": "Číselník Evidenční typ",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfCiselnikEvidencniTyp"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "CiselnikEvidencniTyp"
        ],
        "summary": "Číselník Evidenční typ",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfCiselnikEvidencniTyp"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/CiselnikKodDph/{platnostOd}": {
      "get": {
        "tags": [
          "CiselnikKodDph"
        ],
        "summary": "Číselník Kód DPH",
        "description": "ZiskatCiselnikKodDphAsync",
        "parameters": [
          {
            "name": "platnostOd",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfCiselnikKodDph"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/CiselnikKodDph": {
      "head": {
        "tags": [
          "CiselnikKodDph"
        ],
        "summary": "Číselník Kód DPH",
        "description": "ZiskatCiselnikKodDphAsync",
        "parameters": [
          {
            "name": "platnostOd",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfCiselnikKodDph"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/CiselnikTypUhrady": {
      "get": {
        "tags": [
          "CiselnikTypUhrady"
        ],
        "summary": "Číselník Typ úhrady (pro třídu Úhrady).",
        "description": "GetCiselnikTypUhradyAsync",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfCiselnikTypUhrady"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "CiselnikTypUhrady"
        ],
        "summary": "Číselník Typ úhrady (pro třídu Úhrady).",
        "description": "GetCiselnikTypUhradyAsync",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfCiselnikTypUhrady"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Configuration/Periods": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Gets record periods defined in configuration. According to periodQueryParams currently active periods can be returned as well.",
        "parameters": [
          {
            "name": "PeriodKind",
            "in": "query",
            "description": "Kind of period to get.",
            "schema": {
              "$ref": "#/components/schemas/RecordPeriodKind"
            },
            "example": "All"
          },
          {
            "name": "PeriodRange",
            "in": "query",
            "description": "Range of period to get.",
            "schema": {
              "$ref": "#/components/schemas/RecordPeriodRange"
            },
            "example": "All"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordPeriodResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/Connect/LogIn": {
      "post": {
        "tags": [
          "Connect"
        ],
        "summary": "<br>\r\n             Authorizes the user specified in the authenticateInfo parameter.\r\n             \r\n<br>\r\n             Each call to this endpoint causes a new session to be created on the application server.\r\n             To authorize endpoints that require a basic authorization, you must use the returned values \"UserName\" as the login name and \"UserId\" as the password.\r\n             ",
        "description": "Sample request with a HeN account:\r\n```\r\nPOST /api/connect/login HTTP/1.1\r\nHost: localhost:53078\r\nContent-Type: application/json\r\n{\r\n    \"username\": \"username\",\r\n    \"password\": \"password\",\r\n    \"LanguageId\"   : \"CZ\",\r\n    \"DbProfile\": \"test_env\",\r\n    \"ServerURL\" : \"http://www.mydomain.cz/hen\"\r\n}\r\n```\r\n\r\nSample request with a domain account:\r\n```\r\nPOST /api/connect/login HTTP/1.1\r\nHost: localhost:53078\r\nContent-Type: application/json\r\n{\r\n    \"username\": \"ASOL\\\\username\",\r\n    \"password\": \"domain password\",\r\n    \"UseWindowsAuthentication\": true,\r\n    \"UseCurrentUserCredentials\": false\r\n    \"LanguageId\"   : \"CZ\",\r\n    \"DbProfile\": \"test_env\",\r\n    \"ServerURL\" : \"http://www.mydomain.cz/hen\"\r\n}\r\n```",
        "requestBody": {
          "description": "Info about user to authorize.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticateRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "<br>\r\n             If authorization failed:\r\n             \r\n<br>\r\n  ```\r\n             {\r\n              \"type\": \"https://tools.ietf.org/html/rfc7231#section-6.5.1\",\r\n              \"title\": \"BadRequest\",\r\n              \"status\": 400,\r\n              \"detail\": \"Application server connection credentials are not valid.\",\r\n              \"instance\": \"POST /api/Connect/LogIn\",\r\n              }\r\n             ```\r\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "<br>\r\n             If an unexpected error occurred. Check the log then.\r\n             \r\n<br>\r\n  ```\r\n             {\r\n              \"type\": \"https://tools.ietf.org/html/rfc7235#section...\",\r\n              \"title\": \"InternalServerError\",\r\n              \"status\": 500,\r\n              \"detail\": \"\"Unknown error, check the log, please.\"\",\r\n              \"instance\": \"POST /api/Connect/LogIn\",\r\n             }\r\n             ```\r\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "<br>\r\n             Returns info of authenticated user:\r\n             \r\n<br>\r\n  ```\r\n             {\r\n             \"success\": true,\r\n             \"statusCode\": 200,\r\n             \"errorMessage\": \"\",\r\n             \"userName\": \"ASOL\\\\username\",\r\n             \"userId\": \"UserId 31f49a7ddc18e97247308d5180ac684890f5a5c3442e0ab7115e037f6d6dd2f6\"\r\n             }\r\n             ```\r\n\r\n<br>\r\n             Use returned \"userName\" value as user name and \"userId\" value as password for following basic authorization for requests that require an authentication then.\r\n             ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticateResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Connect/UserInfo": {
      "get": {
        "tags": [
          "Connect"
        ],
        "summary": "Gets info about currently authenticated user.",
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/Connect/LogOut": {
      "post": {
        "tags": [
          "Connect"
        ],
        "summary": "Logs out currently authorized user and removes it from authenticated users.",
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Country": {
      "get": {
        "tags": [
          "Country"
        ],
        "summary": "Gets collection of countries according to parameters.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "<br>\r\n            Gets or sets identifier of template or view which is used to browse data.\r\n            0 or unspecified value means a user default template or view.\r\n            \r\n<br>Use this parameter instead of former 'BrowseId.BrowseNumber' parameter.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Type",
            "in": "query",
            "description": "<br>\r\n            Type of a browse. Default is ASOL.Nephrite.WebAPI.Contracts.BrowseType.Template.\r\n            \r\n<br>\r\n            Use this parameter instead of former 'BrowseId.Type' parameter.\r\n            ",
            "schema": {
              "$ref": "#/components/schemas/BrowseType"
            }
          },
          {
            "name": "FilterId",
            "in": "query",
            "description": "Unique identifier of a predefined filter to get data.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FilterParams",
            "in": "query",
            "description": "<br>Optional. It has to be specified when a filter definition (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId) contains variable arguments.\r\n<br>\r\n            Variable arguments of a filter which is specified in ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId.\r\n            They have to be specified when this filter contains at least one parameter which value is specified as a variable (a named parameter).\r\n            This value has to be specified at the moment when the filter is applied.\r\n            If value of parameter is not set, it will be marked as skipped, see Description in example.\r\n            If value is null, a null value will be passed to parameter. \r\n            \r\n<br>\r\n            Example: ?FilterParams=Code='ABC'&FilterParams=Price=123.56&FilterParams=issueDate=2021-11-03T00:00:00&FilterParams=Description&FilterParams=Code=null\r\n            ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "TemplateFilterParams",
            "in": "query",
            "description": "<br>Optional. It has to be specified when a browse template filter definition (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id) contains variable arguments.\r\n<br>\r\n            Variable arguments of a filter which is part of a browse template filter definition (default one for a current user or specified in ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id).\r\n            They have to be specified when this filter contains at least one parameter which value is specified as a variable (a named parameter).\r\n            This value has to be specified at the moment when the filter is applied.\r\n            If value of parameter is not set, it will be marked as skipped, see Description in example.\r\n            If value is null, a null value will be passed to parameter. \r\n            \r\n<br>\r\n            Example: TemplateFilterParams=Code='ABC'&TemplateFilterParams=Price=123.56&TemplateFilterParams=issueDate=2021-11-03T00:00:00&TemplateFilterParams=Description&TemplateFilterParams=Code=null\r\n            ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "FolderId",
            "in": "query",
            "description": "Folder where records to get are stored.\r\nIf zero or null, default folder is used.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "description": "<br>\r\n            Filter expression to get data.\r\n            \r\n<br>\r\n            THIS PROPERTY'S NOT SUPPORTED YET! DON'T USE IT AT ALL! IT IS IGNORED!\r\n            INSTEAD, USE A PREDEFINED FILTER (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId) or filter which is a part of a browse template (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id).\r\n            ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "Sort order rules for returned data.\r\nRules have to match a column definition of template which is used to retrieve data.\r\nFormat is: \"[template column name] [sort direction]\", e.g.: ?orderBy=name desc,hireDate. Also \"asc\" can be used for more clarity.\r\nIf neither \"desc\" nor \"asc\" is used, \"asc\" is used by default.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TotalCount",
            "in": "query",
            "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.BrowseResponse should contain the total number of rows.\r\nDefault is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Count",
            "in": "query",
            "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.BrowseResponse should contain the number of rows on current page..\r\nDefault is true.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Number of rows which are skipped during retrieval of data.\r\nIf not specified, no rows are skipped. It means, the first row on the first page is displayed at the top of the page.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "Top",
            "in": "query",
            "description": "Page size.\r\nIf not specified, default user settings will be used.",
            "schema": {
              "maximum": 2147483647,
              "minimum": -1,
              "type": "integer",
              "format": "int32",
              "example": 100
            },
            "example": 100
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrowseResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "Country"
        ],
        "summary": "Gets collection of countries according to parameters.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "<br>\r\n            Gets or sets identifier of template or view which is used to browse data.\r\n            0 or unspecified value means a user default template or view.\r\n            \r\n<br>Use this parameter instead of former 'BrowseId.BrowseNumber' parameter.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Type",
            "in": "query",
            "description": "<br>\r\n            Type of a browse. Default is ASOL.Nephrite.WebAPI.Contracts.BrowseType.Template.\r\n            \r\n<br>\r\n            Use this parameter instead of former 'BrowseId.Type' parameter.\r\n            ",
            "schema": {
              "$ref": "#/components/schemas/BrowseType"
            }
          },
          {
            "name": "FilterId",
            "in": "query",
            "description": "Unique identifier of a predefined filter to get data.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FilterParams",
            "in": "query",
            "description": "<br>Optional. It has to be specified when a filter definition (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId) contains variable arguments.\r\n<br>\r\n            Variable arguments of a filter which is specified in ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId.\r\n            They have to be specified when this filter contains at least one parameter which value is specified as a variable (a named parameter).\r\n            This value has to be specified at the moment when the filter is applied.\r\n            If value of parameter is not set, it will be marked as skipped, see Description in example.\r\n            If value is null, a null value will be passed to parameter. \r\n            \r\n<br>\r\n            Example: ?FilterParams=Code='ABC'&FilterParams=Price=123.56&FilterParams=issueDate=2021-11-03T00:00:00&FilterParams=Description&FilterParams=Code=null\r\n            ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "TemplateFilterParams",
            "in": "query",
            "description": "<br>Optional. It has to be specified when a browse template filter definition (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id) contains variable arguments.\r\n<br>\r\n            Variable arguments of a filter which is part of a browse template filter definition (default one for a current user or specified in ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id).\r\n            They have to be specified when this filter contains at least one parameter which value is specified as a variable (a named parameter).\r\n            This value has to be specified at the moment when the filter is applied.\r\n            If value of parameter is not set, it will be marked as skipped, see Description in example.\r\n            If value is null, a null value will be passed to parameter. \r\n            \r\n<br>\r\n            Example: TemplateFilterParams=Code='ABC'&TemplateFilterParams=Price=123.56&TemplateFilterParams=issueDate=2021-11-03T00:00:00&TemplateFilterParams=Description&TemplateFilterParams=Code=null\r\n            ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "FolderId",
            "in": "query",
            "description": "Folder where records to get are stored.\r\nIf zero or null, default folder is used.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "description": "<br>\r\n            Filter expression to get data.\r\n            \r\n<br>\r\n            THIS PROPERTY'S NOT SUPPORTED YET! DON'T USE IT AT ALL! IT IS IGNORED!\r\n            INSTEAD, USE A PREDEFINED FILTER (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId) or filter which is a part of a browse template (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id).\r\n            ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "Sort order rules for returned data.\r\nRules have to match a column definition of template which is used to retrieve data.\r\nFormat is: \"[template column name] [sort direction]\", e.g.: ?orderBy=name desc,hireDate. Also \"asc\" can be used for more clarity.\r\nIf neither \"desc\" nor \"asc\" is used, \"asc\" is used by default.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TotalCount",
            "in": "query",
            "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.BrowseResponse should contain the total number of rows.\r\nDefault is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Count",
            "in": "query",
            "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.BrowseResponse should contain the number of rows on current page..\r\nDefault is true.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Number of rows which are skipped during retrieval of data.\r\nIf not specified, no rows are skipped. It means, the first row on the first page is displayed at the top of the page.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "Top",
            "in": "query",
            "description": "Page size.\r\nIf not specified, default user settings will be used.",
            "schema": {
              "maximum": 2147483647,
              "minimum": -1,
              "type": "integer",
              "format": "int32",
              "example": 100
            },
            "example": 100
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrowseResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Country"
        ],
        "summary": "Creates a new country.",
        "requestBody": {
          "description": "Data for a new country.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CountryCreate"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IRecordId"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Country/{id}": {
      "get": {
        "tags": [
          "Country"
        ],
        "summary": "Gets info about country.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of country (PK).",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountryResult"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "Country"
        ],
        "summary": "Gets info about country.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of country (PK).",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountryResult"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Country"
        ],
        "summary": "Update selected properties of a country.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of record to update.",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Data of an country to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CountryUpdate"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Country"
        ],
        "summary": "Update selected properties of an country.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of an country to delete.",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/DataTransfers/GeneralImport/{id}": {
      "post": {
        "tags": [
          "DataTransfers"
        ],
        "summary": "Function which imports data in file specified in functionQuerySettings parameter (ASOL.WebAPI.DataTransfers.Contracts.GeneralImportFunctionQuery.FileUID).\r\nFirst file has to be uploaded by endpoints in ASOL.WebAPI.DataTransfers.Controllers.FilesController.\r\nThose endpoints return a unique file identifier, which has to be passed to this endpoint.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the General import entity with a definition which is used to import data.",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FileUID",
            "in": "query",
            "description": "Unique id of previously uploaded file by an endpoint in Files controller.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "FunctionId",
            "in": "query",
            "description": "Unique identifier of the function.\r\nIf it is not set, it is supposed ASOL.Nephrite.WebAPI.Common.DataAnotations.Metadata.FunctionMetadataAttribute is used in the function contract declaration.\r\nThis property has to be set, when ASOL.Nephrite.WebAPI.Common.DataAnotations.Metadata.FunctionMetadataAttribute is not used only (in descendant of ASOL.Nephrite.WebAPI.Contracts.ModelFunctionQueryBase class).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FolderId",
            "in": "query",
            "description": "Gets or sets folder identifier. Folder can be considered as a context in which the function runs. \r\nIf ASOL.Nephrite.WebAPI.Contracts.ModelFunctionQueryBase.FolderId equals 0, the function runs over view, whose folder is not defined.\r\nIf ASOL.Nephrite.WebAPI.Contracts.ModelFunctionQueryBase.FolderId is not entered, default value is used.\r\nThis is an optional parameter for specific scenarios.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "StoredParamsId",
            "in": "query",
            "description": "Identifier of predefined set of parameters which are stored in dedicated entity with identifier no. 1496.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ReturnLogDetail",
            "in": "query",
            "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.IFunctionResult log detail should be part of the message.",
            "schema": {
              "$ref": "#/components/schemas/ReturnFunctionLogDetailType"
            },
            "example": "error"
          }
        ],
        "requestBody": {
          "description": "Parameters of the function.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeneralImportFunctionBody"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IFunctionResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Dobropis": {
      "post": {
        "tags": [
          "Dobropis"
        ],
        "summary": "Založení nového Dobropisu",
        "requestBody": {
          "description": "Data nové Faktury vydané",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DobropisFvCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FakturaVydanaDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "Dobropis"
        ],
        "parameters": [
          {
            "name": "DobropisId",
            "in": "query",
            "description": "Interní identifikátor Dobropisu",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 781254
            },
            "example": 781254
          },
          {
            "name": "DobropisIdEx",
            "in": "query",
            "description": "Externí identifikátor Dobropisu",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "FVX_0001"
            },
            "example": "FVX_0001"
          },
          {
            "name": "Organizace.DatumNarozeni",
            "in": "query",
            "description": "Datum narození",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "2001-01-29"
            },
            "example": "2001-01-29"
          },
          {
            "name": "Organizace.Dic",
            "in": "query",
            "description": "DIČ",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "CZ11111111111"
            },
            "example": "CZ11111111111"
          },
          {
            "name": "Organizace.Ico",
            "in": "query",
            "description": "IČO",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "22222222222"
            },
            "example": "22222222222"
          },
          {
            "name": "Organizace.Jmeno",
            "in": "query",
            "description": "Jméno",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Josef"
            },
            "example": "Josef"
          },
          {
            "name": "Organizace.NazevDoplnujici",
            "in": "query",
            "description": "Doplňující název",
            "schema": {
              "maxLength": 80,
              "type": "string",
              "example": "NAZEV_DOPLN"
            },
            "example": "NAZEV_DOPLN"
          },
          {
            "name": "Organizace.NazevOrganizace",
            "in": "query",
            "description": "Název organizace",
            "schema": {
              "maxLength": 100,
              "type": "string",
              "example": "ALLSOFT s.r.o"
            },
            "example": "ALLSOFT s.r.o"
          },
          {
            "name": "Organizace.OrganizaceIdEx",
            "in": "query",
            "description": "Externí identifikátor organizace",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "OIX_0001"
            },
            "example": "OIX_0001"
          },
          {
            "name": "Organizace.PravniForma",
            "in": "query",
            "description": "Právní forma",
            "schema": {
              "maxLength": 6,
              "type": "string",
              "example": "SO"
            },
            "example": "SO"
          },
          {
            "name": "Organizace.Prijmeni",
            "in": "query",
            "description": "Příjmení",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Červený"
            },
            "example": "Červený"
          },
          {
            "name": "Organizace.RodneCislo",
            "in": "query",
            "description": "Rodné číslo",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "1234567777"
            },
            "example": "1234567777"
          },
          {
            "name": "Organizace.CisloDokladu",
            "in": "query",
            "description": "Číslo dokladu (max. 30 znaků)",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "112233445566"
            },
            "example": "112233445566"
          },
          {
            "name": "Organizace.TypDokladu",
            "in": "query",
            "description": "Typ dokladu - občanský průkaz (O) nebo cestovní pas (C)",
            "schema": {
              "maxLength": 1,
              "type": "string",
              "example": "C"
            },
            "example": "C"
          },
          {
            "name": "Stav",
            "in": "query",
            "description": "<br>Stav faktury\r\n<br>(0 - Pořízeno, 1 - Zaúčtováno, 7 - Stornováno)",
            "schema": {
              "type": "string",
              "example": "0"
            },
            "example": "0"
          },
          {
            "name": "StavUhrazenosti",
            "in": "query",
            "description": "<br>Stav uhrazenosti faktury\r\n<br>(N - Neuhrazeno, C - Částečně uhrazeno, U - Uhrazeno, P - Přeplaceno)",
            "schema": {
              "type": "string",
              "example": "N"
            },
            "example": "N"
          },
          {
            "name": "VariabilniSymbol",
            "in": "query",
            "description": "Variabilní symbol",
            "schema": {
              "maxLength": 10,
              "type": "string",
              "example": "133445566"
            },
            "example": "133445566"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfDobropisFvDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "Dobropis"
        ],
        "parameters": [
          {
            "name": "DobropisId",
            "in": "query",
            "description": "Interní identifikátor Dobropisu",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 781254
            },
            "example": 781254
          },
          {
            "name": "DobropisIdEx",
            "in": "query",
            "description": "Externí identifikátor Dobropisu",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "FVX_0001"
            },
            "example": "FVX_0001"
          },
          {
            "name": "Organizace.DatumNarozeni",
            "in": "query",
            "description": "Datum narození",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "2001-01-29"
            },
            "example": "2001-01-29"
          },
          {
            "name": "Organizace.Dic",
            "in": "query",
            "description": "DIČ",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "CZ11111111111"
            },
            "example": "CZ11111111111"
          },
          {
            "name": "Organizace.Ico",
            "in": "query",
            "description": "IČO",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "22222222222"
            },
            "example": "22222222222"
          },
          {
            "name": "Organizace.Jmeno",
            "in": "query",
            "description": "Jméno",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Josef"
            },
            "example": "Josef"
          },
          {
            "name": "Organizace.NazevDoplnujici",
            "in": "query",
            "description": "Doplňující název",
            "schema": {
              "maxLength": 80,
              "type": "string",
              "example": "NAZEV_DOPLN"
            },
            "example": "NAZEV_DOPLN"
          },
          {
            "name": "Organizace.NazevOrganizace",
            "in": "query",
            "description": "Název organizace",
            "schema": {
              "maxLength": 100,
              "type": "string",
              "example": "ALLSOFT s.r.o"
            },
            "example": "ALLSOFT s.r.o"
          },
          {
            "name": "Organizace.OrganizaceIdEx",
            "in": "query",
            "description": "Externí identifikátor organizace",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "OIX_0001"
            },
            "example": "OIX_0001"
          },
          {
            "name": "Organizace.PravniForma",
            "in": "query",
            "description": "Právní forma",
            "schema": {
              "maxLength": 6,
              "type": "string",
              "example": "SO"
            },
            "example": "SO"
          },
          {
            "name": "Organizace.Prijmeni",
            "in": "query",
            "description": "Příjmení",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Červený"
            },
            "example": "Červený"
          },
          {
            "name": "Organizace.RodneCislo",
            "in": "query",
            "description": "Rodné číslo",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "1234567777"
            },
            "example": "1234567777"
          },
          {
            "name": "Organizace.CisloDokladu",
            "in": "query",
            "description": "Číslo dokladu (max. 30 znaků)",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "112233445566"
            },
            "example": "112233445566"
          },
          {
            "name": "Organizace.TypDokladu",
            "in": "query",
            "description": "Typ dokladu - občanský průkaz (O) nebo cestovní pas (C)",
            "schema": {
              "maxLength": 1,
              "type": "string",
              "example": "C"
            },
            "example": "C"
          },
          {
            "name": "Stav",
            "in": "query",
            "description": "<br>Stav faktury\r\n<br>(0 - Pořízeno, 1 - Zaúčtováno, 7 - Stornováno)",
            "schema": {
              "type": "string",
              "example": "0"
            },
            "example": "0"
          },
          {
            "name": "StavUhrazenosti",
            "in": "query",
            "description": "<br>Stav uhrazenosti faktury\r\n<br>(N - Neuhrazeno, C - Částečně uhrazeno, U - Uhrazeno, P - Přeplaceno)",
            "schema": {
              "type": "string",
              "example": "N"
            },
            "example": "N"
          },
          {
            "name": "VariabilniSymbol",
            "in": "query",
            "description": "Variabilní symbol",
            "schema": {
              "maxLength": 10,
              "type": "string",
              "example": "133445566"
            },
            "example": "133445566"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfDobropisFvDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Lif/eShop/LegalForms/{legalFormId}": {
      "get": {
        "tags": [
          "EShop"
        ],
        "summary": "Gets info about a legal form.",
        "parameters": [
          {
            "name": "legalFormId",
            "in": "path",
            "description": "Identifier of a record (PK).",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RetrievalRange.HeaderOnly",
            "in": "query",
            "description": "Gets or sets whether only header of record should be retrieved. \r\nUsable for entities with items only!\r\nDefault is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RetrievalRange.ExcludeStaticRelations",
            "in": "query",
            "description": "Gets or sets which static relations (foreign keys) will be excluded.\r\nDefault is ASOL.Nephrite.WebAPI.Contracts.QueryParameters.RecordPartScope.None.",
            "schema": {
              "$ref": "#/components/schemas/RecordPartScope"
            }
          },
          {
            "name": "RetrievalRange.ExcludeDynamicRelations",
            "in": "query",
            "description": "Gets or sets which dynamic relations will be excluded.\r\nDefault is ASOL.Nephrite.WebAPI.Contracts.QueryParameters.RecordPartScope.None.",
            "schema": {
              "$ref": "#/components/schemas/RecordPartScope"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalFormResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Lif/eShop/Companies/{companyId}": {
      "get": {
        "tags": [
          "EShop"
        ],
        "summary": "Gets info about a company.",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Identifier of a record (PK).",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RetrievalRange.HeaderOnly",
            "in": "query",
            "description": "Gets or sets whether only header of record should be retrieved. \r\nUsable for entities with items only!\r\nDefault is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RetrievalRange.ExcludeStaticRelations",
            "in": "query",
            "description": "Gets or sets which static relations (foreign keys) will be excluded.\r\nDefault is ASOL.Nephrite.WebAPI.Contracts.QueryParameters.RecordPartScope.None.",
            "schema": {
              "$ref": "#/components/schemas/RecordPartScope"
            }
          },
          {
            "name": "RetrievalRange.ExcludeDynamicRelations",
            "in": "query",
            "description": "Gets or sets which dynamic relations will be excluded.\r\nDefault is ASOL.Nephrite.WebAPI.Contracts.QueryParameters.RecordPartScope.None.",
            "schema": {
              "$ref": "#/components/schemas/RecordPartScope"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "EShop"
        ],
        "summary": "Updates changed properties of a company.",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Identifier of record to update.",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Data for a company.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyUpdate"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "EShop"
        ],
        "summary": "Deletes a company record.",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Identifier of record to delete.",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Lif/eShop/Companies": {
      "post": {
        "tags": [
          "EShop"
        ],
        "summary": "Creates a new company.",
        "requestBody": {
          "description": "Data for a new company.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyCreate"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IRecordId"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Lif/eShop/CustomerOrders/{customerOrderId}": {
      "get": {
        "tags": [
          "EShop"
        ],
        "summary": "Gets data of a customer order.",
        "parameters": [
          {
            "name": "customerOrderId",
            "in": "path",
            "description": "Identifier of a record (PK).",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RetrievalRange.HeaderOnly",
            "in": "query",
            "description": "Gets or sets whether only header of record should be retrieved. \r\nUsable for entities with items only!\r\nDefault is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RetrievalRange.ExcludeStaticRelations",
            "in": "query",
            "description": "Gets or sets which static relations (foreign keys) will be excluded.\r\nDefault is ASOL.Nephrite.WebAPI.Contracts.QueryParameters.RecordPartScope.None.",
            "schema": {
              "$ref": "#/components/schemas/RecordPartScope"
            }
          },
          {
            "name": "RetrievalRange.ExcludeDynamicRelations",
            "in": "query",
            "description": "Gets or sets which dynamic relations will be excluded.\r\nDefault is ASOL.Nephrite.WebAPI.Contracts.QueryParameters.RecordPartScope.None.",
            "schema": {
              "$ref": "#/components/schemas/RecordPartScope"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerOrderResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "EShop"
        ],
        "summary": "Updates changed properties of a customer order.",
        "parameters": [
          {
            "name": "customerOrderId",
            "in": "path",
            "description": "Identifier of record to update.",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Data for a customer order.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerOrderUpdate"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "EShop"
        ],
        "summary": "Deletes a customer order.",
        "parameters": [
          {
            "name": "customerOrderId",
            "in": "path",
            "description": "Identifier of record to delete.",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Lif/eShop/CustomerOrders": {
      "post": {
        "tags": [
          "EShop"
        ],
        "summary": "Creates a new customer order.",
        "requestBody": {
          "description": "Data for a new customer order.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerOrderCreate"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IRecordId"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Lif/eShop/CustomerOrders/Run/Shipping": {
      "post": {
        "tags": [
          "EShop"
        ],
        "summary": "Calls a custom function no. 3504.",
        "parameters": [
          {
            "name": "FunctionId",
            "in": "query",
            "description": "Unique identifier of the function.\r\nIf it is not set, it is supposed ASOL.Nephrite.WebAPI.Common.DataAnotations.Metadata.FunctionMetadataAttribute is used in the function contract declaration.\r\nThis property has to be set, when ASOL.Nephrite.WebAPI.Common.DataAnotations.Metadata.FunctionMetadataAttribute is not used only (in descendant of ASOL.Nephrite.WebAPI.Contracts.ModelFunctionQueryBase class).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FolderId",
            "in": "query",
            "description": "Gets or sets folder identifier. Folder can be considered as a context in which the function runs. \r\nIf ASOL.Nephrite.WebAPI.Contracts.ModelFunctionQueryBase.FolderId equals 0, the function runs over view, whose folder is not defined.\r\nIf ASOL.Nephrite.WebAPI.Contracts.ModelFunctionQueryBase.FolderId is not entered, default value is used.\r\nThis is an optional parameter for specific scenarios.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "StoredParamsId",
            "in": "query",
            "description": "Identifier of predefined set of parameters which are stored in dedicated entity with identifier no. 1496.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ReturnLogDetail",
            "in": "query",
            "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.IFunctionResult log detail should be part of the message.",
            "schema": {
              "$ref": "#/components/schemas/ReturnFunctionLogDetailType"
            },
            "example": "error"
          }
        ],
        "requestBody": {
          "description": "Parameters of the function.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerOrderShippingFunctionBody"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IFunctionResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Lif/eShop/CounterpartSubBranches/{counterpartSubBranchId}": {
      "get": {
        "tags": [
          "EShop"
        ],
        "summary": "Gets data of a counterpart sub-branch office.",
        "parameters": [
          {
            "name": "counterpartSubBranchId",
            "in": "path",
            "description": "Identifier of a record (PK).",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RetrievalRange.HeaderOnly",
            "in": "query",
            "description": "Gets or sets whether only header of record should be retrieved. \r\nUsable for entities with items only!\r\nDefault is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RetrievalRange.ExcludeStaticRelations",
            "in": "query",
            "description": "Gets or sets which static relations (foreign keys) will be excluded.\r\nDefault is ASOL.Nephrite.WebAPI.Contracts.QueryParameters.RecordPartScope.None.",
            "schema": {
              "$ref": "#/components/schemas/RecordPartScope"
            }
          },
          {
            "name": "RetrievalRange.ExcludeDynamicRelations",
            "in": "query",
            "description": "Gets or sets which dynamic relations will be excluded.\r\nDefault is ASOL.Nephrite.WebAPI.Contracts.QueryParameters.RecordPartScope.None.",
            "schema": {
              "$ref": "#/components/schemas/RecordPartScope"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartSubBranchResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "EShop"
        ],
        "summary": "Updates changed properties of a counterpart sub-branch.",
        "parameters": [
          {
            "name": "counterpartSubBranchId",
            "in": "path",
            "description": "Identifier of record to update.",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Data for a counterpart sub-branch.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CounterpartSubBranchUpdate"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "EShop"
        ],
        "summary": "Deletes a counterpart sub-branch.",
        "parameters": [
          {
            "name": "counterpartSubBranchId",
            "in": "path",
            "description": "Identifier of record to delete.",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Lif/eShop/CounterpartSubBranches": {
      "post": {
        "tags": [
          "EShop"
        ],
        "summary": "Creates a new counterpart sub-branch.",
        "requestBody": {
          "description": "Data for a new counterpart sub-branch.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CounterpartSubBranchCreate"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IRecordId"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Lif/eShop/TinRegisters/{tinRegisterId}": {
      "get": {
        "tags": [
          "EShop"
        ],
        "summary": "Gets info about a TIN/VATIN registers.",
        "parameters": [
          {
            "name": "tinRegisterId",
            "in": "path",
            "description": "Identifier of a record (PK).",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RetrievalRange.HeaderOnly",
            "in": "query",
            "description": "Gets or sets whether only header of record should be retrieved. \r\nUsable for entities with items only!\r\nDefault is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RetrievalRange.ExcludeStaticRelations",
            "in": "query",
            "description": "Gets or sets which static relations (foreign keys) will be excluded.\r\nDefault is ASOL.Nephrite.WebAPI.Contracts.QueryParameters.RecordPartScope.None.",
            "schema": {
              "$ref": "#/components/schemas/RecordPartScope"
            }
          },
          {
            "name": "RetrievalRange.ExcludeDynamicRelations",
            "in": "query",
            "description": "Gets or sets which dynamic relations will be excluded.\r\nDefault is ASOL.Nephrite.WebAPI.Contracts.QueryParameters.RecordPartScope.None.",
            "schema": {
              "$ref": "#/components/schemas/RecordPartScope"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TinRegisterResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "EShop"
        ],
        "summary": "Updates changed properties of a tin register.",
        "parameters": [
          {
            "name": "tinRegisterId",
            "in": "path",
            "description": "Identifier of record to update.",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Data for a tin register.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TinRegisterUpdate"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "EShop"
        ],
        "summary": "Deletes a tin register.",
        "parameters": [
          {
            "name": "tinRegisterId",
            "in": "path",
            "description": "Identifier of record to delete.",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Lif/eShop/TinRegisters": {
      "post": {
        "tags": [
          "EShop"
        ],
        "summary": "Creates a new tin register.",
        "requestBody": {
          "description": "Data for a new tin register.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TinRegisterCreate"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IRecordId"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Lif/eShop/ExternalDocuments/{externalDocumentId}": {
      "get": {
        "tags": [
          "EShop"
        ],
        "summary": "Gets info about a external document.",
        "parameters": [
          {
            "name": "externalDocumentId",
            "in": "path",
            "description": "Identifier of a record (PK).",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FileContent",
            "in": "query",
            "description": "If true, content of external document is returned too.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RetrievalRange.HeaderOnly",
            "in": "query",
            "description": "Gets or sets whether only header of record should be retrieved. \r\nUsable for entities with items only!\r\nDefault is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RetrievalRange.ExcludeStaticRelations",
            "in": "query",
            "description": "Gets or sets which static relations (foreign keys) will be excluded.\r\nDefault is ASOL.Nephrite.WebAPI.Contracts.QueryParameters.RecordPartScope.None.",
            "schema": {
              "$ref": "#/components/schemas/RecordPartScope"
            }
          },
          {
            "name": "RetrievalRange.ExcludeDynamicRelations",
            "in": "query",
            "description": "Gets or sets which dynamic relations will be excluded.\r\nDefault is ASOL.Nephrite.WebAPI.Contracts.QueryParameters.RecordPartScope.None.",
            "schema": {
              "$ref": "#/components/schemas/RecordPartScope"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalDocumentResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Lif/eShop/ExternalDocuments/Run/Download": {
      "post": {
        "tags": [
          "EShop"
        ],
        "summary": "Downloads basic information about external document and its data in base64 coding.",
        "parameters": [
          {
            "name": "FunctionId",
            "in": "query",
            "description": "Unique identifier of the function.\r\nIf it is not set, it is supposed ASOL.Nephrite.WebAPI.Common.DataAnotations.Metadata.FunctionMetadataAttribute is used in the function contract declaration.\r\nThis property has to be set, when ASOL.Nephrite.WebAPI.Common.DataAnotations.Metadata.FunctionMetadataAttribute is not used only (in descendant of ASOL.Nephrite.WebAPI.Contracts.ModelFunctionQueryBase class).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FolderId",
            "in": "query",
            "description": "Gets or sets folder identifier. Folder can be considered as a context in which the function runs. \r\nIf ASOL.Nephrite.WebAPI.Contracts.ModelFunctionQueryBase.FolderId equals 0, the function runs over view, whose folder is not defined.\r\nIf ASOL.Nephrite.WebAPI.Contracts.ModelFunctionQueryBase.FolderId is not entered, default value is used.\r\nThis is an optional parameter for specific scenarios.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "StoredParamsId",
            "in": "query",
            "description": "Identifier of predefined set of parameters which are stored in dedicated entity with identifier no. 1496.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ReturnLogDetail",
            "in": "query",
            "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.IFunctionResult log detail should be part of the message.",
            "schema": {
              "$ref": "#/components/schemas/ReturnFunctionLogDetailType"
            },
            "example": "error"
          }
        ],
        "requestBody": {
          "description": "Parameters of the function.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DownloadExternalDocumentFunctionBody"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IFunctionWithOutputParamsResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Lif/eShop/PhoneConnections/{phoneConnectionId}": {
      "get": {
        "tags": [
          "EShop"
        ],
        "summary": "Gets data of a phone connection.",
        "parameters": [
          {
            "name": "phoneConnectionId",
            "in": "path",
            "description": "Identifier of a record (PK).",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RetrievalRange.HeaderOnly",
            "in": "query",
            "description": "Gets or sets whether only header of record should be retrieved. \r\nUsable for entities with items only!\r\nDefault is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RetrievalRange.ExcludeStaticRelations",
            "in": "query",
            "description": "Gets or sets which static relations (foreign keys) will be excluded.\r\nDefault is ASOL.Nephrite.WebAPI.Contracts.QueryParameters.RecordPartScope.None.",
            "schema": {
              "$ref": "#/components/schemas/RecordPartScope"
            }
          },
          {
            "name": "RetrievalRange.ExcludeDynamicRelations",
            "in": "query",
            "description": "Gets or sets which dynamic relations will be excluded.\r\nDefault is ASOL.Nephrite.WebAPI.Contracts.QueryParameters.RecordPartScope.None.",
            "schema": {
              "$ref": "#/components/schemas/RecordPartScope"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneConnectionResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "EShop"
        ],
        "summary": "Updates changed properties of a phone connection.",
        "parameters": [
          {
            "name": "phoneConnectionId",
            "in": "path",
            "description": "Identifier of record to update.",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Data for a phone connection.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneConnectionUpdate"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "EShop"
        ],
        "summary": "Deletes a a phone connection.",
        "parameters": [
          {
            "name": "phoneConnectionId",
            "in": "path",
            "description": "Identifier of record to delete.",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Lif/eShop/PhoneConnections": {
      "post": {
        "tags": [
          "EShop"
        ],
        "summary": "Creates a new phone connection.",
        "requestBody": {
          "description": "Data for a new phone connection.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneConnectionCreate"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IRecordId"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Lif/eShop/InvoicesOut/{invoiceOutId}": {
      "get": {
        "tags": [
          "EShop"
        ],
        "summary": "Gets data of an invoice out.",
        "parameters": [
          {
            "name": "invoiceOutId",
            "in": "path",
            "description": "Identifier of a record (PK).",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RetrievalRange.HeaderOnly",
            "in": "query",
            "description": "Gets or sets whether only header of record should be retrieved. \r\nUsable for entities with items only!\r\nDefault is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RetrievalRange.ExcludeStaticRelations",
            "in": "query",
            "description": "Gets or sets which static relations (foreign keys) will be excluded.\r\nDefault is ASOL.Nephrite.WebAPI.Contracts.QueryParameters.RecordPartScope.None.",
            "schema": {
              "$ref": "#/components/schemas/RecordPartScope"
            }
          },
          {
            "name": "RetrievalRange.ExcludeDynamicRelations",
            "in": "query",
            "description": "Gets or sets which dynamic relations will be excluded.\r\nDefault is ASOL.Nephrite.WebAPI.Contracts.QueryParameters.RecordPartScope.None.",
            "schema": {
              "$ref": "#/components/schemas/RecordPartScope"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceOutResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "EShop"
        ],
        "summary": "Updates changed properties of an invoice out.",
        "parameters": [
          {
            "name": "invoiceOutId",
            "in": "path",
            "description": "Identifier of record to update.",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Data for an invoice out.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceOutUpdate"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "EShop"
        ],
        "summary": "Deletes an invoice out.",
        "parameters": [
          {
            "name": "invoiceOutId",
            "in": "path",
            "description": "Identifier of record to delete.",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Lif/eShop/InvoicesOut": {
      "post": {
        "tags": [
          "EShop"
        ],
        "summary": "Creates new invoice out.",
        "requestBody": {
          "description": "Data for new invoice out.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceOutCreate"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IRecordId"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/FakturaVydana": {
      "post": {
        "tags": [
          "FakturaVydana"
        ],
        "summary": "Založení nového Faktury vydané",
        "requestBody": {
          "description": "Data nové Faktury vydané",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FakturaVydanaCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FakturaVydanaDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "FakturaVydana"
        ],
        "parameters": [
          {
            "name": "fakturaId",
            "in": "query",
            "description": "Interní identifikátor Faktury vydané",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 781254
            },
            "example": 781254
          },
          {
            "name": "fakturaIdEx",
            "in": "query",
            "description": "Externí identifikátor Faktury vydané",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "FAK_0001"
            },
            "example": "FAK_0001"
          },
          {
            "name": "organizace.DatumNarozeni",
            "in": "query",
            "description": "Datum narození",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "2001-01-29"
            },
            "example": "2001-01-29"
          },
          {
            "name": "organizace.Dic",
            "in": "query",
            "description": "DIČ",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "CZ11111111111"
            },
            "example": "CZ11111111111"
          },
          {
            "name": "organizace.Ico",
            "in": "query",
            "description": "IČO",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "22222222222"
            },
            "example": "22222222222"
          },
          {
            "name": "organizace.Jmeno",
            "in": "query",
            "description": "Jméno",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Josef"
            },
            "example": "Josef"
          },
          {
            "name": "organizace.NazevDoplnujici",
            "in": "query",
            "description": "Doplňující název",
            "schema": {
              "maxLength": 80,
              "type": "string",
              "example": "NAZEV_DOPLN"
            },
            "example": "NAZEV_DOPLN"
          },
          {
            "name": "organizace.NazevOrganizace",
            "in": "query",
            "description": "Název organizace",
            "schema": {
              "maxLength": 100,
              "type": "string",
              "example": "ALLSOFT s.r.o"
            },
            "example": "ALLSOFT s.r.o"
          },
          {
            "name": "organizace.OrganizaceIdEx",
            "in": "query",
            "description": "Externí identifikátor organizace",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "OIX_0001"
            },
            "example": "OIX_0001"
          },
          {
            "name": "organizace.PravniForma",
            "in": "query",
            "description": "Právní forma",
            "schema": {
              "maxLength": 6,
              "type": "string",
              "example": "SO"
            },
            "example": "SO"
          },
          {
            "name": "organizace.Prijmeni",
            "in": "query",
            "description": "Příjmení",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Červený"
            },
            "example": "Červený"
          },
          {
            "name": "organizace.RodneCislo",
            "in": "query",
            "description": "Rodné číslo",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "1234567777"
            },
            "example": "1234567777"
          },
          {
            "name": "organizace.CisloDokladu",
            "in": "query",
            "description": "Číslo dokladu (max. 30 znaků)",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "112233445566"
            },
            "example": "112233445566"
          },
          {
            "name": "organizace.TypDokladu",
            "in": "query",
            "description": "Typ dokladu - občanský průkaz (O) nebo cestovní pas (C)",
            "schema": {
              "maxLength": 1,
              "type": "string",
              "example": "C"
            },
            "example": "C"
          },
          {
            "name": "stav",
            "in": "query",
            "description": "<br>Stav faktury\r\n<br>(0 - Pořízeno, 1 - Zaúčtováno, 7 - Stornováno)",
            "schema": {
              "type": "string",
              "example": "0"
            },
            "example": "0"
          },
          {
            "name": "stavUhrazenosti",
            "in": "query",
            "description": "<br>Stav uhrazenosti faktury\r\n<br>(N - Neuhrazeno, C - Částečně uhrazeno, U - Uhrazeno, P - Přeplaceno)",
            "schema": {
              "type": "string",
              "example": "N"
            },
            "example": "N"
          },
          {
            "name": "variabilniSymbol",
            "in": "query",
            "schema": {
              "maxLength": 10,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfFakturaVydanaDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "FakturaVydana"
        ],
        "parameters": [
          {
            "name": "fakturaId",
            "in": "query",
            "description": "Interní identifikátor Faktury vydané",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 781254
            },
            "example": 781254
          },
          {
            "name": "fakturaIdEx",
            "in": "query",
            "description": "Externí identifikátor Faktury vydané",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "FAK_0001"
            },
            "example": "FAK_0001"
          },
          {
            "name": "organizace.DatumNarozeni",
            "in": "query",
            "description": "Datum narození",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "2001-01-29"
            },
            "example": "2001-01-29"
          },
          {
            "name": "organizace.Dic",
            "in": "query",
            "description": "DIČ",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "CZ11111111111"
            },
            "example": "CZ11111111111"
          },
          {
            "name": "organizace.Ico",
            "in": "query",
            "description": "IČO",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "22222222222"
            },
            "example": "22222222222"
          },
          {
            "name": "organizace.Jmeno",
            "in": "query",
            "description": "Jméno",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Josef"
            },
            "example": "Josef"
          },
          {
            "name": "organizace.NazevDoplnujici",
            "in": "query",
            "description": "Doplňující název",
            "schema": {
              "maxLength": 80,
              "type": "string",
              "example": "NAZEV_DOPLN"
            },
            "example": "NAZEV_DOPLN"
          },
          {
            "name": "organizace.NazevOrganizace",
            "in": "query",
            "description": "Název organizace",
            "schema": {
              "maxLength": 100,
              "type": "string",
              "example": "ALLSOFT s.r.o"
            },
            "example": "ALLSOFT s.r.o"
          },
          {
            "name": "organizace.OrganizaceIdEx",
            "in": "query",
            "description": "Externí identifikátor organizace",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "OIX_0001"
            },
            "example": "OIX_0001"
          },
          {
            "name": "organizace.PravniForma",
            "in": "query",
            "description": "Právní forma",
            "schema": {
              "maxLength": 6,
              "type": "string",
              "example": "SO"
            },
            "example": "SO"
          },
          {
            "name": "organizace.Prijmeni",
            "in": "query",
            "description": "Příjmení",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Červený"
            },
            "example": "Červený"
          },
          {
            "name": "organizace.RodneCislo",
            "in": "query",
            "description": "Rodné číslo",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "1234567777"
            },
            "example": "1234567777"
          },
          {
            "name": "organizace.CisloDokladu",
            "in": "query",
            "description": "Číslo dokladu (max. 30 znaků)",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "112233445566"
            },
            "example": "112233445566"
          },
          {
            "name": "organizace.TypDokladu",
            "in": "query",
            "description": "Typ dokladu - občanský průkaz (O) nebo cestovní pas (C)",
            "schema": {
              "maxLength": 1,
              "type": "string",
              "example": "C"
            },
            "example": "C"
          },
          {
            "name": "stav",
            "in": "query",
            "description": "<br>Stav faktury\r\n<br>(0 - Pořízeno, 1 - Zaúčtováno, 7 - Stornováno)",
            "schema": {
              "type": "string",
              "example": "0"
            },
            "example": "0"
          },
          {
            "name": "stavUhrazenosti",
            "in": "query",
            "description": "<br>Stav uhrazenosti faktury\r\n<br>(N - Neuhrazeno, C - Částečně uhrazeno, U - Uhrazeno, P - Přeplaceno)",
            "schema": {
              "type": "string",
              "example": "N"
            },
            "example": "N"
          },
          {
            "name": "variabilniSymbol",
            "in": "query",
            "schema": {
              "maxLength": 10,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfFakturaVydanaDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Files/Upload": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Uploads a file to the application server temp directory. \r\nBeware! Uploaded file is kept limited time only! See uploadFileOptions for more information.",
        "parameters": [
          {
            "name": "Priority",
            "in": "query",
            "description": "The priority for keeping the cache entry in the cache during a memory pressure tokened cleanup. Possible values: low, normal, high, neverRemove.",
            "schema": {
              "$ref": "#/components/schemas/CacheItemPriority"
            },
            "example": "normal"
          },
          {
            "name": "AbsoluteExpirationRelativeToNow",
            "in": "query",
            "description": "Defines an absolute expiration time (in minutes), relative to time when a cache entry was stored.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 60
            },
            "example": 60
          },
          {
            "name": "SlidingExpiration",
            "in": "query",
            "description": "Defines how long (in minutes) the cache entry can be inactive (e.g. not accessed) before it will be removed. \r\nThis will not extend the entry lifetime beyond the absolute expiration (if set).",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            },
            "example": 10
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "ContentType": {
                  "style": "form"
                },
                "ContentDisposition": {
                  "style": "form"
                },
                "Headers": {
                  "style": "form"
                },
                "Length": {
                  "style": "form"
                },
                "Name": {
                  "style": "form"
                },
                "FileName": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadedFileResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Files/UploadMoreFiles": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Uploads the file and keep it in cache for several minutes.\r\nBeware! Uploaded files are kept limited time only! See uploadFileOptions for more information.",
        "parameters": [
          {
            "name": "Priority",
            "in": "query",
            "description": "The priority for keeping the cache entry in the cache during a memory pressure tokened cleanup. Possible values: low, normal, high, neverRemove.",
            "schema": {
              "$ref": "#/components/schemas/CacheItemPriority"
            },
            "example": "normal"
          },
          {
            "name": "AbsoluteExpirationRelativeToNow",
            "in": "query",
            "description": "Defines an absolute expiration time (in minutes), relative to time when a cache entry was stored.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 60
            },
            "example": 60
          },
          {
            "name": "SlidingExpiration",
            "in": "query",
            "description": "Defines how long (in minutes) the cache entry can be inactive (e.g. not accessed) before it will be removed. \r\nThis will not extend the entry lifetime beyond the absolute expiration (if set).",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            },
            "example": 10
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    },
                    "description": "Select files",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFilesCollectionResultOfUploadedFileResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Files/UploadLargeFile": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Uploads a file to the application server temp directory. File size limit is 1 GB.\r\nFile is passed as \"multipart/form-data\", however body with those file is read by a stream reader continuously.\r\nBeware! Uploaded file is kept limited time only! See uploadFileOptions for more information.",
        "parameters": [
          {
            "name": "Priority",
            "in": "query",
            "description": "The priority for keeping the cache entry in the cache during a memory pressure tokened cleanup. Possible values: low, normal, high, neverRemove.",
            "schema": {
              "$ref": "#/components/schemas/CacheItemPriority"
            },
            "example": "normal"
          },
          {
            "name": "AbsoluteExpirationRelativeToNow",
            "in": "query",
            "description": "Defines an absolute expiration time (in minutes), relative to time when a cache entry was stored.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 60
            },
            "example": 60
          },
          {
            "name": "SlidingExpiration",
            "in": "query",
            "description": "Defines how long (in minutes) the cache entry can be inactive (e.g. not accessed) before it will be removed. \r\nThis will not extend the entry lifetime beyond the absolute expiration (if set).",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            },
            "example": 10
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UploadedFileResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadedFileResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadedFileResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Generic/browse/{classId}": {
      "get": {
        "tags": [
          "Generic"
        ],
        "summary": "Gets collection of records according to parameters.",
        "description": "Sample request:\r\n            \r\n    GET /api/v1/Generic/browse/214?Id=18256",
        "parameters": [
          {
            "name": "classId",
            "in": "path",
            "description": "Class/Entity unique identifier.",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Id",
            "in": "query",
            "description": "<br>\r\n            Gets or sets identifier of template or view which is used to browse data.\r\n            0 or unspecified value means a user default template or view.\r\n            \r\n<br>Use this parameter instead of former 'BrowseId.BrowseNumber' parameter.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Type",
            "in": "query",
            "description": "<br>\r\n            Type of a browse. Default is ASOL.Nephrite.WebAPI.Contracts.BrowseType.Template.\r\n            \r\n<br>\r\n            Use this parameter instead of former 'BrowseId.Type' parameter.\r\n            ",
            "schema": {
              "$ref": "#/components/schemas/BrowseType"
            }
          },
          {
            "name": "FilterId",
            "in": "query",
            "description": "Unique identifier of a predefined filter to get data.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FilterParams",
            "in": "query",
            "description": "<br>Optional. It has to be specified when a filter definition (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId) contains variable arguments.\r\n<br>\r\n            Variable arguments of a filter which is specified in ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId.\r\n            They have to be specified when this filter contains at least one parameter which value is specified as a variable (a named parameter).\r\n            This value has to be specified at the moment when the filter is applied.\r\n            If value of parameter is not set, it will be marked as skipped, see Description in example.\r\n            If value is null, a null value will be passed to parameter. \r\n            \r\n<br>\r\n            Example: ?FilterParams=Code='ABC'&FilterParams=Price=123.56&FilterParams=issueDate=2021-11-03T00:00:00&FilterParams=Description&FilterParams=Code=null\r\n            ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "TemplateFilterParams",
            "in": "query",
            "description": "<br>Optional. It has to be specified when a browse template filter definition (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id) contains variable arguments.\r\n<br>\r\n            Variable arguments of a filter which is part of a browse template filter definition (default one for a current user or specified in ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id).\r\n            They have to be specified when this filter contains at least one parameter which value is specified as a variable (a named parameter).\r\n            This value has to be specified at the moment when the filter is applied.\r\n            If value of parameter is not set, it will be marked as skipped, see Description in example.\r\n            If value is null, a null value will be passed to parameter. \r\n            \r\n<br>\r\n            Example: TemplateFilterParams=Code='ABC'&TemplateFilterParams=Price=123.56&TemplateFilterParams=issueDate=2021-11-03T00:00:00&TemplateFilterParams=Description&TemplateFilterParams=Code=null\r\n            ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "FolderId",
            "in": "query",
            "description": "Folder where records to get are stored.\r\nIf zero or null, default folder is used.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "description": "<br>\r\n            Filter expression to get data.\r\n            \r\n<br>\r\n            THIS PROPERTY'S NOT SUPPORTED YET! DON'T USE IT AT ALL! IT IS IGNORED!\r\n            INSTEAD, USE A PREDEFINED FILTER (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId) or filter which is a part of a browse template (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id).\r\n            ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "Sort order rules for returned data.\r\nRules have to match a column definition of template which is used to retrieve data.\r\nFormat is: \"[template column name] [sort direction]\", e.g.: ?orderBy=name desc,hireDate. Also \"asc\" can be used for more clarity.\r\nIf neither \"desc\" nor \"asc\" is used, \"asc\" is used by default.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TotalCount",
            "in": "query",
            "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.BrowseResponse should contain the total number of rows.\r\nDefault is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Count",
            "in": "query",
            "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.BrowseResponse should contain the number of rows on current page..\r\nDefault is true.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Number of rows which are skipped during retrieval of data.\r\nIf not specified, no rows are skipped. It means, the first row on the first page is displayed at the top of the page.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "Top",
            "in": "query",
            "description": "Page size.\r\nIf not specified, default user settings will be used.",
            "schema": {
              "maximum": 2147483647,
              "minimum": -1,
              "type": "integer",
              "format": "int32",
              "example": 100
            },
            "example": 100
          },
          {
            "name": "ASOL-WebAPI-Period",
            "in": "header",
            "description": "<br>\r\n             If this header is specified, request will be processed in context of specified period. More headers with this name may be specified.\r\n             \r\n<br></para>\r\n             Values can be:\r\n             <para><br>\r\n             Accounting=0x0000000100000000000000000000000000000000000000000000000000000000\r\n             Calendar=0x0000000080000000000000000000000000000000000000000000000000000000\r\n             <br>The hex string is a code of period.<br>\r\n             To get period codes call GET /api/vX/Configuration/Periods endpoint.\r\n             ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrowseResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Generic/browse/{authorSymbolicName}/{classSymbolicName}": {
      "get": {
        "tags": [
          "Generic"
        ],
        "summary": "Gets collection of records according to parameters.",
        "description": "Sample request:\r\n            \r\n    GET api/v1/Generic/browse/ASOL/CustomerOrders?Id=18256",
        "parameters": [
          {
            "name": "authorSymbolicName",
            "in": "path",
            "description": "Symbolic name of an development author.",
            "required": true,
            "schema": {
              "minLength": 3,
              "pattern": "^[a-z]*$",
              "type": "string"
            }
          },
          {
            "name": "classSymbolicName",
            "in": "path",
            "description": "Class/Entity symbolic name in plural.",
            "required": true,
            "schema": {
              "minLength": 3,
              "pattern": "^[a-z]*$",
              "type": "string"
            }
          },
          {
            "name": "Id",
            "in": "query",
            "description": "<br>\r\n            Gets or sets identifier of template or view which is used to browse data.\r\n            0 or unspecified value means a user default template or view.\r\n            \r\n<br>Use this parameter instead of former 'BrowseId.BrowseNumber' parameter.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Type",
            "in": "query",
            "description": "<br>\r\n            Type of a browse. Default is ASOL.Nephrite.WebAPI.Contracts.BrowseType.Template.\r\n            \r\n<br>\r\n            Use this parameter instead of former 'BrowseId.Type' parameter.\r\n            ",
            "schema": {
              "$ref": "#/components/schemas/BrowseType"
            }
          },
          {
            "name": "FilterId",
            "in": "query",
            "description": "Unique identifier of a predefined filter to get data.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FilterParams",
            "in": "query",
            "description": "<br>Optional. It has to be specified when a filter definition (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId) contains variable arguments.\r\n<br>\r\n            Variable arguments of a filter which is specified in ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId.\r\n            They have to be specified when this filter contains at least one parameter which value is specified as a variable (a named parameter).\r\n            This value has to be specified at the moment when the filter is applied.\r\n            If value of parameter is not set, it will be marked as skipped, see Description in example.\r\n            If value is null, a null value will be passed to parameter. \r\n            \r\n<br>\r\n            Example: ?FilterParams=Code='ABC'&FilterParams=Price=123.56&FilterParams=issueDate=2021-11-03T00:00:00&FilterParams=Description&FilterParams=Code=null\r\n            ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "TemplateFilterParams",
            "in": "query",
            "description": "<br>Optional. It has to be specified when a browse template filter definition (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id) contains variable arguments.\r\n<br>\r\n            Variable arguments of a filter which is part of a browse template filter definition (default one for a current user or specified in ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id).\r\n            They have to be specified when this filter contains at least one parameter which value is specified as a variable (a named parameter).\r\n            This value has to be specified at the moment when the filter is applied.\r\n            If value of parameter is not set, it will be marked as skipped, see Description in example.\r\n            If value is null, a null value will be passed to parameter. \r\n            \r\n<br>\r\n            Example: TemplateFilterParams=Code='ABC'&TemplateFilterParams=Price=123.56&TemplateFilterParams=issueDate=2021-11-03T00:00:00&TemplateFilterParams=Description&TemplateFilterParams=Code=null\r\n            ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "FolderId",
            "in": "query",
            "description": "Folder where records to get are stored.\r\nIf zero or null, default folder is used.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "description": "<br>\r\n            Filter expression to get data.\r\n            \r\n<br>\r\n            THIS PROPERTY'S NOT SUPPORTED YET! DON'T USE IT AT ALL! IT IS IGNORED!\r\n            INSTEAD, USE A PREDEFINED FILTER (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId) or filter which is a part of a browse template (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id).\r\n            ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "Sort order rules for returned data.\r\nRules have to match a column definition of template which is used to retrieve data.\r\nFormat is: \"[template column name] [sort direction]\", e.g.: ?orderBy=name desc,hireDate. Also \"asc\" can be used for more clarity.\r\nIf neither \"desc\" nor \"asc\" is used, \"asc\" is used by default.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TotalCount",
            "in": "query",
            "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.BrowseResponse should contain the total number of rows.\r\nDefault is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Count",
            "in": "query",
            "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.BrowseResponse should contain the number of rows on current page..\r\nDefault is true.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Number of rows which are skipped during retrieval of data.\r\nIf not specified, no rows are skipped. It means, the first row on the first page is displayed at the top of the page.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "Top",
            "in": "query",
            "description": "Page size.\r\nIf not specified, default user settings will be used.",
            "schema": {
              "maximum": 2147483647,
              "minimum": -1,
              "type": "integer",
              "format": "int32",
              "example": 100
            },
            "example": 100
          },
          {
            "name": "ASOL-WebAPI-Period",
            "in": "header",
            "description": "<br>\r\n             If this header is specified, request will be processed in context of specified period. More headers with this name may be specified.\r\n             \r\n<br></para>\r\n             Values can be:\r\n             <para><br>\r\n             Accounting=0x0000000100000000000000000000000000000000000000000000000000000000\r\n             Calendar=0x0000000080000000000000000000000000000000000000000000000000000000\r\n             <br>The hex string is a code of period.<br>\r\n             To get period codes call GET /api/vX/Configuration/Periods endpoint.\r\n             ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrowseResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Generic/browse/{classSymbolicName}": {
      "get": {
        "tags": [
          "Generic"
        ],
        "summary": "Gets collection of records according to parameters.",
        "description": "Sample request:\r\n            \r\n    GET api/v1/Generic/browse/CustomerOrders?Id=18256",
        "parameters": [
          {
            "name": "classSymbolicName",
            "in": "path",
            "description": "Class/Entity symbolic name in plural. Author no. 1 (Asseco solutions) is used.",
            "required": true,
            "schema": {
              "minLength": 3,
              "pattern": "^[a-z]*$",
              "type": "string"
            }
          },
          {
            "name": "Id",
            "in": "query",
            "description": "<br>\r\n            Gets or sets identifier of template or view which is used to browse data.\r\n            0 or unspecified value means a user default template or view.\r\n            \r\n<br>Use this parameter instead of former 'BrowseId.BrowseNumber' parameter.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Type",
            "in": "query",
            "description": "<br>\r\n            Type of a browse. Default is ASOL.Nephrite.WebAPI.Contracts.BrowseType.Template.\r\n            \r\n<br>\r\n            Use this parameter instead of former 'BrowseId.Type' parameter.\r\n            ",
            "schema": {
              "$ref": "#/components/schemas/BrowseType"
            }
          },
          {
            "name": "FilterId",
            "in": "query",
            "description": "Unique identifier of a predefined filter to get data.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FilterParams",
            "in": "query",
            "description": "<br>Optional. It has to be specified when a filter definition (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId) contains variable arguments.\r\n<br>\r\n            Variable arguments of a filter which is specified in ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId.\r\n            They have to be specified when this filter contains at least one parameter which value is specified as a variable (a named parameter).\r\n            This value has to be specified at the moment when the filter is applied.\r\n            If value of parameter is not set, it will be marked as skipped, see Description in example.\r\n            If value is null, a null value will be passed to parameter. \r\n            \r\n<br>\r\n            Example: ?FilterParams=Code='ABC'&FilterParams=Price=123.56&FilterParams=issueDate=2021-11-03T00:00:00&FilterParams=Description&FilterParams=Code=null\r\n            ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "TemplateFilterParams",
            "in": "query",
            "description": "<br>Optional. It has to be specified when a browse template filter definition (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id) contains variable arguments.\r\n<br>\r\n            Variable arguments of a filter which is part of a browse template filter definition (default one for a current user or specified in ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id).\r\n            They have to be specified when this filter contains at least one parameter which value is specified as a variable (a named parameter).\r\n            This value has to be specified at the moment when the filter is applied.\r\n            If value of parameter is not set, it will be marked as skipped, see Description in example.\r\n            If value is null, a null value will be passed to parameter. \r\n            \r\n<br>\r\n            Example: TemplateFilterParams=Code='ABC'&TemplateFilterParams=Price=123.56&TemplateFilterParams=issueDate=2021-11-03T00:00:00&TemplateFilterParams=Description&TemplateFilterParams=Code=null\r\n            ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "FolderId",
            "in": "query",
            "description": "Folder where records to get are stored.\r\nIf zero or null, default folder is used.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "description": "<br>\r\n            Filter expression to get data.\r\n            \r\n<br>\r\n            THIS PROPERTY'S NOT SUPPORTED YET! DON'T USE IT AT ALL! IT IS IGNORED!\r\n            INSTEAD, USE A PREDEFINED FILTER (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId) or filter which is a part of a browse template (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id).\r\n            ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "Sort order rules for returned data.\r\nRules have to match a column definition of template which is used to retrieve data.\r\nFormat is: \"[template column name] [sort direction]\", e.g.: ?orderBy=name desc,hireDate. Also \"asc\" can be used for more clarity.\r\nIf neither \"desc\" nor \"asc\" is used, \"asc\" is used by default.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TotalCount",
            "in": "query",
            "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.BrowseResponse should contain the total number of rows.\r\nDefault is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Count",
            "in": "query",
            "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.BrowseResponse should contain the number of rows on current page..\r\nDefault is true.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Number of rows which are skipped during retrieval of data.\r\nIf not specified, no rows are skipped. It means, the first row on the first page is displayed at the top of the page.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "Top",
            "in": "query",
            "description": "Page size.\r\nIf not specified, default user settings will be used.",
            "schema": {
              "maximum": 2147483647,
              "minimum": -1,
              "type": "integer",
              "format": "int32",
              "example": 100
            },
            "example": 100
          },
          {
            "name": "ASOL-WebAPI-Period",
            "in": "header",
            "description": "<br>\r\n             If this header is specified, request will be processed in context of specified period. More headers with this name may be specified.\r\n             \r\n<br></para>\r\n             Values can be:\r\n             <para><br>\r\n             Accounting=0x0000000100000000000000000000000000000000000000000000000000000000\r\n             Calendar=0x0000000080000000000000000000000000000000000000000000000000000000\r\n             <br>The hex string is a code of period.<br>\r\n             To get period codes call GET /api/vX/Configuration/Periods endpoint.\r\n             ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrowseResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/GenericData/Classes/{classId}": {
      "get": {
        "tags": [
          "GenericData"
        ],
        "summary": "<br>\r\n            This endpoint is obsolete! Use /api/v1/generic/browse/{classId:int:min(1)} (/api/v1/generic/browse/{classSymbolicName:alpha}) endpoint instead. \r\n            \r\n<br>\r\n            Gets collection of records according to parameters.\r\n            \r\n<br>\r\n            Beware! FilterArguments parameter is renamed to TemplateFilterParams and instead of BrowseIdentification use BrowseId.BrowseNumber and BrowseId.BrowseType properties.\r\n            ",
        "parameters": [
          {
            "name": "classId",
            "in": "path",
            "description": "Class/Entity identifier of the records.",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "BrowseId.BrowseNumber",
            "in": "query",
            "description": "<br>\r\n            Gets or sets browse template or view number (unique).\r\n            \r\n<br>\r\n            Beware! This property is obsolete!\r\n            \r\n<br>\r\n            In the future, in '/api/v1/generic/browse/**' endpoints, this property will be replaced by 'Id' property.\r\n            So, if this is a query parameter of any of '/api/v1/generic/browse/**' endpoints, use 'Id' property!\r\n            Do NOT query parameters 'Id' and 'BrowseId.BrowseNumber' together in a request.\r\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10236,
              "deprecated": true
            },
            "example": 10236
          },
          {
            "name": "BrowseId.BrowseType",
            "in": "query",
            "description": "<br>\r\n            Gets or sets browse type - type of browse is used to retrieve data. Default is ASOL.Nephrite.WebAPI.Contracts.BrowseType.Template.\r\n            \r\n<br>\r\n            Beware! This property is obsolete!\r\n            \r\n<br>\r\n            In the future, in '/api/v1/generic/browse/**' endpoints, this property will be replaced by 'Type' property.\r\n            So, if this is a query parameter of any of '/api/v1/generic/browse/**' endpoints, use 'Type' property!\r\n            Do NOT query parameters 'Type' and 'BrowseId.BrowseType' together in a request.\r\n            ",
            "schema": {
              "$ref": "#/components/schemas/BrowseType"
            },
            "example": "template"
          },
          {
            "name": "FilterArguments",
            "in": "query",
            "description": "<br>\r\n            This parameter is obsolete and it will be removed in the future. Use 'TemplateFilterParams' in new generic endpoint /api/v1/generic/browse/... instead.\r\n            \r\n<br>\r\n            Optional.\r\n            \r\n<br>\r\n            Arguments of a filter which is part of a browse template filter definition.\r\n            They have to be specified when a browse template contains a filter with parameters only.\r\n            If value of parameter is not set, it will be marked as skipped, see Description in example.\r\n            If value is null, a null value will be passed to parameter. \r\n            \r\n<br>\r\n            Example: FilterArguments=Code='ABC'&FilterArguments=Price=123.56&FilterArguments=issueDate=2021-11-03T00:00:00&FilterArguments=Description&FilterArguments=Code=null\r\n            ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "deprecated": true
            }
          },
          {
            "name": "BrowseIdentification",
            "in": "query",
            "description": "<br>\r\n             This property is obsolete and it will be removed in the future. Use ASOL.Nephrite.WebAPI.Contracts.BrowseId.BrowseNumber and ASOL.Nephrite.WebAPI.Contracts.BrowseId.BrowseType instead.\r\n             \r\n<br>\r\n             Represents identification of template or view which will be used to retrieve data.\r\n             Pattern to fill this parameter is {<T|V>N} where T means a template, V means a view\r\n             and N is unique identifier of the view or template.\r\n             Example: &BrowseIdentification=T11158 means that the template with number 11158 will be used to retrieve data.\r\n            \r\n             If not specified, default user settings will be used.\r\n             ",
            "schema": {
              "type": "string",
              "deprecated": true
            }
          },
          {
            "name": "FolderId",
            "in": "query",
            "description": "Folder where records to get are stored.\r\nIf zero or null, default folder is used.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "description": "<br>\r\n            Filter expression to get data.\r\n            \r\n<br>\r\n            THIS PROPERTY'S NOT SUPPORTED YET! DON'T USE IT AT ALL! IT IS IGNORED!\r\n            INSTEAD, USE A PREDEFINED FILTER (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId) or filter which is a part of a browse template (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id).\r\n            ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "Sort order rules for returned data.\r\nRules have to match a column definition of template which is used to retrieve data.\r\nFormat is: \"[template column name] [sort direction]\", e.g.: ?orderBy=name desc,hireDate. Also \"asc\" can be used for more clarity.\r\nIf neither \"desc\" nor \"asc\" is used, \"asc\" is used by default.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TotalCount",
            "in": "query",
            "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.BrowseResponse should contain the total number of rows.\r\nDefault is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Count",
            "in": "query",
            "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.BrowseResponse should contain the number of rows on current page..\r\nDefault is true.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Number of rows which are skipped during retrieval of data.\r\nIf not specified, no rows are skipped. It means, the first row on the first page is displayed at the top of the page.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "Top",
            "in": "query",
            "description": "Page size.\r\nIf not specified, default user settings will be used.",
            "schema": {
              "maximum": 2147483647,
              "minimum": -1,
              "type": "integer",
              "format": "int32",
              "example": 100
            },
            "example": 100
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrowseResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/GenericData/Classes/{classId}/Records/{id}": {
      "delete": {
        "tags": [
          "GenericData"
        ],
        "summary": "<br>\r\n            Deletes a record. \r\n            \r\n<br>\r\n            This endpoint is obsolete! Deletion of records will be processed by a generic call in the future.\r\n            ",
        "parameters": [
          {
            "name": "classId",
            "in": "path",
            "description": "Class/Entity identifier of the record.",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Local identifier if the record.",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Kniha": {
      "get": {
        "tags": [
          "Kniha"
        ],
        "summary": "Vyhledání Knih",
        "parameters": [
          {
            "name": "EvidencniTyp",
            "in": "query",
            "description": "Evidenční typ (pole)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfCiselnikKodDph"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "Kniha"
        ],
        "summary": "Vyhledání Knih",
        "parameters": [
          {
            "name": "EvidencniTyp",
            "in": "query",
            "description": "Evidenční typ (pole)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfCiselnikKodDph"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/KontacePrvodokladu": {
      "get": {
        "tags": [
          "KontacePrvodokladu"
        ],
        "summary": "Vyhledání kontace prvodokladu podle třídy parametrů hledání KontacePrvodokladuSearch ve FromQuery.",
        "parameters": [
          {
            "name": "interniCislo",
            "in": "query",
            "description": "Interní číslo.",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "001"
            },
            "example": "001"
          },
          {
            "name": "kontaceNazev",
            "in": "query",
            "description": "Název.",
            "schema": {
              "maxLength": 40,
              "type": "string",
              "example": "předpis FV"
            },
            "example": "předpis FV"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfKontacePrvodokladuDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Custom/MIM/Locations": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Gets collection of locations according to parameters.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "<br>\r\n            Gets or sets identifier of template or view which is used to browse data.\r\n            0 or unspecified value means a user default template or view.\r\n            \r\n<br>Use this parameter instead of former 'BrowseId.BrowseNumber' parameter.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Type",
            "in": "query",
            "description": "<br>\r\n            Type of a browse. Default is ASOL.Nephrite.WebAPI.Contracts.BrowseType.Template.\r\n            \r\n<br>\r\n            Use this parameter instead of former 'BrowseId.Type' parameter.\r\n            ",
            "schema": {
              "$ref": "#/components/schemas/BrowseType"
            }
          },
          {
            "name": "FilterId",
            "in": "query",
            "description": "Unique identifier of a predefined filter to get data.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FilterParams",
            "in": "query",
            "description": "<br>Optional. It has to be specified when a filter definition (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId) contains variable arguments.\r\n<br>\r\n            Variable arguments of a filter which is specified in ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId.\r\n            They have to be specified when this filter contains at least one parameter which value is specified as a variable (a named parameter).\r\n            This value has to be specified at the moment when the filter is applied.\r\n            If value of parameter is not set, it will be marked as skipped, see Description in example.\r\n            If value is null, a null value will be passed to parameter. \r\n            \r\n<br>\r\n            Example: ?FilterParams=Code='ABC'&FilterParams=Price=123.56&FilterParams=issueDate=2021-11-03T00:00:00&FilterParams=Description&FilterParams=Code=null\r\n            ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "TemplateFilterParams",
            "in": "query",
            "description": "<br>Optional. It has to be specified when a browse template filter definition (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id) contains variable arguments.\r\n<br>\r\n            Variable arguments of a filter which is part of a browse template filter definition (default one for a current user or specified in ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id).\r\n            They have to be specified when this filter contains at least one parameter which value is specified as a variable (a named parameter).\r\n            This value has to be specified at the moment when the filter is applied.\r\n            If value of parameter is not set, it will be marked as skipped, see Description in example.\r\n            If value is null, a null value will be passed to parameter. \r\n            \r\n<br>\r\n            Example: TemplateFilterParams=Code='ABC'&TemplateFilterParams=Price=123.56&TemplateFilterParams=issueDate=2021-11-03T00:00:00&TemplateFilterParams=Description&TemplateFilterParams=Code=null\r\n            ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "FolderId",
            "in": "query",
            "description": "Folder where records to get are stored.\r\nIf zero or null, default folder is used.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "description": "<br>\r\n            Filter expression to get data.\r\n            \r\n<br>\r\n            THIS PROPERTY'S NOT SUPPORTED YET! DON'T USE IT AT ALL! IT IS IGNORED!\r\n            INSTEAD, USE A PREDEFINED FILTER (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId) or filter which is a part of a browse template (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id).\r\n            ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "Sort order rules for returned data.\r\nRules have to match a column definition of template which is used to retrieve data.\r\nFormat is: \"[template column name] [sort direction]\", e.g.: ?orderBy=name desc,hireDate. Also \"asc\" can be used for more clarity.\r\nIf neither \"desc\" nor \"asc\" is used, \"asc\" is used by default.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TotalCount",
            "in": "query",
            "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.BrowseResponse should contain the total number of rows.\r\nDefault is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Count",
            "in": "query",
            "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.BrowseResponse should contain the number of rows on current page..\r\nDefault is true.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Number of rows which are skipped during retrieval of data.\r\nIf not specified, no rows are skipped. It means, the first row on the first page is displayed at the top of the page.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "Top",
            "in": "query",
            "description": "Page size.\r\nIf not specified, default user settings will be used.",
            "schema": {
              "maximum": 2147483647,
              "minimum": -1,
              "type": "integer",
              "format": "int32",
              "example": 100
            },
            "example": 100
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfLocationResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "Locations"
        ],
        "summary": "Gets collection of locations according to parameters.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "<br>\r\n            Gets or sets identifier of template or view which is used to browse data.\r\n            0 or unspecified value means a user default template or view.\r\n            \r\n<br>Use this parameter instead of former 'BrowseId.BrowseNumber' parameter.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Type",
            "in": "query",
            "description": "<br>\r\n            Type of a browse. Default is ASOL.Nephrite.WebAPI.Contracts.BrowseType.Template.\r\n            \r\n<br>\r\n            Use this parameter instead of former 'BrowseId.Type' parameter.\r\n            ",
            "schema": {
              "$ref": "#/components/schemas/BrowseType"
            }
          },
          {
            "name": "FilterId",
            "in": "query",
            "description": "Unique identifier of a predefined filter to get data.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FilterParams",
            "in": "query",
            "description": "<br>Optional. It has to be specified when a filter definition (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId) contains variable arguments.\r\n<br>\r\n            Variable arguments of a filter which is specified in ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId.\r\n            They have to be specified when this filter contains at least one parameter which value is specified as a variable (a named parameter).\r\n            This value has to be specified at the moment when the filter is applied.\r\n            If value of parameter is not set, it will be marked as skipped, see Description in example.\r\n            If value is null, a null value will be passed to parameter. \r\n            \r\n<br>\r\n            Example: ?FilterParams=Code='ABC'&FilterParams=Price=123.56&FilterParams=issueDate=2021-11-03T00:00:00&FilterParams=Description&FilterParams=Code=null\r\n            ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "TemplateFilterParams",
            "in": "query",
            "description": "<br>Optional. It has to be specified when a browse template filter definition (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id) contains variable arguments.\r\n<br>\r\n            Variable arguments of a filter which is part of a browse template filter definition (default one for a current user or specified in ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id).\r\n            They have to be specified when this filter contains at least one parameter which value is specified as a variable (a named parameter).\r\n            This value has to be specified at the moment when the filter is applied.\r\n            If value of parameter is not set, it will be marked as skipped, see Description in example.\r\n            If value is null, a null value will be passed to parameter. \r\n            \r\n<br>\r\n            Example: TemplateFilterParams=Code='ABC'&TemplateFilterParams=Price=123.56&TemplateFilterParams=issueDate=2021-11-03T00:00:00&TemplateFilterParams=Description&TemplateFilterParams=Code=null\r\n            ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "FolderId",
            "in": "query",
            "description": "Folder where records to get are stored.\r\nIf zero or null, default folder is used.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "description": "<br>\r\n            Filter expression to get data.\r\n            \r\n<br>\r\n            THIS PROPERTY'S NOT SUPPORTED YET! DON'T USE IT AT ALL! IT IS IGNORED!\r\n            INSTEAD, USE A PREDEFINED FILTER (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId) or filter which is a part of a browse template (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id).\r\n            ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "Sort order rules for returned data.\r\nRules have to match a column definition of template which is used to retrieve data.\r\nFormat is: \"[template column name] [sort direction]\", e.g.: ?orderBy=name desc,hireDate. Also \"asc\" can be used for more clarity.\r\nIf neither \"desc\" nor \"asc\" is used, \"asc\" is used by default.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TotalCount",
            "in": "query",
            "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.BrowseResponse should contain the total number of rows.\r\nDefault is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Count",
            "in": "query",
            "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.BrowseResponse should contain the number of rows on current page..\r\nDefault is true.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Number of rows which are skipped during retrieval of data.\r\nIf not specified, no rows are skipped. It means, the first row on the first page is displayed at the top of the page.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "Top",
            "in": "query",
            "description": "Page size.\r\nIf not specified, default user settings will be used.",
            "schema": {
              "maximum": 2147483647,
              "minimum": -1,
              "type": "integer",
              "format": "int32",
              "example": 100
            },
            "example": 100
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfLocationResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Locations"
        ],
        "summary": "Creates a new location.",
        "requestBody": {
          "description": "Data for a new location.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationCreate"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Custom/MIM/Locations/{id}": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Gets info about location of asset.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of location (PK).",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RetrievalRange.HeaderOnly",
            "in": "query",
            "description": "Gets or sets whether only header of record should be retrieved. \r\nUsable for entities with items only!\r\nDefault is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RetrievalRange.ExcludeStaticRelations",
            "in": "query",
            "description": "Gets or sets which static relations (foreign keys) will be excluded.\r\nDefault is ASOL.Nephrite.WebAPI.Contracts.QueryParameters.RecordPartScope.None.",
            "schema": {
              "$ref": "#/components/schemas/RecordPartScope"
            }
          },
          {
            "name": "RetrievalRange.ExcludeDynamicRelations",
            "in": "query",
            "description": "Gets or sets which dynamic relations will be excluded.\r\nDefault is ASOL.Nephrite.WebAPI.Contracts.QueryParameters.RecordPartScope.None.",
            "schema": {
              "$ref": "#/components/schemas/RecordPartScope"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "Locations"
        ],
        "summary": "Gets info about location of asset.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of location (PK).",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RetrievalRange.HeaderOnly",
            "in": "query",
            "description": "Gets or sets whether only header of record should be retrieved. \r\nUsable for entities with items only!\r\nDefault is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RetrievalRange.ExcludeStaticRelations",
            "in": "query",
            "description": "Gets or sets which static relations (foreign keys) will be excluded.\r\nDefault is ASOL.Nephrite.WebAPI.Contracts.QueryParameters.RecordPartScope.None.",
            "schema": {
              "$ref": "#/components/schemas/RecordPartScope"
            }
          },
          {
            "name": "RetrievalRange.ExcludeDynamicRelations",
            "in": "query",
            "description": "Gets or sets which dynamic relations will be excluded.\r\nDefault is ASOL.Nephrite.WebAPI.Contracts.QueryParameters.RecordPartScope.None.",
            "schema": {
              "$ref": "#/components/schemas/RecordPartScope"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Majetek": {
      "get": {
        "tags": [
          "Majetek"
        ],
        "summary": "Vyhledání majetku pomocí atributů třídy MajetekSearch ve FromQuery.",
        "parameters": [
          {
            "name": "mistnost.mistnostCislo",
            "in": "query",
            "description": "Číslo místnosti.",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "HK0001"
            },
            "example": "HK0001"
          },
          {
            "name": "mistnost.mistnostNazev",
            "in": "query",
            "description": "Název místnosti.",
            "schema": {
              "maxLength": 40,
              "type": "string",
              "example": "Klarinet"
            },
            "example": "Klarinet"
          },
          {
            "name": "mistnostId",
            "in": "query",
            "description": "Interní identifikátor místnosti.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 741254
            },
            "example": 741254
          },
          {
            "name": "zodpovednaOsoba.osobniCislo",
            "in": "query",
            "description": "Osobní číslo.",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "ZHK0001"
            },
            "example": "ZHK0001"
          },
          {
            "name": "zodpovednaOsoba.login",
            "in": "query",
            "description": "Login.",
            "schema": {
              "maxLength": 60,
              "type": "string",
              "example": "magdalena.nova"
            },
            "example": "magdalena.nova"
          },
          {
            "name": "zodpovednaOsoba.jmeno",
            "in": "query",
            "description": "Jméno.",
            "schema": {
              "maxLength": 40,
              "type": "string",
              "example": "Magdalena"
            },
            "example": "Magdalena"
          },
          {
            "name": "zodpovednaOsoba.prijmeni",
            "in": "query",
            "description": "Příjmení.",
            "schema": {
              "maxLength": 40,
              "type": "string",
              "example": "Nová"
            },
            "example": "Nová"
          },
          {
            "name": "zodpovednaOsobaId",
            "in": "query",
            "description": "Interní identifikátor zodpovědné osoby.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "typMajetku",
            "in": "query",
            "description": "Typ majetku: 10 - Dlouhodobý majetek(DLM), 20 - Komponenta souboru movitých věcí, 30 - Drobný majetek (DRM).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            },
            "example": 10
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfMajetekDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Majetek/{type}/{recordNumber}": {
      "get": {
        "tags": [
          "Majetek"
        ],
        "summary": "Vyhledání majetku pomocí typu majetku a ID v routě.",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Typ majetku: 10 - Dlouhodobý majetek(DLM), 20 - Komponenta souboru movitých věcí, 30 - Drobný majetek (DRM).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "recordNumber",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfMajetekDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "Majetek"
        ],
        "summary": "Vyhledání majetku pomocí typu majetku a ID v routě.",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Typ majetku: 10 - Dlouhodobý majetek(DLM), 20 - Komponenta souboru movitých věcí, 30 - Drobný majetek (DRM).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "recordNumber",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfMajetekDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Mistnost": {
      "get": {
        "tags": [
          "Mistnost"
        ],
        "summary": "Vyhledání místností pomocí atributů třídy MistnostSearch ve FromQuery.",
        "parameters": [
          {
            "name": "mistnostCislo",
            "in": "query",
            "description": "Číslo místnosti.",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "HK0001"
            },
            "example": "HK0001"
          },
          {
            "name": "mistnostNazev",
            "in": "query",
            "description": "Název místnosti.",
            "schema": {
              "maxLength": 40,
              "type": "string",
              "example": "Klarinet"
            },
            "example": "Klarinet"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfMistnostDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Mistnost/{recordNumber}": {
      "get": {
        "tags": [
          "Mistnost"
        ],
        "summary": "Vyhledání místnosti pomocí ID v routě.",
        "parameters": [
          {
            "name": "recordNumber",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfMistnostDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "Mistnost"
        ],
        "summary": "Vyhledání místnosti pomocí ID v routě.",
        "parameters": [
          {
            "name": "recordNumber",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfMistnostDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Organizace": {
      "get": {
        "tags": [
          "Organizace"
        ],
        "summary": "Vyhledání organizací",
        "parameters": [
          {
            "name": "DatumNarozeni",
            "in": "query",
            "description": "Datum narození",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "2001-01-29"
            },
            "example": "2001-01-29"
          },
          {
            "name": "Dic",
            "in": "query",
            "description": "DIČ",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "CZ11111111111"
            },
            "example": "CZ11111111111"
          },
          {
            "name": "Ico",
            "in": "query",
            "description": "IČO",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "22222222222"
            },
            "example": "22222222222"
          },
          {
            "name": "Jmeno",
            "in": "query",
            "description": "Jméno",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Josef"
            },
            "example": "Josef"
          },
          {
            "name": "NazevDoplnujici",
            "in": "query",
            "description": "Doplňující název",
            "schema": {
              "maxLength": 80,
              "type": "string",
              "example": "NAZEV_DOPLN"
            },
            "example": "NAZEV_DOPLN"
          },
          {
            "name": "NazevOrganizace",
            "in": "query",
            "description": "Název organizace",
            "schema": {
              "maxLength": 100,
              "type": "string",
              "example": "ALLSOFT s.r.o"
            },
            "example": "ALLSOFT s.r.o"
          },
          {
            "name": "OrganizaceIdEx",
            "in": "query",
            "description": "Externí identifikátor organizace",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "OIX_0001"
            },
            "example": "OIX_0001"
          },
          {
            "name": "PravniForma",
            "in": "query",
            "description": "Právní forma",
            "schema": {
              "maxLength": 6,
              "type": "string",
              "example": "SO"
            },
            "example": "SO"
          },
          {
            "name": "Prijmeni",
            "in": "query",
            "description": "Příjmení",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Červený"
            },
            "example": "Červený"
          },
          {
            "name": "RodneCislo",
            "in": "query",
            "description": "Rodné číslo",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "1234567777"
            },
            "example": "1234567777"
          },
          {
            "name": "CisloDokladu",
            "in": "query",
            "description": "Číslo dokladu (max. 30 znaků)",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "112233445566"
            },
            "example": "112233445566"
          },
          {
            "name": "TypDokladu",
            "in": "query",
            "description": "Typ dokladu - občanský průkaz (O) nebo cestovní pas (C)",
            "schema": {
              "maxLength": 1,
              "type": "string",
              "example": "C"
            },
            "example": "C"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizaceCreate"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "Organizace"
        ],
        "summary": "Vyhledání organizací",
        "parameters": [
          {
            "name": "DatumNarozeni",
            "in": "query",
            "description": "Datum narození",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "2001-01-29"
            },
            "example": "2001-01-29"
          },
          {
            "name": "Dic",
            "in": "query",
            "description": "DIČ",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "CZ11111111111"
            },
            "example": "CZ11111111111"
          },
          {
            "name": "Ico",
            "in": "query",
            "description": "IČO",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "22222222222"
            },
            "example": "22222222222"
          },
          {
            "name": "Jmeno",
            "in": "query",
            "description": "Jméno",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Josef"
            },
            "example": "Josef"
          },
          {
            "name": "NazevDoplnujici",
            "in": "query",
            "description": "Doplňující název",
            "schema": {
              "maxLength": 80,
              "type": "string",
              "example": "NAZEV_DOPLN"
            },
            "example": "NAZEV_DOPLN"
          },
          {
            "name": "NazevOrganizace",
            "in": "query",
            "description": "Název organizace",
            "schema": {
              "maxLength": 100,
              "type": "string",
              "example": "ALLSOFT s.r.o"
            },
            "example": "ALLSOFT s.r.o"
          },
          {
            "name": "OrganizaceIdEx",
            "in": "query",
            "description": "Externí identifikátor organizace",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "OIX_0001"
            },
            "example": "OIX_0001"
          },
          {
            "name": "PravniForma",
            "in": "query",
            "description": "Právní forma",
            "schema": {
              "maxLength": 6,
              "type": "string",
              "example": "SO"
            },
            "example": "SO"
          },
          {
            "name": "Prijmeni",
            "in": "query",
            "description": "Příjmení",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Červený"
            },
            "example": "Červený"
          },
          {
            "name": "RodneCislo",
            "in": "query",
            "description": "Rodné číslo",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "1234567777"
            },
            "example": "1234567777"
          },
          {
            "name": "CisloDokladu",
            "in": "query",
            "description": "Číslo dokladu (max. 30 znaků)",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "112233445566"
            },
            "example": "112233445566"
          },
          {
            "name": "TypDokladu",
            "in": "query",
            "description": "Typ dokladu - občanský průkaz (O) nebo cestovní pas (C)",
            "schema": {
              "maxLength": 1,
              "type": "string",
              "example": "C"
            },
            "example": "C"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizaceCreate"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Organizace"
        ],
        "summary": "Založení nové organizace",
        "requestBody": {
          "description": "Data nove organizace nebo osoby",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizaceCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizaceCreate"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Organizace/{recordNumber}": {
      "put": {
        "tags": [
          "Organizace"
        ],
        "summary": "Změna údajů existující organizace (nelze měnit údaje adres organizace)",
        "description": "Změna údajů existující organizace (nelze měnit údaje adres organizace)",
        "parameters": [
          {
            "name": "recordNumber",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizaceUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizaceDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Organizace/{id}": {
      "delete": {
        "tags": [
          "Organizace"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Custom/MIM/Persons/ContactPersons": {
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "Gets collection of contact persons according to parameters.",
        "parameters": [
          {
            "name": "Top",
            "in": "query",
            "description": "<br>\r\n            Page size. If not specified, default 5000 is used.\r\n            \r\n<br>\r\n            This property is used for every folder individually.\r\n            ",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "<br>\r\n            Number of rows which are skipped during retrieval of data. If not specified,\r\n            no rows are skipped. It means, the first row on the first page is displayed at\r\n            the top of the page.\r\n            \r\n<br>\r\n            This property is used for every folder individually.\r\n            ",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FolderId",
            "in": "query",
            "description": "Folder where records to get are stored. If null, data from all folders are retrieved.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Id",
            "in": "query",
            "description": "<br>\r\n            Gets or sets identifier of template or view which is used to browse data.\r\n            0 or unspecified value means a user default template or view.\r\n            \r\n<br>Use this parameter instead of former 'BrowseId.BrowseNumber' parameter.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Type",
            "in": "query",
            "description": "<br>\r\n            Type of a browse. Default is ASOL.Nephrite.WebAPI.Contracts.BrowseType.Template.\r\n            \r\n<br>\r\n            Use this parameter instead of former 'BrowseId.Type' parameter.\r\n            ",
            "schema": {
              "$ref": "#/components/schemas/BrowseType"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "description": "<br>\r\n            Filter expression to get data.\r\n            \r\n<br>\r\n            THIS PROPERTY'S NOT SUPPORTED YET! DON'T USE IT AT ALL! IT IS IGNORED!\r\n            INSTEAD, USE A PREDEFINED FILTER (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId) or filter which is a part of a browse template (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id).\r\n            ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "FilterId",
            "in": "query",
            "description": "Unique identifier of a predefined filter to get data.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FilterParams",
            "in": "query",
            "description": "<br>Optional. It has to be specified when a filter definition (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId) contains variable arguments.\r\n<br>\r\n            Variable arguments of a filter which is specified in ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId.\r\n            They have to be specified when this filter contains at least one parameter which value is specified as a variable (a named parameter).\r\n            This value has to be specified at the moment when the filter is applied.\r\n            If value of parameter is not set, it will be marked as skipped, see Description in example.\r\n            If value is null, a null value will be passed to parameter. \r\n            \r\n<br>\r\n            Example: ?FilterParams=Code='ABC'&FilterParams=Price=123.56&FilterParams=issueDate=2021-11-03T00:00:00&FilterParams=Description&FilterParams=Code=null\r\n            ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "TemplateFilterParams",
            "in": "query",
            "description": "<br>Optional. It has to be specified when a browse template filter definition (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id) contains variable arguments.\r\n<br>\r\n            Variable arguments of a filter which is part of a browse template filter definition (default one for a current user or specified in ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id).\r\n            They have to be specified when this filter contains at least one parameter which value is specified as a variable (a named parameter).\r\n            This value has to be specified at the moment when the filter is applied.\r\n            If value of parameter is not set, it will be marked as skipped, see Description in example.\r\n            If value is null, a null value will be passed to parameter. \r\n            \r\n<br>\r\n            Example: TemplateFilterParams=Code='ABC'&TemplateFilterParams=Price=123.56&TemplateFilterParams=issueDate=2021-11-03T00:00:00&TemplateFilterParams=Description&TemplateFilterParams=Code=null\r\n            ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "Sort order rules for returned data.\r\nRules have to match a column definition of template which is used to retrieve data.\r\nFormat is: \"[template column name] [sort direction]\", e.g.: ?orderBy=name desc,hireDate. Also \"asc\" can be used for more clarity.\r\nIf neither \"desc\" nor \"asc\" is used, \"asc\" is used by default.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TotalCount",
            "in": "query",
            "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.BrowseResponse should contain the total number of rows.\r\nDefault is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Count",
            "in": "query",
            "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.BrowseResponse should contain the number of rows on current page..\r\nDefault is true.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Details",
            "in": "query",
            "description": "If true, detail of individual records will be retrieved. It means system info about record.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "State.Active",
            "in": "query",
            "description": "<br>State of person - Active.\r\n<br>\r\n            If you want to get active persons only, you have to set this parameter to true. If you want persons who are not active,\r\n            you have to set this parameter to false. If you don't care about this state, don't set this parameter at all.\r\n            \r\n<br>\r\n            This parameter is not used by default.\r\n            You have to specify it explicitly to be taken into account.\r\n            \r\n<br>\r\n            In general, it will be returned such persons, which state corresponds with states marked as true and which state is not equal to states which are marked as false.\r\n            Query condition is built with or operator for states which are set to true and with and operator for states which are set to false.\r\n            States which remain null (unspecified) are ignored.\r\n            E.g. if ASOL.WebAPI.App.MIM.Contracts.PersonStateQueryParameters.Active is true, ASOL.WebAPI.App.MIM.Contracts.PersonStateQueryParameters.Approved is true and ASOL.WebAPI.App.MIM.Contracts.PersonStateQueryParameters.DontUse is false,\r\n            condition is built as: (ASOL.WebAPI.App.MIM.Contracts.PersonStateQueryParameters.Active is true or ASOL.WebAPI.App.MIM.Contracts.PersonStateQueryParameters.Approved is true) and ASOL.WebAPI.App.MIM.Contracts.PersonStateQueryParameters.DontUse is false.\r\n            This is transformed to the sql condition:  (stav = '2' or stav = '5') and stav <> '3'.\r\n            ",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "State.Approved",
            "in": "query",
            "description": "<br>State of person - Approved.\r\n<br>\r\n            If you want to get approved persons only, you have to set this parameter to true. If you want persons who are not approved,\r\n            you have to set this parameter to false. If you don't care about this state, don't set this parameter at all.\r\n            \r\n<br>\r\n            This parameter is not used by default.\r\n            You have to specify it explicitly to be taken into account.\r\n            ",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "State.DontUse",
            "in": "query",
            "description": "<br>State of person - Do not use them.\r\n<br>\r\n            If you want to get persons which are marked as \"Don't use them\" only, you have to set this parameter to true. If you want persons who should be used,\r\n            you have to set this parameter to false. If you don't care about this state, don't set this parameter at all.\r\n            \r\n<br>\r\n            This parameter is not used by default.\r\n            You have to specify it explicitly to be taken into account.\r\n            ",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "State.Passive",
            "in": "query",
            "description": "<br>State of person - Passive.\r\n<br>\r\n            If you want to get passive persons only, you have to set this parameter to true. If you want persons who are not passive,\r\n            you have to set this parameter to false. If you don't care about this state, don't set this parameter at all.\r\n            \r\n<br>\r\n            This parameter is not used by default.\r\n            You have to specify it explicitly to be taken into account.\r\n            ",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "State.NonApproved",
            "in": "query",
            "description": "<br>State of person - Non-approved.\r\n<br>\r\n            If you want to get non-approved persons only, you have to set this parameter to true. If you want persons who are not non-approved,\r\n            you have to set this parameter to false. If you don't care about this state, don't set this parameter at all.\r\n            \r\n<br>\r\n            This parameter is not used by default.\r\n            You have to specify it explicitly to be taken into account.\r\n            ",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RetrievalRange.HeaderOnly",
            "in": "query",
            "description": "Gets or sets whether only header of record should be retrieved. \r\nUsable for entities with items only!\r\nDefault is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RetrievalRange.ExcludeStaticRelations",
            "in": "query",
            "description": "Gets or sets which static relations (foreign keys) will be excluded.\r\nDefault is ASOL.Nephrite.WebAPI.Contracts.QueryParameters.RecordPartScope.None.",
            "schema": {
              "$ref": "#/components/schemas/RecordPartScope"
            }
          },
          {
            "name": "RetrievalRange.ExcludeDynamicRelations",
            "in": "query",
            "description": "Gets or sets which dynamic relations will be excluded.\r\nDefault is ASOL.Nephrite.WebAPI.Contracts.QueryParameters.RecordPartScope.None.",
            "schema": {
              "$ref": "#/components/schemas/RecordPartScope"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfContactPersonResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Custom/MIM/Persons/Employees": {
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "Gets collection of employees according to parameters.",
        "parameters": [
          {
            "name": "Top",
            "in": "query",
            "description": "<br>\r\n            Page size. If not specified, default 5000 is used.\r\n            \r\n<br>\r\n            This property is used for every folder individually.\r\n            ",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "<br>\r\n            Number of rows which are skipped during retrieval of data. If not specified,\r\n            no rows are skipped. It means, the first row on the first page is displayed at\r\n            the top of the page.\r\n            \r\n<br>\r\n            This property is used for every folder individually.\r\n            ",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FolderId",
            "in": "query",
            "description": "Folder where records to get are stored. If null, data from all folders are retrieved.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Id",
            "in": "query",
            "description": "<br>\r\n            Gets or sets identifier of template or view which is used to browse data.\r\n            0 or unspecified value means a user default template or view.\r\n            \r\n<br>Use this parameter instead of former 'BrowseId.BrowseNumber' parameter.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Type",
            "in": "query",
            "description": "<br>\r\n            Type of a browse. Default is ASOL.Nephrite.WebAPI.Contracts.BrowseType.Template.\r\n            \r\n<br>\r\n            Use this parameter instead of former 'BrowseId.Type' parameter.\r\n            ",
            "schema": {
              "$ref": "#/components/schemas/BrowseType"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "description": "<br>\r\n            Filter expression to get data.\r\n            \r\n<br>\r\n            THIS PROPERTY'S NOT SUPPORTED YET! DON'T USE IT AT ALL! IT IS IGNORED!\r\n            INSTEAD, USE A PREDEFINED FILTER (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId) or filter which is a part of a browse template (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id).\r\n            ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "FilterId",
            "in": "query",
            "description": "Unique identifier of a predefined filter to get data.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FilterParams",
            "in": "query",
            "description": "<br>Optional. It has to be specified when a filter definition (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId) contains variable arguments.\r\n<br>\r\n            Variable arguments of a filter which is specified in ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId.\r\n            They have to be specified when this filter contains at least one parameter which value is specified as a variable (a named parameter).\r\n            This value has to be specified at the moment when the filter is applied.\r\n            If value of parameter is not set, it will be marked as skipped, see Description in example.\r\n            If value is null, a null value will be passed to parameter. \r\n            \r\n<br>\r\n            Example: ?FilterParams=Code='ABC'&FilterParams=Price=123.56&FilterParams=issueDate=2021-11-03T00:00:00&FilterParams=Description&FilterParams=Code=null\r\n            ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "TemplateFilterParams",
            "in": "query",
            "description": "<br>Optional. It has to be specified when a browse template filter definition (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id) contains variable arguments.\r\n<br>\r\n            Variable arguments of a filter which is part of a browse template filter definition (default one for a current user or specified in ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id).\r\n            They have to be specified when this filter contains at least one parameter which value is specified as a variable (a named parameter).\r\n            This value has to be specified at the moment when the filter is applied.\r\n            If value of parameter is not set, it will be marked as skipped, see Description in example.\r\n            If value is null, a null value will be passed to parameter. \r\n            \r\n<br>\r\n            Example: TemplateFilterParams=Code='ABC'&TemplateFilterParams=Price=123.56&TemplateFilterParams=issueDate=2021-11-03T00:00:00&TemplateFilterParams=Description&TemplateFilterParams=Code=null\r\n            ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "Sort order rules for returned data.\r\nRules have to match a column definition of template which is used to retrieve data.\r\nFormat is: \"[template column name] [sort direction]\", e.g.: ?orderBy=name desc,hireDate. Also \"asc\" can be used for more clarity.\r\nIf neither \"desc\" nor \"asc\" is used, \"asc\" is used by default.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TotalCount",
            "in": "query",
            "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.BrowseResponse should contain the total number of rows.\r\nDefault is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Count",
            "in": "query",
            "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.BrowseResponse should contain the number of rows on current page..\r\nDefault is true.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Details",
            "in": "query",
            "description": "If true, detail of individual records will be retrieved. It means system info about record.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "State.Active",
            "in": "query",
            "description": "<br>State of person - Active.\r\n<br>\r\n            If you want to get active persons only, you have to set this parameter to true. If you want persons who are not active,\r\n            you have to set this parameter to false. If you don't care about this state, don't set this parameter at all.\r\n            \r\n<br>\r\n            This parameter is not used by default.\r\n            You have to specify it explicitly to be taken into account.\r\n            \r\n<br>\r\n            In general, it will be returned such persons, which state corresponds with states marked as true and which state is not equal to states which are marked as false.\r\n            Query condition is built with or operator for states which are set to true and with and operator for states which are set to false.\r\n            States which remain null (unspecified) are ignored.\r\n            E.g. if ASOL.WebAPI.App.MIM.Contracts.PersonStateQueryParameters.Active is true, ASOL.WebAPI.App.MIM.Contracts.PersonStateQueryParameters.Approved is true and ASOL.WebAPI.App.MIM.Contracts.PersonStateQueryParameters.DontUse is false,\r\n            condition is built as: (ASOL.WebAPI.App.MIM.Contracts.PersonStateQueryParameters.Active is true or ASOL.WebAPI.App.MIM.Contracts.PersonStateQueryParameters.Approved is true) and ASOL.WebAPI.App.MIM.Contracts.PersonStateQueryParameters.DontUse is false.\r\n            This is transformed to the sql condition:  (stav = '2' or stav = '5') and stav <> '3'.\r\n            ",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "State.Approved",
            "in": "query",
            "description": "<br>State of person - Approved.\r\n<br>\r\n            If you want to get approved persons only, you have to set this parameter to true. If you want persons who are not approved,\r\n            you have to set this parameter to false. If you don't care about this state, don't set this parameter at all.\r\n            \r\n<br>\r\n            This parameter is not used by default.\r\n            You have to specify it explicitly to be taken into account.\r\n            ",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "State.DontUse",
            "in": "query",
            "description": "<br>State of person - Do not use them.\r\n<br>\r\n            If you want to get persons which are marked as \"Don't use them\" only, you have to set this parameter to true. If you want persons who should be used,\r\n            you have to set this parameter to false. If you don't care about this state, don't set this parameter at all.\r\n            \r\n<br>\r\n            This parameter is not used by default.\r\n            You have to specify it explicitly to be taken into account.\r\n            ",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "State.Passive",
            "in": "query",
            "description": "<br>State of person - Passive.\r\n<br>\r\n            If you want to get passive persons only, you have to set this parameter to true. If you want persons who are not passive,\r\n            you have to set this parameter to false. If you don't care about this state, don't set this parameter at all.\r\n            \r\n<br>\r\n            This parameter is not used by default.\r\n            You have to specify it explicitly to be taken into account.\r\n            ",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "State.NonApproved",
            "in": "query",
            "description": "<br>State of person - Non-approved.\r\n<br>\r\n            If you want to get non-approved persons only, you have to set this parameter to true. If you want persons who are not non-approved,\r\n            you have to set this parameter to false. If you don't care about this state, don't set this parameter at all.\r\n            \r\n<br>\r\n            This parameter is not used by default.\r\n            You have to specify it explicitly to be taken into account.\r\n            ",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RetrievalRange.HeaderOnly",
            "in": "query",
            "description": "Gets or sets whether only header of record should be retrieved. \r\nUsable for entities with items only!\r\nDefault is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RetrievalRange.ExcludeStaticRelations",
            "in": "query",
            "description": "Gets or sets which static relations (foreign keys) will be excluded.\r\nDefault is ASOL.Nephrite.WebAPI.Contracts.QueryParameters.RecordPartScope.None.",
            "schema": {
              "$ref": "#/components/schemas/RecordPartScope"
            }
          },
          {
            "name": "RetrievalRange.ExcludeDynamicRelations",
            "in": "query",
            "description": "Gets or sets which dynamic relations will be excluded.\r\nDefault is ASOL.Nephrite.WebAPI.Contracts.QueryParameters.RecordPartScope.None.",
            "schema": {
              "$ref": "#/components/schemas/RecordPartScope"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfEmployeeResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Platce": {
      "post": {
        "tags": [
          "Platce"
        ],
        "summary": "Založení nového Plátce",
        "requestBody": {
          "description": "Data nového Plátce",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatceCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatceCreate"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "Platce"
        ],
        "summary": "Vyhledání Plátce",
        "parameters": [
          {
            "name": "KodKnihy",
            "in": "query",
            "description": "Kód knihy poplatku",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 777
            },
            "example": 777
          },
          {
            "name": "PlatceId",
            "in": "query",
            "description": "Interní identifikátor Plátce (parametr má přednost před ostatními parametry)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 781254
            },
            "example": 781254
          },
          {
            "name": "PlatceIdEx",
            "in": "query",
            "description": "Externí identifikátor Plátce (parametr má přednost před ostatními parametry)",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "PIX_0001"
            },
            "example": "PIX_0001"
          },
          {
            "name": "VariabilniSymbol",
            "in": "query",
            "description": "Variabilní symbol",
            "schema": {
              "maxLength": 10,
              "type": "string",
              "example": "7770000001"
            },
            "example": "7770000001"
          },
          {
            "name": "RodneCislo",
            "in": "query",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "1234567777"
            },
            "example": "1234567777"
          },
          {
            "name": "CisloDokladu",
            "in": "query",
            "description": "Číslo dokladu (max. 30 znaků)",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "112233445566"
            },
            "example": "112233445566"
          },
          {
            "name": "TypDokladu",
            "in": "query",
            "description": "Typ dokladu - občanský průkaz (O) nebo cestovní pas (C)",
            "schema": {
              "maxLength": 1,
              "type": "string",
              "example": "C"
            },
            "example": "C"
          },
          {
            "name": "DatumNarozeni",
            "in": "query",
            "description": "Datum narození (formát rrrr-mm-dd)",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "format": "date",
              "example": "2001-01-29"
            },
            "example": "2001-01-29"
          },
          {
            "name": "Dic",
            "in": "query",
            "description": "DIČ",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "CZ11111111111"
            },
            "example": "CZ11111111111"
          },
          {
            "name": "Ico",
            "in": "query",
            "description": "IČ",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "22222222222"
            },
            "example": "22222222222"
          },
          {
            "name": "Jmeno",
            "in": "query",
            "description": "Jméno",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Josef"
            },
            "example": "Josef"
          },
          {
            "name": "Prijmeni",
            "in": "query",
            "description": "Příjmení",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Novák"
            },
            "example": "Novák"
          },
          {
            "name": "NazevDoplnujici",
            "in": "query",
            "description": "Název doplňující",
            "schema": {
              "maxLength": 80,
              "type": "string",
              "example": ""
            },
            "example": ""
          },
          {
            "name": "NazevOrganizace",
            "in": "query",
            "description": "Název organizace",
            "schema": {
              "maxLength": 100,
              "type": "string",
              "example": ""
            },
            "example": ""
          },
          {
            "name": "OrganizaceIdEx",
            "in": "query",
            "description": "Externí identifikátor organizace",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": ""
            },
            "example": ""
          },
          {
            "name": "Adresa.Ulice",
            "in": "query",
            "description": "Nazev ulice",
            "schema": {
              "maxLength": 200,
              "type": "string",
              "example": "Nefritová"
            },
            "example": "Nefritová"
          },
          {
            "name": "Adresa.Obec",
            "in": "query",
            "description": "Název obce",
            "schema": {
              "maxLength": 200,
              "type": "string",
              "example": "Plzeň"
            },
            "example": "Plzeň"
          },
          {
            "name": "Adresa.Psc",
            "in": "query",
            "description": "PSČ",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "32300"
            },
            "example": "32300"
          },
          {
            "name": "Adresa.CastObce",
            "in": "query",
            "description": "Část obce",
            "schema": {
              "maxLength": 200,
              "type": "string",
              "example": "Bolevec"
            },
            "example": "Bolevec"
          },
          {
            "name": "Adresa.CisloCp",
            "in": "query",
            "description": "Číslo popisné (domovní)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 263
            },
            "example": 263
          },
          {
            "name": "Adresa.CisloCo",
            "in": "query",
            "description": "Cislo orientacni",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 15
            },
            "example": 15
          },
          {
            "name": "Adresa.PismenoCo",
            "in": "query",
            "description": "Pismeno cisla orientacniho",
            "schema": {
              "maxLength": 2,
              "type": "string",
              "example": "a"
            },
            "example": "a"
          },
          {
            "name": "Adresa.IdCentralniReg",
            "in": "query",
            "description": "Identifikátor adresního místa (centr. registr)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 156358
            },
            "example": 156358
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfPlatceDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfPlatceDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfPlatceDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Platce/{recordNumber}": {
      "get": {
        "tags": [
          "Platce"
        ],
        "summary": "Vyhledání Plátce podle ID",
        "parameters": [
          {
            "name": "recordNumber",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfPlatceDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "Platce"
        ],
        "summary": "Vyhledání Plátce podle ID",
        "parameters": [
          {
            "name": "recordNumber",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfPlatceDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Platce/Pes": {
      "get": {
        "tags": [
          "Platce"
        ],
        "summary": "Vyhledání Plátce podle identifikačních údajů psa",
        "parameters": [
          {
            "name": "znamka",
            "in": "query",
            "description": "Číslo známky.",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "501"
            },
            "example": "501"
          },
          {
            "name": "cip",
            "in": "query",
            "description": "Evidenční čislo čipu.",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "622F24"
            },
            "example": "622F24"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfPlatceDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Platce/{externiIdentifikator}": {
      "put": {
        "tags": [
          "Platce"
        ],
        "summary": "Změna údajů existujícího Plátce (podle externího identifikátoru)",
        "description": "Změna údajů existující organizace (nelze měnit údaje adres organizace)",
        "parameters": [
          {
            "name": "externiIdentifikator",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatceUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatceDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Platce/{interniIdentifikator}": {
      "put": {
        "tags": [
          "Platce"
        ],
        "summary": "Změna údajů záznamu Plátce (podle interního identifikátoru)",
        "description": "Změna údajů záznamu Plátce (lze měnit také údaje adres organizace Plátce)",
        "parameters": [
          {
            "name": "interniIdentifikator",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatceUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatceDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Platce/Invalidate/{interniIdentifikator}": {
      "put": {
        "tags": [
          "Platce"
        ],
        "summary": "Zneplatnění existujícího Plátce",
        "description": "Zneplatnění existujícího Plátce (zadán Interní identifikátor)",
        "parameters": [
          {
            "name": "interniIdentifikator",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatceInvalidate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatceDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Platce/Invalidate/{externiIdentifikator}": {
      "put": {
        "tags": [
          "Platce"
        ],
        "summary": "Zneplatnění existujícího Plátce",
        "description": "Zneplatnění existujícího Plátce (zadán Externí identifikátor)",
        "parameters": [
          {
            "name": "externiIdentifikator",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatceInvalidate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatceDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/PokladniDoklad": {
      "get": {
        "tags": [
          "PokladniDoklad"
        ],
        "summary": "Vyhledání pokladních dokladů pomocí atributů třídy PokladniDokladSearch ve FromQuery.",
        "parameters": [
          {
            "name": "pokladniDokladId",
            "in": "query",
            "description": "Interní identifikátor pokladního dokladu",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 781254
            },
            "example": 781254
          },
          {
            "name": "pokladniDokladIdEx",
            "in": "query",
            "description": "Externí identifikátor pokladního dokladu",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "PDE_0001"
            },
            "example": "PDE_0001"
          },
          {
            "name": "organizace.DatumNarozeni",
            "in": "query",
            "description": "Datum narození",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "2001-01-29"
            },
            "example": "2001-01-29"
          },
          {
            "name": "organizace.Dic",
            "in": "query",
            "description": "DIČ",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "CZ11111111111"
            },
            "example": "CZ11111111111"
          },
          {
            "name": "organizace.Ico",
            "in": "query",
            "description": "IČO",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "22222222222"
            },
            "example": "22222222222"
          },
          {
            "name": "organizace.Jmeno",
            "in": "query",
            "description": "Jméno",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Josef"
            },
            "example": "Josef"
          },
          {
            "name": "organizace.NazevDoplnujici",
            "in": "query",
            "description": "Doplňující název",
            "schema": {
              "maxLength": 80,
              "type": "string",
              "example": "NAZEV_DOPLN"
            },
            "example": "NAZEV_DOPLN"
          },
          {
            "name": "organizace.NazevOrganizace",
            "in": "query",
            "description": "Název organizace",
            "schema": {
              "maxLength": 100,
              "type": "string",
              "example": "ALLSOFT s.r.o"
            },
            "example": "ALLSOFT s.r.o"
          },
          {
            "name": "organizace.OrganizaceIdEx",
            "in": "query",
            "description": "Externí identifikátor organizace",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "OIX_0001"
            },
            "example": "OIX_0001"
          },
          {
            "name": "organizace.PravniForma",
            "in": "query",
            "description": "Právní forma",
            "schema": {
              "maxLength": 6,
              "type": "string",
              "example": "SO"
            },
            "example": "SO"
          },
          {
            "name": "organizace.Prijmeni",
            "in": "query",
            "description": "Příjmení",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Červený"
            },
            "example": "Červený"
          },
          {
            "name": "organizace.RodneCislo",
            "in": "query",
            "description": "Rodné číslo",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "1234567777"
            },
            "example": "1234567777"
          },
          {
            "name": "organizace.CisloDokladu",
            "in": "query",
            "description": "Číslo dokladu (max. 30 znaků)",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "112233445566"
            },
            "example": "112233445566"
          },
          {
            "name": "organizace.TypDokladu",
            "in": "query",
            "description": "Typ dokladu - občanský průkaz (O) nebo cestovní pas (C)",
            "schema": {
              "maxLength": 1,
              "type": "string",
              "example": "C"
            },
            "example": "C"
          },
          {
            "name": "poradacId",
            "in": "query",
            "description": "Číslo pořadače pro třídu Pokladna",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 126
            },
            "example": 126
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfPokladniDokladDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "PokladniDoklad"
        ],
        "summary": "Založení nového pokladního dokladu podle obsahu instance PokladniDokladCreate v Body.",
        "requestBody": {
          "description": "Data nového pokladního dokladu.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PokladniDokladCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PokladniDokladDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/PokladniDoklad/{recordNumber}": {
      "get": {
        "tags": [
          "PokladniDoklad"
        ],
        "summary": "Vyhledání pokladního dokladu pomocí ID v routě.",
        "parameters": [
          {
            "name": "recordNumber",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfPokladniDokladDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "PokladniDoklad"
        ],
        "summary": "Vyhledání pokladního dokladu pomocí ID v routě.",
        "parameters": [
          {
            "name": "recordNumber",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfPokladniDokladDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/PravniForma": {
      "get": {
        "tags": [
          "PravniForma"
        ],
        "summary": "Seznam třídy Právní forma (číselník)",
        "description": "PravniFormaSeznamAsync",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfPravniForma"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "PravniForma"
        ],
        "summary": "Seznam třídy Právní forma (číselník)",
        "description": "PravniFormaSeznamAsync",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfPravniForma"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Predpis": {
      "post": {
        "tags": [
          "Predpis"
        ],
        "summary": "Založení nového Předpisu",
        "requestBody": {
          "description": "Data Předpisu",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PredpisCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PredpisDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "Predpis"
        ],
        "summary": "Vyhledání Předpisů pomocí atributů třídy PredpisSearch v FromQuery",
        "parameters": [
          {
            "name": "kodKnihy",
            "in": "query",
            "description": "Kód knihy poplatku",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 777
            },
            "example": 777
          },
          {
            "name": "predpisId",
            "in": "query",
            "description": "Interní identifikátor Předpisu",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "predpisIdEx",
            "in": "query",
            "description": "Externí identifikátor Předpisu",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "FVX_0001"
            },
            "example": "FVX_0001"
          },
          {
            "name": "platceId",
            "in": "query",
            "description": "Interní identifikátor Plátce",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 781254
            },
            "example": 781254
          },
          {
            "name": "platceIdEx",
            "in": "query",
            "description": "Externí identifikátor Plátce",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "PIX_0001"
            },
            "example": "PIX_0001"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfPredpisDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfPredpisDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfPredpisDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Predpis/Invalidate/{interniIdentifikator}": {
      "put": {
        "tags": [
          "Predpis"
        ],
        "summary": "Stornování Předpisu",
        "description": "Stornování Předpisu (zadán Interní identifikátor)",
        "parameters": [
          {
            "name": "interniIdentifikator",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PredpisDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Predpis/Invalidate/{externiIdentifikator}": {
      "put": {
        "tags": [
          "Predpis"
        ],
        "summary": "Stornování Předpisu",
        "description": "Stornování Předpisu (zadán Externí identifikátor)",
        "parameters": [
          {
            "name": "externiIdentifikator",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PredpisDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Predpis/{interniIdentifikator}": {
      "put": {
        "tags": [
          "Predpis"
        ],
        "summary": "Změna údajů záznamu Předpis (podle interního identifikátoru)",
        "description": "Změna údajů záznamu Předpis. Vyhledání předpidu podle interního identifikátoru.",
        "parameters": [
          {
            "name": "interniIdentifikator",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PredpisUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PredpisDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Predpis/{externiIdentifikator}": {
      "put": {
        "tags": [
          "Predpis"
        ],
        "summary": "Změna údajů záznamu Předpis (podle externího identifikátoru)",
        "description": "Změna údajů záznamu Předpis. Vyhledání předpidu podle externího identifikátoru.",
        "parameters": [
          {
            "name": "externiIdentifikator",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PredpisUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PredpisDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Preplatek": {
      "post": {
        "tags": [
          "Preplatek"
        ],
        "summary": "Založení nového Přeplatku",
        "requestBody": {
          "description": "Data Přeplatku",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PreplatekCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreplatekDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "Preplatek"
        ],
        "summary": "Vyhledání Přeplatků pomocí atributů třídy PreplatekSearch v FromQuery",
        "parameters": [
          {
            "name": "kodKnihy",
            "in": "query",
            "description": "Kód knihy poplatku",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 777
            },
            "example": 777
          },
          {
            "name": "preplatekId",
            "in": "query",
            "description": "Interní identifikátor Přeplatku",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "preplatekIdEx",
            "in": "query",
            "description": "Externí identifikátor Přeplatku",
            "schema": {
              "maxLength": 20,
              "type": "string"
            }
          },
          {
            "name": "platceId",
            "in": "query",
            "description": "Interní identifikátor Plátce",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 781254
            },
            "example": 781254
          },
          {
            "name": "platceIdEx",
            "in": "query",
            "description": "Externí identifikátor Plátce",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "PIX_0001"
            },
            "example": "PIX_0001"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfPreplatekDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Preplatek/{recordNumber}": {
      "get": {
        "tags": [
          "Preplatek"
        ],
        "parameters": [
          {
            "name": "recordNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfPreplatekDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "Preplatek"
        ],
        "parameters": [
          {
            "name": "recordNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfPreplatekDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Preplatek/Invalidate/{interniIdentifikator}": {
      "put": {
        "tags": [
          "Preplatek"
        ],
        "summary": "Stornování Přeplatku",
        "description": "Stornování Přeplatku (zadán Interní identifikátor)",
        "parameters": [
          {
            "name": "interniIdentifikator",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreplatekDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Preplatek/Invalidate/{externiIdentifikator}": {
      "put": {
        "tags": [
          "Preplatek"
        ],
        "summary": "Stornování Přeplatku",
        "description": "Stornování Přeplatku (zadán Externí identifikátor)",
        "parameters": [
          {
            "name": "externiIdentifikator",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreplatekDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Preplatek/{interniIdentifikator}": {
      "put": {
        "tags": [
          "Preplatek"
        ],
        "summary": "Změna údajů záznamu Přeplatku (podle interního identifikátoru)",
        "description": "Změna údajů záznamu Přeplatek. Vyhledání přeplatku podle interního identifikátoru.",
        "parameters": [
          {
            "name": "interniIdentifikator",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PreplatekUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreplatekDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Preplatek/{externiIdentifikator}": {
      "put": {
        "tags": [
          "Preplatek"
        ],
        "summary": "Změna údajů záznamu Přeplatku (podle externího identifikátoru)",
        "description": "Změna údajů záznamu Přeplatek. Vyhledání předpidu podle externího identifikátoru.",
        "parameters": [
          {
            "name": "externiIdentifikator",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PreplatekUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreplatekDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/StavOrganizace": {
      "get": {
        "tags": [
          "StavOrganizace"
        ],
        "summary": "Seznam třídy Stav Organizace (číselník)",
        "description": "StavOrganizaceSeznamAsync",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfStavOrganizace"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "StavOrganizace"
        ],
        "summary": "Seznam třídy Stav Organizace (číselník)",
        "description": "StavOrganizaceSeznamAsync",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfStavOrganizace"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/TypAdresy": {
      "get": {
        "tags": [
          "TypAdresy"
        ],
        "summary": "Seznam třídy Typ adresy (číselník)",
        "description": "TypAdresySeznamAsync",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfTypAdresy"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "TypAdresy"
        ],
        "summary": "Seznam třídy Typ adresy (číselník)",
        "description": "TypAdresySeznamAsync",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfTypAdresy"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Uhrada/Faktura": {
      "get": {
        "tags": [
          "Uhrada"
        ],
        "parameters": [
          {
            "name": "fakturaId",
            "in": "query",
            "description": "Interní identifikátor Faktury vydané",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 781254
            },
            "example": 781254
          },
          {
            "name": "fakturaIdEx",
            "in": "query",
            "description": "Externí identifikátor Faktury vydané",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "FAK_0001"
            },
            "example": "FAK_0001"
          },
          {
            "name": "organizace.DatumNarozeni",
            "in": "query",
            "description": "Datum narození",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "2001-01-29"
            },
            "example": "2001-01-29"
          },
          {
            "name": "organizace.Dic",
            "in": "query",
            "description": "DIČ",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "CZ11111111111"
            },
            "example": "CZ11111111111"
          },
          {
            "name": "organizace.Ico",
            "in": "query",
            "description": "IČO",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "22222222222"
            },
            "example": "22222222222"
          },
          {
            "name": "organizace.Jmeno",
            "in": "query",
            "description": "Jméno",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Josef"
            },
            "example": "Josef"
          },
          {
            "name": "organizace.NazevDoplnujici",
            "in": "query",
            "description": "Doplňující název",
            "schema": {
              "maxLength": 80,
              "type": "string",
              "example": "NAZEV_DOPLN"
            },
            "example": "NAZEV_DOPLN"
          },
          {
            "name": "organizace.NazevOrganizace",
            "in": "query",
            "description": "Název organizace",
            "schema": {
              "maxLength": 100,
              "type": "string",
              "example": "ALLSOFT s.r.o"
            },
            "example": "ALLSOFT s.r.o"
          },
          {
            "name": "organizace.OrganizaceIdEx",
            "in": "query",
            "description": "Externí identifikátor organizace",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "OIX_0001"
            },
            "example": "OIX_0001"
          },
          {
            "name": "organizace.PravniForma",
            "in": "query",
            "description": "Právní forma",
            "schema": {
              "maxLength": 6,
              "type": "string",
              "example": "SO"
            },
            "example": "SO"
          },
          {
            "name": "organizace.Prijmeni",
            "in": "query",
            "description": "Příjmení",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Červený"
            },
            "example": "Červený"
          },
          {
            "name": "organizace.RodneCislo",
            "in": "query",
            "description": "Rodné číslo",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "1234567777"
            },
            "example": "1234567777"
          },
          {
            "name": "organizace.CisloDokladu",
            "in": "query",
            "description": "Číslo dokladu (max. 30 znaků)",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "112233445566"
            },
            "example": "112233445566"
          },
          {
            "name": "organizace.TypDokladu",
            "in": "query",
            "description": "Typ dokladu - občanský průkaz (O) nebo cestovní pas (C)",
            "schema": {
              "maxLength": 1,
              "type": "string",
              "example": "C"
            },
            "example": "C"
          },
          {
            "name": "variabilniSymbol",
            "in": "query",
            "schema": {
              "maxLength": 10,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfUhradaDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "Uhrada"
        ],
        "parameters": [
          {
            "name": "fakturaId",
            "in": "query",
            "description": "Interní identifikátor Faktury vydané",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 781254
            },
            "example": 781254
          },
          {
            "name": "fakturaIdEx",
            "in": "query",
            "description": "Externí identifikátor Faktury vydané",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "FAK_0001"
            },
            "example": "FAK_0001"
          },
          {
            "name": "organizace.DatumNarozeni",
            "in": "query",
            "description": "Datum narození",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "2001-01-29"
            },
            "example": "2001-01-29"
          },
          {
            "name": "organizace.Dic",
            "in": "query",
            "description": "DIČ",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "CZ11111111111"
            },
            "example": "CZ11111111111"
          },
          {
            "name": "organizace.Ico",
            "in": "query",
            "description": "IČO",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "22222222222"
            },
            "example": "22222222222"
          },
          {
            "name": "organizace.Jmeno",
            "in": "query",
            "description": "Jméno",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Josef"
            },
            "example": "Josef"
          },
          {
            "name": "organizace.NazevDoplnujici",
            "in": "query",
            "description": "Doplňující název",
            "schema": {
              "maxLength": 80,
              "type": "string",
              "example": "NAZEV_DOPLN"
            },
            "example": "NAZEV_DOPLN"
          },
          {
            "name": "organizace.NazevOrganizace",
            "in": "query",
            "description": "Název organizace",
            "schema": {
              "maxLength": 100,
              "type": "string",
              "example": "ALLSOFT s.r.o"
            },
            "example": "ALLSOFT s.r.o"
          },
          {
            "name": "organizace.OrganizaceIdEx",
            "in": "query",
            "description": "Externí identifikátor organizace",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "OIX_0001"
            },
            "example": "OIX_0001"
          },
          {
            "name": "organizace.PravniForma",
            "in": "query",
            "description": "Právní forma",
            "schema": {
              "maxLength": 6,
              "type": "string",
              "example": "SO"
            },
            "example": "SO"
          },
          {
            "name": "organizace.Prijmeni",
            "in": "query",
            "description": "Příjmení",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Červený"
            },
            "example": "Červený"
          },
          {
            "name": "organizace.RodneCislo",
            "in": "query",
            "description": "Rodné číslo",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "1234567777"
            },
            "example": "1234567777"
          },
          {
            "name": "organizace.CisloDokladu",
            "in": "query",
            "description": "Číslo dokladu (max. 30 znaků)",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "112233445566"
            },
            "example": "112233445566"
          },
          {
            "name": "organizace.TypDokladu",
            "in": "query",
            "description": "Typ dokladu - občanský průkaz (O) nebo cestovní pas (C)",
            "schema": {
              "maxLength": 1,
              "type": "string",
              "example": "C"
            },
            "example": "C"
          },
          {
            "name": "variabilniSymbol",
            "in": "query",
            "schema": {
              "maxLength": 10,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfUhradaDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Uhrada/Dobropis": {
      "get": {
        "tags": [
          "Uhrada"
        ],
        "parameters": [
          {
            "name": "dobropisId",
            "in": "query",
            "description": "Interní identifikátor Dobropisu",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 781254
            },
            "example": 781254
          },
          {
            "name": "dobropisIdEx",
            "in": "query",
            "description": "Externí identifikátor Dobropisu",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "FAK_0001"
            },
            "example": "FAK_0001"
          },
          {
            "name": "organizace.DatumNarozeni",
            "in": "query",
            "description": "Datum narození",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "2001-01-29"
            },
            "example": "2001-01-29"
          },
          {
            "name": "organizace.Dic",
            "in": "query",
            "description": "DIČ",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "CZ11111111111"
            },
            "example": "CZ11111111111"
          },
          {
            "name": "organizace.Ico",
            "in": "query",
            "description": "IČO",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "22222222222"
            },
            "example": "22222222222"
          },
          {
            "name": "organizace.Jmeno",
            "in": "query",
            "description": "Jméno",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Josef"
            },
            "example": "Josef"
          },
          {
            "name": "organizace.NazevDoplnujici",
            "in": "query",
            "description": "Doplňující název",
            "schema": {
              "maxLength": 80,
              "type": "string",
              "example": "NAZEV_DOPLN"
            },
            "example": "NAZEV_DOPLN"
          },
          {
            "name": "organizace.NazevOrganizace",
            "in": "query",
            "description": "Název organizace",
            "schema": {
              "maxLength": 100,
              "type": "string",
              "example": "ALLSOFT s.r.o"
            },
            "example": "ALLSOFT s.r.o"
          },
          {
            "name": "organizace.OrganizaceIdEx",
            "in": "query",
            "description": "Externí identifikátor organizace",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "OIX_0001"
            },
            "example": "OIX_0001"
          },
          {
            "name": "organizace.PravniForma",
            "in": "query",
            "description": "Právní forma",
            "schema": {
              "maxLength": 6,
              "type": "string",
              "example": "SO"
            },
            "example": "SO"
          },
          {
            "name": "organizace.Prijmeni",
            "in": "query",
            "description": "Příjmení",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Červený"
            },
            "example": "Červený"
          },
          {
            "name": "organizace.RodneCislo",
            "in": "query",
            "description": "Rodné číslo",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "1234567777"
            },
            "example": "1234567777"
          },
          {
            "name": "organizace.CisloDokladu",
            "in": "query",
            "description": "Číslo dokladu (max. 30 znaků)",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "112233445566"
            },
            "example": "112233445566"
          },
          {
            "name": "organizace.TypDokladu",
            "in": "query",
            "description": "Typ dokladu - občanský průkaz (O) nebo cestovní pas (C)",
            "schema": {
              "maxLength": 1,
              "type": "string",
              "example": "C"
            },
            "example": "C"
          },
          {
            "name": "variabilniSymbol",
            "in": "query",
            "schema": {
              "maxLength": 10,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfUhradaDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "Uhrada"
        ],
        "parameters": [
          {
            "name": "dobropisId",
            "in": "query",
            "description": "Interní identifikátor Dobropisu",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 781254
            },
            "example": 781254
          },
          {
            "name": "dobropisIdEx",
            "in": "query",
            "description": "Externí identifikátor Dobropisu",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "FAK_0001"
            },
            "example": "FAK_0001"
          },
          {
            "name": "organizace.DatumNarozeni",
            "in": "query",
            "description": "Datum narození",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "2001-01-29"
            },
            "example": "2001-01-29"
          },
          {
            "name": "organizace.Dic",
            "in": "query",
            "description": "DIČ",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "CZ11111111111"
            },
            "example": "CZ11111111111"
          },
          {
            "name": "organizace.Ico",
            "in": "query",
            "description": "IČO",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "22222222222"
            },
            "example": "22222222222"
          },
          {
            "name": "organizace.Jmeno",
            "in": "query",
            "description": "Jméno",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Josef"
            },
            "example": "Josef"
          },
          {
            "name": "organizace.NazevDoplnujici",
            "in": "query",
            "description": "Doplňující název",
            "schema": {
              "maxLength": 80,
              "type": "string",
              "example": "NAZEV_DOPLN"
            },
            "example": "NAZEV_DOPLN"
          },
          {
            "name": "organizace.NazevOrganizace",
            "in": "query",
            "description": "Název organizace",
            "schema": {
              "maxLength": 100,
              "type": "string",
              "example": "ALLSOFT s.r.o"
            },
            "example": "ALLSOFT s.r.o"
          },
          {
            "name": "organizace.OrganizaceIdEx",
            "in": "query",
            "description": "Externí identifikátor organizace",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "OIX_0001"
            },
            "example": "OIX_0001"
          },
          {
            "name": "organizace.PravniForma",
            "in": "query",
            "description": "Právní forma",
            "schema": {
              "maxLength": 6,
              "type": "string",
              "example": "SO"
            },
            "example": "SO"
          },
          {
            "name": "organizace.Prijmeni",
            "in": "query",
            "description": "Příjmení",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Červený"
            },
            "example": "Červený"
          },
          {
            "name": "organizace.RodneCislo",
            "in": "query",
            "description": "Rodné číslo",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "1234567777"
            },
            "example": "1234567777"
          },
          {
            "name": "organizace.CisloDokladu",
            "in": "query",
            "description": "Číslo dokladu (max. 30 znaků)",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "112233445566"
            },
            "example": "112233445566"
          },
          {
            "name": "organizace.TypDokladu",
            "in": "query",
            "description": "Typ dokladu - občanský průkaz (O) nebo cestovní pas (C)",
            "schema": {
              "maxLength": 1,
              "type": "string",
              "example": "C"
            },
            "example": "C"
          },
          {
            "name": "variabilniSymbol",
            "in": "query",
            "schema": {
              "maxLength": 10,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfUhradaDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Uhrada/Predpis": {
      "get": {
        "tags": [
          "Uhrada"
        ],
        "parameters": [
          {
            "name": "kodKnihy",
            "in": "query",
            "description": "Kód knihy poplatku",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 777
            },
            "example": 777
          },
          {
            "name": "platceId",
            "in": "query",
            "description": "Interní identifikátor Plátce",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 781254
            },
            "example": 781254
          },
          {
            "name": "platceIdEx",
            "in": "query",
            "description": "Externí identifikátor Plátce",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "PLC_0001"
            },
            "example": "PLC_0001"
          },
          {
            "name": "predpisId",
            "in": "query",
            "description": "Interní identifikátor Předpisu",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 781254
            },
            "example": 781254
          },
          {
            "name": "predpisIdEx",
            "in": "query",
            "description": "Externí identifikátor Předpisu",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "PRE_0001"
            },
            "example": "PRE_0001"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfUhradaDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "Uhrada"
        ],
        "parameters": [
          {
            "name": "kodKnihy",
            "in": "query",
            "description": "Kód knihy poplatku",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 777
            },
            "example": 777
          },
          {
            "name": "platceId",
            "in": "query",
            "description": "Interní identifikátor Plátce",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 781254
            },
            "example": 781254
          },
          {
            "name": "platceIdEx",
            "in": "query",
            "description": "Externí identifikátor Plátce",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "PLC_0001"
            },
            "example": "PLC_0001"
          },
          {
            "name": "predpisId",
            "in": "query",
            "description": "Interní identifikátor Předpisu",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 781254
            },
            "example": 781254
          },
          {
            "name": "predpisIdEx",
            "in": "query",
            "description": "Externí identifikátor Předpisu",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "PRE_0001"
            },
            "example": "PRE_0001"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfUhradaDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Uhrada/Preplatek": {
      "get": {
        "tags": [
          "Uhrada"
        ],
        "parameters": [
          {
            "name": "kodKnihy",
            "in": "query",
            "description": "Kód knihy poplatku",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 777
            },
            "example": 777
          },
          {
            "name": "platceId",
            "in": "query",
            "description": "Interní identifikátor Plátce",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 781254
            },
            "example": 781254
          },
          {
            "name": "platceIdEx",
            "in": "query",
            "description": "Externí identifikátor Plátce",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "PLC_0001"
            },
            "example": "PLC_0001"
          },
          {
            "name": "preplatekId",
            "in": "query",
            "description": "Interní identifikátor Přeplatku",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "preplatekIdEx",
            "in": "query",
            "description": "Externí identifikátor Přeplatku",
            "schema": {
              "maxLength": 20,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfUhradaDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "Uhrada"
        ],
        "parameters": [
          {
            "name": "kodKnihy",
            "in": "query",
            "description": "Kód knihy poplatku",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 777
            },
            "example": 777
          },
          {
            "name": "platceId",
            "in": "query",
            "description": "Interní identifikátor Plátce",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 781254
            },
            "example": 781254
          },
          {
            "name": "platceIdEx",
            "in": "query",
            "description": "Externí identifikátor Plátce",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "PLC_0001"
            },
            "example": "PLC_0001"
          },
          {
            "name": "preplatekId",
            "in": "query",
            "description": "Interní identifikátor Přeplatku",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "preplatekIdEx",
            "in": "query",
            "description": "Externí identifikátor Přeplatku",
            "schema": {
              "maxLength": 20,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfUhradaDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Uhrada/OdDatumu": {
      "get": {
        "tags": [
          "Uhrada"
        ],
        "summary": "Vyhledání úhrad podle kódů knih a datumu úhrady od.",
        "parameters": [
          {
            "name": "datumOd",
            "in": "query",
            "description": "Datum úhrady od (pro REST API Uhrada/OdDatumu) nebo datum smazání úhrady od (pro REST API Uhrada/Smazana/OdDatumu).",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "2023-03-21T00:00:00"
            },
            "example": "2023-03-21T00:00:00"
          },
          {
            "name": "datumDo",
            "in": "query",
            "description": "Datum úhrady do (pro REST API Uhrada/OdDatumu) nebo datum smazání úhrady do (pro REST API Uhrada/Smazana/OdDatumu).",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "2023-03-22T23:59:59"
            },
            "example": "2023-03-22T23:59:59"
          },
          {
            "name": "kodKnihy",
            "in": "query",
            "description": "Kód knihy poplatku (může být i více hodnot oddělených čárkou).",
            "schema": {
              "type": "string",
              "example": "777,444"
            },
            "example": "777,444"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfUhradaDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Uhrada/Smazana/OdDatumu": {
      "get": {
        "tags": [
          "Uhrada"
        ],
        "summary": "Vyhledání smazaných úhrad podle kódů knih a datumu smazání úhrady od.",
        "parameters": [
          {
            "name": "datumOd",
            "in": "query",
            "description": "Datum úhrady od (pro REST API Uhrada/OdDatumu) nebo datum smazání úhrady od (pro REST API Uhrada/Smazana/OdDatumu).",
            "required": true,
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "2023-03-21T00:00:00"
            },
            "example": "2023-03-21T00:00:00"
          },
          {
            "name": "datumDo",
            "in": "query",
            "description": "Datum úhrady do (pro REST API Uhrada/OdDatumu) nebo datum smazání úhrady do (pro REST API Uhrada/Smazana/OdDatumu).",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "2023-03-22T23:59:59"
            },
            "example": "2023-03-22T23:59:59"
          },
          {
            "name": "kodKnihy",
            "in": "query",
            "description": "Kód knihy poplatku (může být i více hodnot oddělených čárkou).",
            "schema": {
              "type": "string",
              "example": "777,444"
            },
            "example": "777,444"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfUhradaDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Zamestnanec": {
      "get": {
        "tags": [
          "Zamestnanec"
        ],
        "summary": "Vyhledání zaměstnance pomocí atributů třídy ZamestnanecSearch ve FromQuery.",
        "parameters": [
          {
            "name": "osobniCislo",
            "in": "query",
            "description": "Osobní číslo.",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "ZHK0001"
            },
            "example": "ZHK0001"
          },
          {
            "name": "login",
            "in": "query",
            "description": "Login.",
            "schema": {
              "maxLength": 60,
              "type": "string",
              "example": "magdalena.nova"
            },
            "example": "magdalena.nova"
          },
          {
            "name": "jmeno",
            "in": "query",
            "description": "Jméno.",
            "schema": {
              "maxLength": 40,
              "type": "string",
              "example": "Magdalena"
            },
            "example": "Magdalena"
          },
          {
            "name": "prijmeni",
            "in": "query",
            "description": "Příjmení.",
            "schema": {
              "maxLength": 40,
              "type": "string",
              "example": "Nová"
            },
            "example": "Nová"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfZamestnanecDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Zamestnanec/{recordNumber}": {
      "get": {
        "tags": [
          "Zamestnanec"
        ],
        "summary": "Vyhledání zaměstnance pomocí ID v routě.",
        "parameters": [
          {
            "name": "recordNumber",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfZamestnanecDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "Zamestnanec"
        ],
        "summary": "Vyhledání zaměstnance pomocí ID v routě.",
        "parameters": [
          {
            "name": "recordNumber",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfZamestnanecDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Zeme": {
      "get": {
        "tags": [
          "Zeme"
        ],
        "summary": "Seznam třídy Země (číselník)",
        "description": "ZemeSeznamAsync",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfZeme"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "Zeme"
        ],
        "summary": "Seznam třídy Země (číselník)",
        "description": "ZemeSeznamAsync",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfZeme"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Adresa": {
        "type": "object",
        "properties": {
          "typAdresy": {
            "type": "string",
            "description": "Typ adresy (hodnota z atr. kod v číselníku TypAdresy)",
            "nullable": true,
            "example": "Trvalá"
          },
          "cisloCo": {
            "maxLength": 10,
            "type": "string",
            "description": "Cislo orientacni",
            "nullable": true,
            "example": "15"
          },
          "cisloCp": {
            "maxLength": 10,
            "type": "string",
            "description": "Číslo popisné",
            "nullable": true,
            "example": "263"
          },
          "obec": {
            "type": "string",
            "description": "Název obce",
            "nullable": true,
            "example": "Plzeň"
          },
          "castObce": {
            "type": "string",
            "description": "Část obce",
            "nullable": true,
            "example": "Bolevec"
          },
          "mestskyObvod": {
            "type": "string",
            "description": "Městský obvod",
            "nullable": true,
            "example": "Plzeň 1"
          },
          "okres": {
            "type": "string",
            "description": "Okres",
            "nullable": true,
            "example": "Plzeň město"
          },
          "pismenoCo": {
            "type": "string",
            "description": "Pismeno cisla orientacniho",
            "nullable": true,
            "example": "a"
          },
          "psc": {
            "type": "string",
            "description": "PSČ",
            "nullable": true,
            "example": "32300"
          },
          "stavAdresy": {
            "type": "integer",
            "description": "Stav Adresy",
            "format": "int32",
            "example": 1
          },
          "typCislaDomovniho": {
            "type": "integer",
            "description": "Typ cisla domovniho",
            "format": "int32",
            "example": 1
          },
          "ulice": {
            "type": "string",
            "description": "Nazev ulice",
            "nullable": true,
            "example": "Nefritová"
          }
        },
        "additionalProperties": false
      },
      "AdresaUpdate": {
        "type": "object",
        "properties": {
          "organizaceIdEx": {
            "maxLength": 20,
            "type": "string",
            "nullable": true,
            "example": "OIX_0001"
          },
          "typAdresy": {
            "type": "string",
            "description": "Typ adresy (hodnota z atr. kod v číselníku TypAdresy)",
            "nullable": true,
            "example": "Trvalá"
          },
          "cisloCo": {
            "maxLength": 10,
            "type": "string",
            "description": "Cislo orientacni",
            "nullable": true,
            "example": "15"
          },
          "cisloCp": {
            "maxLength": 10,
            "type": "string",
            "description": "Číslo popisné",
            "nullable": true,
            "example": "263"
          },
          "obec": {
            "type": "string",
            "description": "Název obce",
            "nullable": true,
            "example": "Plzeň"
          },
          "castObce": {
            "type": "string",
            "description": "Část obce",
            "nullable": true,
            "example": "Bolevec"
          },
          "mestskyObvod": {
            "type": "string",
            "description": "Městský obvod",
            "nullable": true,
            "example": "Plzeň 1"
          },
          "okres": {
            "type": "string",
            "description": "Okres",
            "nullable": true,
            "example": "Plzeň město"
          },
          "pismenoCo": {
            "type": "string",
            "description": "Pismeno cisla orientacniho",
            "nullable": true,
            "example": "a"
          },
          "psc": {
            "type": "string",
            "description": "PSČ",
            "nullable": true,
            "example": "32300"
          },
          "stavAdresy": {
            "type": "integer",
            "description": "Stav Adresy",
            "format": "int32",
            "example": 1
          },
          "typCislaDomovniho": {
            "type": "integer",
            "description": "Typ cisla domovniho",
            "format": "int32",
            "example": 1
          },
          "ulice": {
            "type": "string",
            "description": "Nazev ulice",
            "nullable": true,
            "example": "Nefritová"
          }
        },
        "additionalProperties": false
      },
      "AssetsInventoryBrowseResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Header id - primary key of an inventory.",
            "format": "int32"
          },
          "reference": {
            "type": "string",
            "description": "Reference of an inventory.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of an inventory.",
            "nullable": true
          },
          "installationDate": {
            "type": "string",
            "description": "Date of installation.",
            "format": "date-time"
          },
          "asOf": {
            "type": "string",
            "description": "Date when an inventory began.",
            "format": "date-time"
          },
          "inventoryStatus": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "<br>\r\n            Status of inventory.\r\n            \r\n<br>\r\n  <list type=\"bullet\">\r\n    <listheader>Possible values:</listheader>\r\n    <item>1 - Installed/ </item>\r\n    <item>2 - Approved/ </item>\r\n    <item>3 - Closed/ </item>\r\n    <item>4 - Installed - generated/ </item>\r\n    <item>5 - Approved - generated/ </item>\r\n    <item>6 - Closed - generated/ </item>\r\n  </list>\r\n",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "description": "Date when the inventory was created",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Assets inventories."
      },
      "AssetsInventoryItemResult": {
        "required": [
          "itemId",
          "rowOrdinalNumber"
        ],
        "type": "object",
        "properties": {
          "assetType": {
            "type": "integer",
            "description": "Type of asset.",
            "format": "int32",
            "nullable": true
          },
          "assetTypeName": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string",
            "description": "Name of asset type.",
            "nullable": true
          },
          "assetName": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string",
            "description": "Name of asset type.",
            "nullable": true
          },
          "assetLongName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Long name of asset type.",
            "nullable": true
          },
          "found": {
            "type": "string",
            "description": "Was the asset found?\r\nA - yes, N - No, X - Not checked.",
            "nullable": true
          },
          "unitLocationId": {
            "type": "integer",
            "description": "MA unit location identifier.",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "unitLocation": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "assetId": {
            "type": "integer",
            "description": "Identifier of an asset in an inventory.",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "asset": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "assetCode": {
            "type": "string",
            "description": "Code of assets or a unit location. It is a reference of ASOL.WebAPI.App.MIM.Contracts.AssetsInventoryItemResult.UnitLocation or ASOL.WebAPI.App.MIM.Contracts.AssetsInventoryItemResult.Asset.",
            "nullable": true,
            "readOnly": true
          },
          "barCode": {
            "type": "string",
            "description": "A bar code of assets.",
            "nullable": true
          },
          "serialNumber": {
            "type": "string",
            "description": "A serial number of ASOL.WebAPI.App.MIM.Contracts.AssetsInventoryItemResult.Asset.",
            "nullable": true
          },
          "originalLocationId": {
            "type": "integer",
            "description": "Identifier of an original location of ASOL.WebAPI.App.MIM.Contracts.AssetsInventoryItemResult.Asset.",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "originalLocation": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "newLocationId": {
            "type": "integer",
            "description": "Identifier of a new location of ASOL.WebAPI.App.MIM.Contracts.AssetsInventoryItemResult.Asset.",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "newLocation": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "originalCostZoneId": {
            "type": "integer",
            "description": "Identifier of an original cost zone (ASOL.WebAPI.App.MIM.Contracts.AssetsInventoryItemResult.OriginalCostZone).",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "originalCostZone": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "newCostZoneId": {
            "type": "integer",
            "description": "Identifier of a new cost zone (ASOL.WebAPI.App.MIM.Contracts.AssetsInventoryItemResult.NewCostZone).",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "newCostZone": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "originalResponsiblePersonId": {
            "type": "integer",
            "description": "Identifier of an original responsible person (ASOL.WebAPI.App.MIM.Contracts.AssetsInventoryItemResult.OriginalResponsiblePerson).",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "originalResponsiblePerson": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "newResponsiblePersonId": {
            "type": "integer",
            "description": "Identifier of a new responsible person (ASOL.WebAPI.App.MIM.Contracts.AssetsInventoryItemResult.NewResponsiblePerson).",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "newResponsiblePerson": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "originalDepartmentId": {
            "type": "integer",
            "description": "Identifier of an original department (ASOL.WebAPI.App.MIM.Contracts.AssetsInventoryItemResult.OriginalDepartment).",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "originalDepartment": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "newDepartmentId": {
            "type": "integer",
            "description": "Identifier of a new department (ASOL.WebAPI.App.MIM.Contracts.AssetsInventoryItemResult.NewDepartment).",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "newDepartment": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelResult"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfIUserDefinedAttributeResult"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfIForeignKeyRelationItemResult"
          },
          "itemId": {
            "type": "integer",
            "description": "Identifier of item in a record.",
            "format": "int32"
          },
          "rowOrdinalNumber": {
            "type": "integer",
            "description": "Row ordinal number.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Assets inventory - entry."
      },
      "AssetsInventoryItemUpdate": {
        "required": [
          "found"
        ],
        "type": "object",
        "properties": {
          "unitLocationId": {
            "type": "integer",
            "description": "MA unit location identifier.",
            "format": "int32",
            "nullable": true
          },
          "assetId": {
            "type": "integer",
            "description": "Identifier of an asset in an inventory.",
            "format": "int32",
            "nullable": true
          },
          "assetName": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "Reference name of asset type.\r\nIf you don't know an identifier of an asset (ASOL.WebAPI.App.MIM.Contracts.AssetsInventoryItemUpdate.AssetId), fill ASOL.WebAPI.App.MIM.Contracts.AssetsInventoryItemUpdate.AssetName or ASOL.WebAPI.App.MIM.Contracts.AssetsInventoryItemUpdate.AssetLongName.\r\nIf ASOL.WebAPI.App.MIM.Contracts.AssetsInventoryItemUpdate.AssetId is passed, ASOL.WebAPI.App.MIM.Contracts.AssetsInventoryItemUpdate.AssetName and ASOL.WebAPI.App.MIM.Contracts.AssetsInventoryItemUpdate.AssetLongName may be null.",
            "nullable": true
          },
          "assetLongName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Long name of asset.\r\nIf you don't know an identifier of an asset (ASOL.WebAPI.App.MIM.Contracts.AssetsInventoryItemUpdate.AssetId), fill ASOL.WebAPI.App.MIM.Contracts.AssetsInventoryItemUpdate.AssetName or ASOL.WebAPI.App.MIM.Contracts.AssetsInventoryItemUpdate.AssetLongName.\r\nIf ASOL.WebAPI.App.MIM.Contracts.AssetsInventoryItemUpdate.AssetId is passed, ASOL.WebAPI.App.MIM.Contracts.AssetsInventoryItemUpdate.AssetName and ASOL.WebAPI.App.MIM.Contracts.AssetsInventoryItemUpdate.AssetLongName may be null.",
            "nullable": true
          },
          "barCode": {
            "type": "string",
            "description": "A bar code of assets.",
            "nullable": true
          },
          "found": {
            "type": "string",
            "description": "Was the asset found?\r\nA - Yes, N - No, X - Not checked.\r\nAlso values: \"found\" (yes), \"notFound\" (No) and \"notChecked\" are allowed."
          },
          "serialNumber": {
            "type": "string",
            "description": "A serial number of ASOL.WebAPI.App.MIM.Contracts.AssetsInventoryItemUpdate.AssetId.",
            "nullable": true
          },
          "originalLocationId": {
            "type": "integer",
            "description": "Identifier of an original location of ASOL.WebAPI.App.MIM.Contracts.AssetsInventoryItemUpdate.AssetId.",
            "format": "int32",
            "nullable": true
          },
          "newLocationId": {
            "type": "integer",
            "description": "Identifier of a new location of ASOL.WebAPI.App.MIM.Contracts.AssetsInventoryItemUpdate.AssetId.",
            "format": "int32",
            "nullable": true
          },
          "originalCostZoneId": {
            "type": "integer",
            "description": "Identifier of an original cost zone (ASOL.WebAPI.App.MIM.Contracts.AssetsInventoryItemUpdate.OriginalCostZoneId).",
            "format": "int32",
            "nullable": true
          },
          "newCostZoneId": {
            "type": "integer",
            "description": "Identifier of a new cost zone (ASOL.WebAPI.App.MIM.Contracts.AssetsInventoryItemUpdate.NewCostZoneId).",
            "format": "int32",
            "nullable": true
          },
          "originalResponsiblePersonId": {
            "type": "integer",
            "description": "Identifier of an original responsible person (ASOL.WebAPI.App.MIM.Contracts.AssetsInventoryItemUpdate.OriginalResponsiblePersonId).",
            "format": "int32",
            "nullable": true
          },
          "newResponsiblePersonId": {
            "type": "integer",
            "description": "Identifier of a new responsible person (ASOL.WebAPI.App.MIM.Contracts.AssetsInventoryItemUpdate.NewResponsiblePersonId).",
            "format": "int32",
            "nullable": true
          },
          "originalDepartmentId": {
            "type": "integer",
            "description": "Identifier of an original department (ASOL.WebAPI.App.MIM.Contracts.AssetsInventoryItemUpdate.OriginalDepartmentId).",
            "format": "int32",
            "nullable": true
          },
          "newDepartmentId": {
            "type": "integer",
            "description": "Identifier of a new department (ASOL.WebAPI.App.MIM.Contracts.AssetsInventoryItemUpdate.NewDepartmentId).",
            "format": "int32",
            "nullable": true
          },
          "action": {
            "$ref": "#/components/schemas/ItemAction"
          },
          "itemId": {
            "type": "integer",
            "description": "Identifier of an item for a main record. \r\nIn fact, it is an identity db identifier of the item. \r\nIt can be zero or less then zero for items to insert (or you can omit it in a contract at all). \r\nIn this cases, new item will be generated.\r\nIf you specify the item identifier, the item will be updated by values in a contract .\r\nIf you specify the item identifier and you set the ASOL.Nephrite.WebAPI.Contracts.ItemModelChangeBase.Action to ASOL.Nephrite.WebAPI.Contracts.ItemAction.Delete, the item will deleted.",
            "format": "int32"
          },
          "rowOrdinalNumber": {
            "type": "integer",
            "description": "Row ordinal number.",
            "format": "int32"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelChange"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfUserDefinedAttributeChange"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfForeignKeyRelationItemChange"
          }
        },
        "additionalProperties": false,
        "description": "Assets inventory - entry. Insert/Update/Delete"
      },
      "AssetsInventoryResult": {
        "required": [
          "classId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Header id - primary key of an inventory.",
            "format": "int32"
          },
          "caption": {
            "type": "string",
            "description": "Info about an inventory",
            "nullable": true,
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "Additional info about an inventory.",
            "nullable": true
          },
          "installationDate": {
            "type": "string",
            "description": "Date of installation.",
            "format": "date-time"
          },
          "asOf": {
            "type": "string",
            "description": "Date when an inventory began.",
            "format": "date-time"
          },
          "inventoryType": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "<br>\r\n            Type of inventory.\r\n            \r\n<br>\r\n            Possible values:\r\n            <list type=\"bullet\"><item>S - Blind/ </item><item>V - Named/ </item></list>",
            "nullable": true
          },
          "inventoryStatus": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "<br>\r\n            Status of inventory.\r\n            \r\n<br>\r\n  <list type=\"bullet\">\r\n    <listheader>Possible values:</listheader>\r\n    <item>1 - Installed/ </item>\r\n    <item>2 - Approved/ </item>\r\n    <item>3 - Closed/ </item>\r\n    <item>4 - Installed - generated/ </item>\r\n    <item>5 - Approved - generated/ </item>\r\n    <item>6 - Closed - generated/ </item>\r\n  </list>\r\n",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetsInventoryItemResult"
            },
            "description": "Items of records. Optional.",
            "nullable": true
          },
          "classId": {
            "type": "integer",
            "description": "Identifier of the class of the entity.",
            "format": "int32",
            "example": 1023
          },
          "className": {
            "type": "string",
            "description": "Localized name of an entity class. Optional.",
            "nullable": true,
            "example": "My class name"
          },
          "folderId": {
            "type": "integer",
            "description": "Identifier of the folder.",
            "format": "int32",
            "example": 123
          },
          "folderName": {
            "type": "string",
            "description": "Localized name of an entity folder. Optional.",
            "nullable": true,
            "example": "My folder name"
          },
          "lastUpdatedOn": {
            "type": "string",
            "description": "Gets or sets an entity last update date and time.\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "description": "Gets or sets date and time when entity was created .\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "Gets entity timestamp.",
            "nullable": true,
            "example": "00000000000117CB"
          },
          "gunid": {
            "type": "string",
            "description": "Global record identifier within several databases.\r\nThis value is generated by database on a back-end.",
            "nullable": true,
            "example": "00000K00001U00000P"
          },
          "createdById": {
            "type": "integer",
            "description": "Primary key of the creator of the entity/record.",
            "format": "int32",
            "nullable": true,
            "example": 69
          },
          "createdBy": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "lastUpdatedById": {
            "type": "integer",
            "description": "Primary key of the last updated user of the entity",
            "format": "int32",
            "nullable": true,
            "example": 69
          },
          "lastUpdatedBy": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelResult"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfIUserDefinedAttributeResult"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfIForeignKeyRelationItemResult"
          },
          "reference": {
            "type": "string",
            "description": "Reference no. of record.",
            "nullable": true,
            "example": "X0000001"
          },
          "name": {
            "type": "string",
            "description": "Name of record.",
            "nullable": true,
            "example": "Record name"
          }
        },
        "additionalProperties": false,
        "description": "Assets inventory - header."
      },
      "AssetsInventoryUpdate": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Additional info about an inventory.",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "description": "Reference no. of record.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of record.",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetsInventoryItemUpdate"
            },
            "description": "Items of records. Optional.",
            "nullable": true
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelChange"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfUserDefinedAttributeChange"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfForeignKeyRelationItemChange"
          }
        },
        "additionalProperties": false,
        "description": "Contract to update an assets inventory record."
      },
      "AttributesCollectionOfIAttributeResult": {
        "type": "object",
        "properties": {
          "attributeItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttributeResult"
            },
            "description": "Collection of user defined attributes.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Class which contains collection of of user defined attributes."
      },
      "AttributesCollectionOfIUserDefinedAttributeResult": {
        "type": "object",
        "properties": {
          "attributeItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IUserDefinedAttributeResult"
            },
            "description": "Collection of user defined attributes.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Class which contains collection of of user defined attributes."
      },
      "AttributesCollectionOfUserDefinedAttributeChange": {
        "type": "object",
        "properties": {
          "attributeItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserDefinedAttributeChange"
            },
            "description": "Collection of user defined attributes.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Class which contains collection of of user defined attributes."
      },
      "AuthenticateRequest": {
        "type": "object",
        "properties": {
          "userName": {
            "type": "string",
            "description": "<br>\r\n            Gets or sets the user name (login name or login email).\r\n            \r\n<br>\r\n            It can be unspecified when ASOL.Nephrite.WebAPI.AuthProvider.Contracts.AuthenticateRequest.UseWindowsAuthentication and ASOL.Nephrite.WebAPI.AuthProvider.Contracts.AuthenticateRequest.UseCurrentUserCredentials is true, \r\n            otherwise it has to be filled.\r\n            ",
            "nullable": true,
            "example": "domain\name.surname"
          },
          "password": {
            "type": "string",
            "description": "<br>\r\n            Gets or sets the password.\r\n            \r\n<br>\r\n            It can be unspecified when ASOL.Nephrite.WebAPI.AuthProvider.Contracts.AuthenticateRequest.UseWindowsAuthentication and ASOL.Nephrite.WebAPI.AuthProvider.Contracts.AuthenticateRequest.UseCurrentUserCredentials is true, \r\n            otherwise it has to be filled.\r\n            ",
            "nullable": true,
            "example": "SecretPassword*01"
          },
          "useWindowsAuthentication": {
            "type": "boolean",
            "description": "<br>\r\n            If true, windows authentication is used to connect to HeG (System.Net.NetworkCredential are created and used to login). \r\n            If ASOL.Nephrite.WebAPI.AuthProvider.Contracts.AuthenticateRequest.UseCurrentUserCredentials is true as well, ASOL.Nephrite.WebAPI.AuthProvider.Contracts.AuthenticateRequest.UserName and ASOL.Nephrite.WebAPI.AuthProvider.Contracts.AuthenticateRequest.Password are ignored. \r\n            System.Net.CredentialCache.DefaultCredentials are used then.\r\n            \r\n<br>\r\n            If false, basic authentication using ASOL.Nephrite.WebAPI.AuthProvider.Contracts.AuthenticateRequest.UserName  and ASOL.Nephrite.WebAPI.AuthProvider.Contracts.AuthenticateRequest.Password is used to connect to HeG.\r\n            \r\n<br>\r\n            This property must filled when default value is not specified in application settings \r\n            or if a different value should be used.\r\n            The application can be set such way, this property may not be set at all.\r\n            Contact administrator to ensure how to authenticate if needed. \r\n            ",
            "example": false
          },
          "useCurrentUserCredentials": {
            "type": "boolean",
            "description": "<br>\r\n            This property is taken into account when ASOL.Nephrite.WebAPI.AuthProvider.Contracts.AuthenticateRequest.UseWindowsAuthentication is true only.\r\n            System.Net.CredentialCache.DefaultCredentials are used instead of ASOL.Nephrite.WebAPI.AuthProvider.Contracts.AuthenticateRequest.UserName and ASOL.Nephrite.WebAPI.AuthProvider.Contracts.AuthenticateRequest.Password then.\r\n            \r\n<br>\r\n            This property must filled when default value is not specified in application settings \r\n            or if a different value should be used.\r\n            The application can be set such way, this property may not be set at all.\r\n            Contact administrator to ensure how to authenticate if needed. \r\n            ",
            "example": false
          },
          "languageId": {
            "type": "string",
            "description": "<br>\r\n            Gets or sets the code of language (czech is CZ, slovak is SK, english is EN). \r\n            \r\n<br>\r\n            This property must filled when default language is not specified in application settings \r\n            or if a different language should be used.\r\n            The application can be set such way, this property may not be set at all.\r\n            Contact administrator to ensure how to authenticate if needed. \r\n            ",
            "nullable": true,
            "example": "CZ"
          },
          "dbProfile": {
            "type": "string",
            "description": "<br>\r\n            Gets or sets the db profile where the user is to be connected to.\r\n            \r\n<br>\r\n            This property must filled when default db profile is not specified in application settings\r\n             or if a different db profile should be used.\r\n            The application can be set such way, this property may not be set at all.\r\n            Contact administrator to ensure how to authenticate if needed. \r\n            ",
            "nullable": true,
            "example": "MySqlServer.TestDbProfile"
          },
          "serverURL": {
            "type": "string",
            "description": "<br>\r\n            Gets or sets the URL of application server.\r\n            \r\n<br>\r\n            This property must filled when default server URL is not specified in application settings\r\n            or if a different server be used.\r\n            The application can be set such way, this property may not be set at all.\r\n            Contact administrator to ensure how to authenticate if needed. \r\n            ",
            "nullable": true,
            "example": "http://testserever/testapp"
          }
        },
        "additionalProperties": false,
        "description": "Model for authentication."
      },
      "AuthenticateResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "If true, authention was successfull.",
            "readOnly": true,
            "example": true
          },
          "statusCode": {
            "$ref": "#/components/schemas/HttpStatusCode"
          },
          "errorMessage": {
            "type": "string",
            "description": "Error message in case of authentication was not successful..",
            "nullable": true,
            "example": "Some error message."
          },
          "userName": {
            "type": "string",
            "description": "Username to log-in.",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "Unique identifier to log-in. Something like token.",
            "nullable": true,
            "example": "UserId 31f49a7ddc18e97247308d5180ac684890f5a5c3442e0ab7115e037f6d6dd2f6"
          }
        },
        "additionalProperties": false,
        "description": "Model for response of authentication."
      },
      "BrowseColumnInfo": {
        "type": "object",
        "properties": {
          "columnName": {
            "type": "string",
            "description": "Gets or sets column name.",
            "nullable": true
          },
          "visible": {
            "type": "boolean",
            "description": "Gets or sets column's visibility."
          },
          "headerText": {
            "type": "string",
            "description": "Gets or sets header text.",
            "nullable": true
          },
          "dataFormat": {
            "type": "string",
            "description": "Defines the format how to display data.",
            "nullable": true
          },
          "italica": {
            "type": "boolean",
            "description": "Is an Italica used for font?"
          },
          "bold": {
            "type": "boolean",
            "description": "Is a font bold?"
          },
          "underline": {
            "type": "boolean",
            "description": "Is an underline font used?"
          },
          "align": {
            "type": "integer",
            "description": "<list type=\"bullet\">\r\n  <listheader>Aligning of a column.</listheader>\r\n  <item>0 - Left</item>\r\n  <item>1 - Right</item>\r\n  <item>2 - Center</item>\r\n</list>",
            "format": "int32"
          },
          "dataTypeRepo": {
            "type": "string",
            "description": "Datový type of a column - repository definition.\r\n\"money\" , \"varchar\" , \"string\", \"datetime\", \"date\", \"time\", \"folder\", \"boolean\" , \"multilline_text\", \"text\", \"pointer\", \"binary\"",
            "nullable": true
          },
          "fullDbName": {
            "type": "string",
            "description": "Full db name in a select command.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Data structure represents information about one browse column."
      },
      "BrowseDataRowInfo": {
        "type": "object",
        "additionalProperties": false
      },
      "BrowseGroupRowInfo": {
        "type": "object",
        "properties": {
          "level": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "BrowseResponse": {
        "type": "object",
        "properties": {
          "data": {
            "nullable": true
          },
          "totalRowCount": {
            "type": "integer",
            "description": "Count of all rows for specified conditions. -1 if information is not accessible.",
            "format": "int32"
          },
          "rowCount": {
            "type": "integer",
            "description": "Count of returned rows. -1 if information is not accessible.",
            "format": "int32",
            "readOnly": true
          },
          "browseId": {
            "type": "integer",
            "format": "int32"
          },
          "browseName": {
            "type": "string",
            "nullable": true
          },
          "folderId": {
            "type": "integer",
            "format": "int32"
          },
          "classId": {
            "type": "integer",
            "format": "int32"
          },
          "rowsType": {
            "$ref": "#/components/schemas/RecordDataRowType"
          },
          "columnsInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrowseColumnInfo"
            },
            "nullable": true
          },
          "rowsInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrowseRowInfo"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BrowseRowInfo": {
        "type": "object",
        "properties": {
          "dataRow": {
            "$ref": "#/components/schemas/BrowseDataRowInfo"
          },
          "groupRow": {
            "$ref": "#/components/schemas/BrowseGroupRowInfo"
          },
          "rowType": {
            "$ref": "#/components/schemas/BrowseRowType"
          }
        },
        "additionalProperties": false
      },
      "BrowseRowType": {
        "enum": [
          "dataRow",
          "groupRow"
        ],
        "type": "string"
      },
      "BrowseType": {
        "enum": [
          "template",
          "view"
        ],
        "type": "string",
        "description": "The browse type (template/view)."
      },
      "CacheItemPriority": {
        "enum": [
          "low",
          "normal",
          "high",
          "neverRemove"
        ],
        "type": "string"
      },
      "CacheRequest": {
        "required": [
          "key"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key for a memory cache."
          },
          "value": {
            "maxLength": 4096,
            "minLength": 1,
            "type": "string",
            "description": "Value to store to a cache.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contract which is used to store ASOL.Nephrite.WebAPI.Contracts.Infrastructure.Caching.CacheRequest.Value to a memory cache with ASOL.Nephrite.WebAPI.Contracts.Infrastructure.Caching.CacheRequest.Key."
      },
      "CacheResponse": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Value stored in cache.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contract which is used to get ASOL.Nephrite.WebAPI.Contracts.Infrastructure.Caching.CacheResponse.Value from a memory cache."
      },
      "CiselnikEvidencniTyp": {
        "type": "object",
        "properties": {
          "kod": {
            "type": "string",
            "description": "Kód Evidenčního typu",
            "nullable": true,
            "example": "MKO"
          },
          "nazev": {
            "type": "string",
            "description": "Název Evidenčního typu",
            "nullable": true,
            "example": "Běžné pohledávky"
          },
          "jeMistniPoplatek": {
            "type": "string",
            "description": "Je místní poplatek",
            "nullable": true,
            "example": "A"
          },
          "jePrijemDleDanovehoRadu": {
            "type": "string",
            "description": "Je příjem podle daňového řádu",
            "nullable": true,
            "example": "A"
          },
          "jeUctovatelny": {
            "type": "string",
            "description": "Je účtovatelný",
            "nullable": true,
            "example": "A"
          },
          "legislativa": {
            "type": "string",
            "description": "Legislativa",
            "nullable": true,
            "example": "Zákon 565/1990 Sb.a příslušná obecní vyhláška"
          },
          "platnostOd": {
            "type": "string",
            "description": "Platnost od",
            "nullable": true,
            "example": "1.1.2023"
          },
          "platnostDo": {
            "type": "string",
            "description": "Platnost do",
            "nullable": true,
            "example": "1.2.2023"
          },
          "pouzeProEvidencniAgendu": {
            "type": "string",
            "description": "Pouze pro evidenční agendu",
            "nullable": true,
            "example": "N"
          },
          "pouzivaKalendarPredpisu": {
            "type": "string",
            "description": "Používá kalendář předpisů",
            "nullable": true,
            "example": "A"
          },
          "pouzivaKartuPrijmu": {
            "type": "string",
            "description": "Používá kartu příjmu",
            "nullable": true,
            "example": "A"
          },
          "pouzivaOpravnePolozky": {
            "type": "string",
            "description": "Používá opravné položky",
            "nullable": true,
            "example": "A"
          },
          "pouzivaPodrozvahu": {
            "type": "string",
            "description": "Používá podrozvahu",
            "nullable": true,
            "example": "A"
          },
          "pouzivaStorno": {
            "type": "string",
            "description": "Používá storno",
            "nullable": true,
            "example": "N"
          }
        },
        "additionalProperties": false
      },
      "CiselnikKodDph": {
        "type": "object",
        "properties": {
          "kod": {
            "type": "string",
            "nullable": true
          },
          "sazba": {
            "type": "number",
            "format": "double"
          },
          "popis": {
            "type": "string",
            "nullable": true
          },
          "platnostOd": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Číselník Kódy DPH"
      },
      "CiselnikTypUhrady": {
        "type": "object",
        "properties": {
          "kod": {
            "type": "string",
            "nullable": true
          },
          "popis": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Číselník Stav organizace"
      },
      "CollectionResultOfAssetsInventoryBrowseResult": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetsInventoryBrowseResult"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfCiselnikEvidencniTyp": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CiselnikEvidencniTyp"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfCiselnikKodDph": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CiselnikKodDph"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfCiselnikTypUhrady": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CiselnikTypUhrady"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfContactPersonResult": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactPersonResult"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfDobropisFvDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DobropisFvDto"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfEmployeeResult": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeResult"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfFakturaVydanaDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FakturaVydanaDto"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfKontacePrvodokladuDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KontacePrvodokladuDto"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfLocationResult": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationResult"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfMajetekDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MajetekDto"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfMistnostDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MistnostDto"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfPlatceDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatceDto"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfPokladniDokladDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PokladniDokladDto"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfPravniForma": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PravniForma"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfPredpisDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PredpisDto"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfPreplatekDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PreplatekDto"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfStavOrganizace": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StavOrganizace"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfTypAdresy": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TypAdresy"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfUhradaDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UhradaDto"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfZamestnanecDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ZamestnanecDto"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfZeme": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Zeme"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CompanyCreate": {
        "required": [
          "folderId"
        ],
        "type": "object",
        "properties": {
          "tin": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "TIN/VATIN – value added tax identification number",
            "nullable": true,
            "example": "CZ64949541"
          },
          "cin": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string",
            "description": "CIN – Company identification number",
            "nullable": true,
            "example": "64949541"
          },
          "place": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Place",
            "nullable": true,
            "example": "Prague"
          },
          "zip": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string",
            "description": "ZIP",
            "nullable": true,
            "example": "39143"
          },
          "poBox": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "P.O. Box",
            "nullable": true,
            "example": "P.O.Box 111"
          },
          "phone": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "Phone number.",
            "nullable": true,
            "example": "+420244104111"
          },
          "mobilePhone": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "Mobile phone number.",
            "nullable": true,
            "example": "000000000"
          },
          "legalForm": {
            "maxLength": 6,
            "minLength": 0,
            "type": "string",
            "description": "A legal form. Typically of a company. A ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.LegalFormResult.Code.",
            "nullable": true,
            "example": "AS"
          },
          "status": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Status. \r\n1 - Potential, 2 - Active, 3 - Don't use, 4 - Passive, 5 - Approved, 6 - Non-approved",
            "nullable": true,
            "example": "2"
          },
          "email": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Email - primary",
            "nullable": true,
            "example": "info-CZ@assecosol.com"
          },
          "email2": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Email - secondary",
            "nullable": true,
            "example": "info@assecosol.com"
          },
          "supplementaryName": {
            "maxLength": 80,
            "minLength": 0,
            "type": "string",
            "description": "A supplementary name",
            "nullable": true,
            "example": "Suppl. name"
          },
          "wwwAddress": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "World wide web address.",
            "nullable": true,
            "example": "www.assecosol.com"
          },
          "financialActivityStatus": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Status of financial activity.\r\nA - in activity, L - in liquidation, K - in bankruptcy, I - declared insolvent, S - in legal proceedings, N - unreliable, Z - ceased, P - pre-action proceedings, R - restructuring",
            "nullable": true,
            "example": "A"
          },
          "referenceName": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "Reference (short) name.",
            "nullable": true,
            "example": "Short name"
          },
          "vatPayer": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Is a VAT payer?\r\nA - Yes, N - No, 0 - Unspecified.",
            "nullable": true,
            "example": "A"
          },
          "vatPayerTo": {
            "type": "string",
            "description": "Payer of VAT to.",
            "format": "date-time",
            "nullable": true
          },
          "vatPayerFrom": {
            "type": "string",
            "description": "Payer of VAT from.",
            "format": "date-time",
            "nullable": true
          },
          "toBeChecked": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Is to be checked?\r\nA - Yes, N - No.",
            "nullable": true,
            "example": "A"
          },
          "customerOfType": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Customer of type: B - B2B, C - B2C, E - B2B SR, F - B2C SR, G - B2B HU",
            "nullable": true,
            "example": "B2B"
          },
          "orientationNumber": {
            "maxLength": 5,
            "minLength": 0,
            "type": "string",
            "description": "Orientation number",
            "nullable": true,
            "example": "12"
          },
          "streetNumber": {
            "maxLength": 5,
            "minLength": 0,
            "type": "string",
            "description": "Street number.",
            "nullable": true,
            "example": "1000"
          },
          "street": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Street name.",
            "nullable": true,
            "example": "Old Town Square"
          },
          "streetAddress": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Street address.",
            "nullable": true,
            "example": "Old Town Square 562"
          },
          "trackSecurity": {
            "maximum": 1,
            "minimum": 0,
            "type": "integer",
            "description": "Is the security of a company to be tracked?\r\n0 - No, 1 - Yes and compulsory for selected",
            "format": "int32",
            "example": 0
          },
          "countryId": {
            "type": "integer",
            "description": "Identifier of country.",
            "format": "int32",
            "nullable": true
          },
          "tinRegisterId": {
            "type": "integer",
            "description": "Identifier of a tin register.",
            "format": "int32",
            "nullable": true
          },
          "parentSubject": {
            "$ref": "#/components/schemas/RelatedRecordModelChange"
          },
          "folderId": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "Identifier of a folder where to create a record.\r\n0 means a default folder of the class/entity.",
            "format": "int32",
            "example": 1023
          },
          "reference": {
            "type": "string",
            "description": "Reference no. of record.",
            "nullable": true,
            "example": "X000000001"
          },
          "name": {
            "type": "string",
            "description": "Name of record.",
            "nullable": true,
            "example": "My name"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelChange"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfUserDefinedAttributeChange"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfForeignKeyRelationItemChange"
          }
        },
        "additionalProperties": false,
        "description": "Contract to create record of a company entity/class."
      },
      "CompanyResult": {
        "required": [
          "classId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Primary key of a location.",
            "format": "int32"
          },
          "tin": {
            "type": "string",
            "description": "TIN/VATIN – value added tax identification number",
            "nullable": true
          },
          "cin": {
            "type": "string",
            "description": "CIN – Company identification number",
            "nullable": true
          },
          "place": {
            "type": "string",
            "description": "Place",
            "nullable": true
          },
          "zip": {
            "type": "string",
            "description": "ZIP",
            "nullable": true
          },
          "poBox": {
            "type": "string",
            "description": "P.O. Box",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "Phone number.",
            "nullable": true
          },
          "mobilePhone": {
            "type": "string",
            "description": "Mobile phone number.",
            "nullable": true
          },
          "legalForm": {
            "type": "string",
            "description": "A legal form. Typically of a company. A ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.LegalFormResult.Code.",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "Status. \r\n1 - Potential, 2 - Active, 3 - Don't use, 4 - Passive, 5 - Approved, 6 - Non-approved",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Email - primary",
            "nullable": true
          },
          "email2": {
            "type": "string",
            "description": "Email - secondary",
            "nullable": true
          },
          "supplementaryName": {
            "type": "string",
            "description": "A supplementary name",
            "nullable": true
          },
          "wwwAddress": {
            "type": "string",
            "description": "World wide web address.",
            "nullable": true
          },
          "financialActivityStatus": {
            "type": "string",
            "description": "Status of financial activity.\r\nA - in activity, L - in liquidation, K - in bankruptcy, I - declared insolvent, S - in legal proceedings, N - unreliable, Z - ceased, P - pre-action proceedings, R - restructuring",
            "nullable": true
          },
          "referenceName": {
            "type": "string",
            "description": "Reference (short) name.",
            "nullable": true
          },
          "vatPayer": {
            "type": "string",
            "description": "Is a VAT payer?\r\nA - Yes, N - No, 0 - Unspecified.",
            "nullable": true
          },
          "vatPayerTo": {
            "type": "string",
            "description": "Payer of VAT to.",
            "format": "date-time",
            "nullable": true
          },
          "vatPayerFrom": {
            "type": "string",
            "description": "Payer of VAT from.",
            "format": "date-time",
            "nullable": true
          },
          "toBeChecked": {
            "type": "string",
            "description": "Is to be checked?\r\nA - Yes, N - No.",
            "nullable": true
          },
          "customerOfType": {
            "type": "string",
            "description": "Customer of type: B - B2B, C - B2C, E - B2B SR, F - B2C SR, G - B2B HU",
            "nullable": true
          },
          "orientationNumber": {
            "type": "string",
            "description": "Orientation number",
            "nullable": true
          },
          "streetNumber": {
            "type": "string",
            "description": "Street number.",
            "nullable": true
          },
          "street": {
            "type": "string",
            "description": "Street name.",
            "nullable": true
          },
          "streetAddress": {
            "type": "string",
            "description": "Street address.",
            "nullable": true
          },
          "trackSecurity": {
            "type": "integer",
            "description": "Is the security of a company to be tracked?\r\n0 - No, 1 - Yes and compulsory for selected",
            "format": "int32"
          },
          "countryId": {
            "type": "integer",
            "description": "Identifier of ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.CompanyResult.Country",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "country": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "tinRegisterId": {
            "type": "integer",
            "description": "Identifier of ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.CompanyResult.TinRegister",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "tinRegister": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "classId": {
            "type": "integer",
            "description": "Identifier of the class of the entity.",
            "format": "int32",
            "example": 1023
          },
          "className": {
            "type": "string",
            "description": "Localized name of an entity class. Optional.",
            "nullable": true,
            "example": "My class name"
          },
          "folderId": {
            "type": "integer",
            "description": "Identifier of the folder.",
            "format": "int32",
            "example": 123
          },
          "folderName": {
            "type": "string",
            "description": "Localized name of an entity folder. Optional.",
            "nullable": true,
            "example": "My folder name"
          },
          "lastUpdatedOn": {
            "type": "string",
            "description": "Gets or sets an entity last update date and time.\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "description": "Gets or sets date and time when entity was created .\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "Gets entity timestamp.",
            "nullable": true,
            "example": "00000000000117CB"
          },
          "gunid": {
            "type": "string",
            "description": "Global record identifier within several databases.\r\nThis value is generated by database on a back-end.",
            "nullable": true,
            "example": "00000K00001U00000P"
          },
          "createdById": {
            "type": "integer",
            "description": "Primary key of the creator of the entity/record.",
            "format": "int32",
            "nullable": true,
            "example": 69
          },
          "createdBy": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "lastUpdatedById": {
            "type": "integer",
            "description": "Primary key of the last updated user of the entity",
            "format": "int32",
            "nullable": true,
            "example": 69
          },
          "lastUpdatedBy": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelResult"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfIUserDefinedAttributeResult"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfIForeignKeyRelationItemResult"
          },
          "reference": {
            "type": "string",
            "description": "Reference no. of record.",
            "nullable": true,
            "example": "X0000001"
          },
          "name": {
            "type": "string",
            "description": "Name of record.",
            "nullable": true,
            "example": "Record name"
          }
        },
        "additionalProperties": false,
        "description": "Contract to create record of a Location entity."
      },
      "CompanyUpdate": {
        "type": "object",
        "properties": {
          "tin": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "TIN/VATIN – value added tax identification number",
            "nullable": true,
            "example": "CZ64949541"
          },
          "cin": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string",
            "description": "CIN – Company identification number",
            "nullable": true,
            "example": "64949541"
          },
          "place": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Place",
            "nullable": true,
            "example": "Prague"
          },
          "zip": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string",
            "description": "ZIP",
            "nullable": true,
            "example": "39143"
          },
          "poBox": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "P.O. Box",
            "nullable": true,
            "example": "P.O.Box 111"
          },
          "phone": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "Phone number.",
            "nullable": true,
            "example": "244104111"
          },
          "mobilePhone": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "Mobile phone number.",
            "nullable": true,
            "example": "000000000"
          },
          "legalForm": {
            "maxLength": 6,
            "minLength": 0,
            "type": "string",
            "description": "A legal form. Typically of a company. A ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.LegalFormResult.Code.",
            "nullable": true,
            "example": "AS"
          },
          "status": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Status. \r\n1 - Potential, 2 - Active, 3 - Don't use, 4 - Passive, 5 - Approved, 6 - Non-approved",
            "nullable": true,
            "example": "2"
          },
          "email": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Email - primary",
            "nullable": true,
            "example": "info-CZ@assecosol.com"
          },
          "email2": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Email - secondary",
            "nullable": true,
            "example": "info@assecosol.com"
          },
          "supplementaryName": {
            "maxLength": 80,
            "minLength": 0,
            "type": "string",
            "description": "A supplementary name",
            "nullable": true,
            "example": "Suppl. name"
          },
          "wwwAddress": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "World wide web address.",
            "nullable": true,
            "example": "www.assecosol.com"
          },
          "financialActivityStatus": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Status of financial activity.\r\nA - in activity, L - in liquidation, K - in bankruptcy, I - declared insolvent, S - in legal proceedings, N - unreliable, Z - ceased, P - pre-action proceedings, R - restructuring",
            "nullable": true,
            "example": "A"
          },
          "referenceName": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "Reference (short) name.",
            "nullable": true,
            "example": "Short name"
          },
          "vatPayer": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Is a VAT payer?\r\nA - Yes, N - No, 0 - Unspecified.",
            "nullable": true,
            "example": "A"
          },
          "vatPayerTo": {
            "type": "string",
            "description": "Payer of VAT to.",
            "format": "date-time",
            "nullable": true
          },
          "vatPayerFrom": {
            "type": "string",
            "description": "Payer of VAT from.",
            "format": "date-time",
            "nullable": true
          },
          "toBeChecked": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Is to be checked?\r\nA - Yes, N - No.",
            "nullable": true,
            "example": "A"
          },
          "customerOfType": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Customer of type: B - B2B, C - B2C, E - B2B SR, F - B2C SR, G - B2B HU",
            "nullable": true,
            "example": "B2B"
          },
          "orientationNumber": {
            "maxLength": 5,
            "minLength": 0,
            "type": "string",
            "description": "Orientation number",
            "nullable": true,
            "example": "12"
          },
          "streetNumber": {
            "maxLength": 5,
            "minLength": 0,
            "type": "string",
            "description": "Street number.",
            "nullable": true,
            "example": "1000"
          },
          "street": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Street name.",
            "nullable": true,
            "example": "Old Town Square"
          },
          "streetAddress": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Street address.",
            "nullable": true,
            "example": "Old Town Square 562"
          },
          "trackSecurity": {
            "maximum": 1,
            "minimum": 0,
            "type": "integer",
            "description": "Is the security of a company to be tracked?\r\n0 - No, 1 - Yes and compulsory for selected",
            "format": "int32",
            "example": 0
          },
          "countryId": {
            "type": "integer",
            "description": "Identifier of country.",
            "format": "int32",
            "nullable": true
          },
          "tinRegisterId": {
            "type": "integer",
            "description": "Identifier of a tin register.",
            "format": "int32",
            "nullable": true
          },
          "parentSubject": {
            "$ref": "#/components/schemas/RelatedRecordModelChange"
          },
          "reference": {
            "type": "string",
            "description": "Reference no. of record.",
            "nullable": true,
            "example": "X000000001"
          },
          "name": {
            "type": "string",
            "description": "Name of record.",
            "nullable": true,
            "example": "My name"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelChange"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfUserDefinedAttributeChange"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfForeignKeyRelationItemChange"
          }
        },
        "additionalProperties": false,
        "description": "Contract to create record of a company entity/class."
      },
      "ContactPersonResult": {
        "required": [
          "classId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Primary key of a location.",
            "format": "int32"
          },
          "firstName": {
            "type": "string",
            "description": "First name of the person.",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the person.",
            "nullable": true
          },
          "state": {
            "type": "string",
            "description": "The state of a person - see ASOL.WebAPI.App.MIM.Contracts.PersonState.",
            "nullable": true
          },
          "personDisplayValue": {
            "type": "string",
            "description": "Display value of the person.",
            "nullable": true
          },
          "classId": {
            "type": "integer",
            "description": "Identifier of the class of the entity.",
            "format": "int32",
            "example": 1023
          },
          "className": {
            "type": "string",
            "description": "Localized name of an entity class. Optional.",
            "nullable": true,
            "example": "My class name"
          },
          "folderId": {
            "type": "integer",
            "description": "Identifier of the folder.",
            "format": "int32",
            "example": 123
          },
          "folderName": {
            "type": "string",
            "description": "Localized name of an entity folder. Optional.",
            "nullable": true,
            "example": "My folder name"
          },
          "lastUpdatedOn": {
            "type": "string",
            "description": "Gets or sets an entity last update date and time.\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "description": "Gets or sets date and time when entity was created .\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "Gets entity timestamp.",
            "nullable": true,
            "example": "00000000000117CB"
          },
          "gunid": {
            "type": "string",
            "description": "Global record identifier within several databases.\r\nThis value is generated by database on a back-end.",
            "nullable": true,
            "example": "00000K00001U00000P"
          },
          "createdById": {
            "type": "integer",
            "description": "Primary key of the creator of the entity/record.",
            "format": "int32",
            "nullable": true,
            "example": 69
          },
          "createdBy": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "lastUpdatedById": {
            "type": "integer",
            "description": "Primary key of the last updated user of the entity",
            "format": "int32",
            "nullable": true,
            "example": 69
          },
          "lastUpdatedBy": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelResult"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfIUserDefinedAttributeResult"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfIForeignKeyRelationItemResult"
          },
          "reference": {
            "type": "string",
            "description": "Reference no. of record.",
            "nullable": true,
            "example": "X0000001"
          },
          "name": {
            "type": "string",
            "description": "Name of record.",
            "nullable": true,
            "example": "Record name"
          }
        },
        "additionalProperties": false,
        "description": "A result contract for contact persons."
      },
      "CounterpartSubBranchCreate": {
        "required": [
          "folderId"
        ],
        "type": "object",
        "properties": {
          "street": {
            "type": "string",
            "description": "Street name",
            "nullable": true,
            "example": "Old Town Square"
          },
          "place": {
            "type": "string",
            "description": "Place",
            "nullable": true,
            "example": "Prague"
          },
          "zip": {
            "type": "string",
            "description": "ZIP",
            "nullable": true,
            "example": "39143"
          },
          "streetNumber": {
            "type": "string",
            "description": "Street number",
            "nullable": true,
            "example": "1000"
          },
          "orientationNumber": {
            "type": "string",
            "description": "Orientation number",
            "nullable": true,
            "example": "12"
          },
          "orientationNumberCharacter": {
            "type": "string",
            "description": "Character of an orientation number.",
            "nullable": true,
            "example": "A"
          },
          "email": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "E-mail address",
            "nullable": true,
            "example": "info-CZ@assecosol.com"
          },
          "phone": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "Phone number.",
            "nullable": true,
            "example": "+420244104111"
          },
          "companyId": {
            "type": "integer",
            "description": "Identifier of Company",
            "format": "int32",
            "nullable": true
          },
          "countryId": {
            "type": "integer",
            "description": "Identifier of Country",
            "format": "int32",
            "nullable": true
          },
          "folderId": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "Identifier of a folder where to create a record.\r\n0 means a default folder of the class/entity.",
            "format": "int32",
            "example": 1023
          },
          "reference": {
            "type": "string",
            "description": "Reference no. of record.",
            "nullable": true,
            "example": "X000000001"
          },
          "name": {
            "type": "string",
            "description": "Name of record.",
            "nullable": true,
            "example": "My name"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelChange"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfUserDefinedAttributeChange"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfForeignKeyRelationItemChange"
          }
        },
        "additionalProperties": false,
        "description": "Contract to create record of a counterpart sub-branch entity/class."
      },
      "CounterpartSubBranchResult": {
        "required": [
          "classId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Primary key of a location.",
            "format": "int32"
          },
          "streetAddress": {
            "type": "string",
            "description": "A cumulative street address, which is composed from ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.CounterpartSubBranchResult.Street, ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.CounterpartSubBranchResult.StreetNumber, ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.CounterpartSubBranchResult.OrientationNumber a ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.CounterpartSubBranchResult.OrientationNumberCharacter.",
            "nullable": true
          },
          "street": {
            "type": "string",
            "description": "Street",
            "nullable": true
          },
          "place": {
            "type": "string",
            "description": "Street",
            "nullable": true
          },
          "zip": {
            "type": "string",
            "description": "ZIP",
            "nullable": true,
            "example": "39143"
          },
          "streetNumber": {
            "type": "string",
            "description": "Street number",
            "nullable": true
          },
          "orientationNumber": {
            "type": "string",
            "description": "Orientation number",
            "nullable": true
          },
          "orientationNumberCharacter": {
            "type": "string",
            "description": "Character of an orientation number.",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "E-mail address",
            "nullable": true,
            "example": "info-CZ@assecosol.com"
          },
          "phone": {
            "type": "string",
            "description": "Phone number.",
            "nullable": true,
            "example": "+420244104111"
          },
          "companyId": {
            "type": "integer",
            "description": "Identifier of ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.CounterpartSubBranchResult.Company",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "company": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "countryId": {
            "type": "integer",
            "description": "Identifier of ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.CounterpartSubBranchResult.Country",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "country": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "classId": {
            "type": "integer",
            "description": "Identifier of the class of the entity.",
            "format": "int32",
            "example": 1023
          },
          "className": {
            "type": "string",
            "description": "Localized name of an entity class. Optional.",
            "nullable": true,
            "example": "My class name"
          },
          "folderId": {
            "type": "integer",
            "description": "Identifier of the folder.",
            "format": "int32",
            "example": 123
          },
          "folderName": {
            "type": "string",
            "description": "Localized name of an entity folder. Optional.",
            "nullable": true,
            "example": "My folder name"
          },
          "lastUpdatedOn": {
            "type": "string",
            "description": "Gets or sets an entity last update date and time.\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "description": "Gets or sets date and time when entity was created .\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "Gets entity timestamp.",
            "nullable": true,
            "example": "00000000000117CB"
          },
          "gunid": {
            "type": "string",
            "description": "Global record identifier within several databases.\r\nThis value is generated by database on a back-end.",
            "nullable": true,
            "example": "00000K00001U00000P"
          },
          "createdById": {
            "type": "integer",
            "description": "Primary key of the creator of the entity/record.",
            "format": "int32",
            "nullable": true,
            "example": 69
          },
          "createdBy": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "lastUpdatedById": {
            "type": "integer",
            "description": "Primary key of the last updated user of the entity",
            "format": "int32",
            "nullable": true,
            "example": 69
          },
          "lastUpdatedBy": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelResult"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfIUserDefinedAttributeResult"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfIForeignKeyRelationItemResult"
          },
          "reference": {
            "type": "string",
            "description": "Reference no. of record.",
            "nullable": true,
            "example": "X0000001"
          },
          "name": {
            "type": "string",
            "description": "Name of record.",
            "nullable": true,
            "example": "Record name"
          }
        },
        "additionalProperties": false,
        "description": "Contract to get a data of counterpart sub-branch record."
      },
      "CounterpartSubBranchUpdate": {
        "type": "object",
        "properties": {
          "street": {
            "type": "string",
            "description": "Street name",
            "nullable": true,
            "example": "Old Town Square"
          },
          "place": {
            "type": "string",
            "description": "Place",
            "nullable": true,
            "example": "Prague"
          },
          "zip": {
            "type": "string",
            "description": "ZIP",
            "nullable": true,
            "example": "39143"
          },
          "streetNumber": {
            "type": "string",
            "description": "Street number",
            "nullable": true,
            "example": "1000"
          },
          "orientationNumber": {
            "type": "string",
            "description": "Orientation number",
            "nullable": true,
            "example": "12"
          },
          "orientationNumberCharacter": {
            "type": "string",
            "description": "Character of an orientation number.",
            "nullable": true,
            "example": "A"
          },
          "email": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "E-mail address",
            "nullable": true,
            "example": "info-CZ@assecosol.com"
          },
          "phone": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "Phone number.",
            "nullable": true,
            "example": "+420244104111"
          },
          "companyId": {
            "type": "integer",
            "description": "Identifier of Company",
            "format": "int32",
            "nullable": true
          },
          "countryId": {
            "type": "integer",
            "description": "Identifier of Country",
            "format": "int32",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "description": "Reference no. of record.",
            "nullable": true,
            "example": "X000000001"
          },
          "name": {
            "type": "string",
            "description": "Name of record.",
            "nullable": true,
            "example": "My name"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelChange"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfUserDefinedAttributeChange"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfForeignKeyRelationItemChange"
          }
        },
        "additionalProperties": false,
        "description": "Contract to update record of a counterpart sub-branch entity/class."
      },
      "CountryCreate": {
        "required": [
          "folderId"
        ],
        "type": "object",
        "properties": {
          "abridgedCZName": {
            "type": "string",
            "description": "An abridged name of a country in Czech.",
            "nullable": true
          },
          "abridgedENName": {
            "type": "string",
            "description": "An abridged name of a country in English.",
            "nullable": true
          },
          "fullCZName": {
            "type": "string",
            "description": "A full name of a country in Czech.",
            "nullable": true
          },
          "fullENName": {
            "type": "string",
            "description": "A full name of a country in English.",
            "nullable": true
          },
          "isoCode": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "ISO code of a country (A-2).",
            "nullable": true
          },
          "implicitLanguageId": {
            "type": "integer",
            "description": "Identifier of an implicit language.",
            "format": "int32",
            "nullable": true
          },
          "nationalCurrencyId": {
            "type": "integer",
            "description": "Identifier of a national currency of a country.",
            "format": "int32",
            "nullable": true
          },
          "folderId": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "Identifier of a folder where to create a record.\r\n0 means a default folder of the class/entity.",
            "format": "int32",
            "example": 1023
          },
          "reference": {
            "type": "string",
            "description": "Reference no. of record.",
            "nullable": true,
            "example": "X000000001"
          },
          "name": {
            "type": "string",
            "description": "Name of record.",
            "nullable": true,
            "example": "My name"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelChange"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfUserDefinedAttributeChange"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfForeignKeyRelationItemChange"
          }
        },
        "additionalProperties": false,
        "description": "Contract to create record of the Country entity."
      },
      "CountryResult": {
        "required": [
          "classId"
        ],
        "type": "object",
        "properties": {
          "abridgedCZName": {
            "type": "string",
            "description": "An abridged name of a country in Czech.",
            "nullable": true
          },
          "abridgedENName": {
            "type": "string",
            "description": "An abridged name of a country in English.",
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "description": "A full name of a country.",
            "nullable": true
          },
          "fullCZName": {
            "type": "string",
            "description": "A full name of a country in Czech.",
            "nullable": true
          },
          "fullENName": {
            "type": "string",
            "description": "A full name of a country in English.",
            "nullable": true
          },
          "isoCode": {
            "type": "string",
            "description": "ISO code of a country (A-2).",
            "nullable": true
          },
          "implicitLanguageId": {
            "type": "integer",
            "description": "Identifier of an implicit language.",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "implicitLanguage": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "nationalCurrencyId": {
            "type": "integer",
            "description": "Identifier of a national currency of a country.",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "nationalCurrency": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "id": {
            "type": "integer",
            "description": "Identifier (PK) of a record.",
            "format": "int32",
            "example": 1
          },
          "classId": {
            "type": "integer",
            "description": "Identifier of the class of the entity.",
            "format": "int32",
            "example": 1023
          },
          "className": {
            "type": "string",
            "description": "Localized name of an entity class. Optional.",
            "nullable": true,
            "example": "My class name"
          },
          "folderId": {
            "type": "integer",
            "description": "Identifier of the folder.",
            "format": "int32",
            "example": 123
          },
          "folderName": {
            "type": "string",
            "description": "Localized name of an entity folder. Optional.",
            "nullable": true,
            "example": "My folder name"
          },
          "lastUpdatedOn": {
            "type": "string",
            "description": "Gets or sets an entity last update date and time.\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "description": "Gets or sets date and time when entity was created .\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "Gets entity timestamp.",
            "nullable": true,
            "example": "00000000000117CB"
          },
          "gunid": {
            "type": "string",
            "description": "Global record identifier within several databases.\r\nThis value is generated by database on a back-end.",
            "nullable": true,
            "example": "00000K00001U00000P"
          },
          "createdById": {
            "type": "integer",
            "description": "Primary key of the creator of the entity/record.",
            "format": "int32",
            "nullable": true,
            "example": 69
          },
          "createdBy": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "lastUpdatedById": {
            "type": "integer",
            "description": "Primary key of the last updated user of the entity",
            "format": "int32",
            "nullable": true,
            "example": 69
          },
          "lastUpdatedBy": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelResult"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfIUserDefinedAttributeResult"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfIForeignKeyRelationItemResult"
          },
          "reference": {
            "type": "string",
            "description": "Reference no. of record.",
            "nullable": true,
            "example": "X0000001"
          },
          "name": {
            "type": "string",
            "description": "Name of record.",
            "nullable": true,
            "example": "Record name"
          }
        },
        "additionalProperties": false,
        "description": "A result contract for the Country entity."
      },
      "CountryUpdate": {
        "type": "object",
        "properties": {
          "abridgedCZName": {
            "type": "string",
            "description": "An abridged name of a country in Czech.",
            "nullable": true
          },
          "abridgedENName": {
            "type": "string",
            "description": "An abridged name of a country in English.",
            "nullable": true
          },
          "fullCZName": {
            "type": "string",
            "description": "A full name of a country in Czech.",
            "nullable": true
          },
          "fullENName": {
            "type": "string",
            "description": "A full name of a country in English.",
            "nullable": true
          },
          "implicitLanguageId": {
            "type": "integer",
            "description": "Identifier of an implicit language.",
            "format": "int32",
            "nullable": true
          },
          "nationalCurrencyId": {
            "type": "integer",
            "description": "Identifier of a national currency of a country.",
            "format": "int32",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "description": "Reference no. of record.",
            "nullable": true,
            "example": "X000000001"
          },
          "name": {
            "type": "string",
            "description": "Name of record.",
            "nullable": true,
            "example": "My name"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelChange"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfUserDefinedAttributeChange"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfForeignKeyRelationItemChange"
          }
        },
        "additionalProperties": false
      },
      "CurrentRecordPeriodResult": {
        "type": "object",
        "properties": {
          "calendar": {
            "$ref": "#/components/schemas/RecordPeriodItemResult"
          },
          "accounting": {
            "$ref": "#/components/schemas/RecordPeriodItemResult"
          },
          "custom": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomRecordPeriodItemResult"
            },
            "description": "An accounting periods that is active for a current session.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Periods that are active for a current session."
      },
      "CustomRecordPeriodItemResult": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "description": "Kind of a custom period.",
            "nullable": true,
            "example": "HumanResource"
          },
          "code": {
            "type": "string",
            "description": "Reference code of period",
            "nullable": true,
            "example": "1.12.2005"
          },
          "name": {
            "type": "string",
            "description": "Display name of period (e.g. Accounting period)",
            "nullable": true,
            "example": "Human resources period"
          },
          "id": {
            "type": "string",
            "description": "Value of a custom period.",
            "nullable": true,
            "example": "1.12.2005"
          }
        },
        "additionalProperties": false,
        "description": "Information about a period."
      },
      "CustomerOrderCreate": {
        "required": [
          "folderId"
        ],
        "type": "object",
        "properties": {
          "totalPrice": {
            "type": "number",
            "description": "Total price in document.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "totalCurrencyPrice": {
            "type": "number",
            "description": "Total currency price in document.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "date": {
            "type": "string",
            "description": "Date of document.",
            "format": "date-time",
            "nullable": true
          },
          "implementationDate": {
            "type": "string",
            "description": "Implementation date.",
            "format": "date-time",
            "nullable": true
          },
          "documentType": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "<br>\r\n            Type of document.\r\n            \r\n<br>\r\n  <list type=\"table\">\r\n    <item>1 - Receiving record</item>\r\n    <item>2 - Issue slip</item>\r\n    <item>3 - Order</item>\r\n    <item>4 - Demand</item>\r\n    <item>5 - Confirmed order</item>\r\n    <item>6 - Reservation </item>\r\n    <item>7 - Valuation variance </item>\r\n    <item>8 - Dissolution of variance </item>\r\n    <item>0 - Inventory </item>\r\n    <item>T - W2W form </item>\r\n    <item>S - List of items </item>\r\n    <item>Z - Framework customer order </item>\r\n    <item>D - Framework supplier order </item>\r\n    <item>R - Transfer purchase order </item>\r\n  </list>\r\n",
            "nullable": true,
            "example": "4"
          },
          "paymentType": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "<br>\r\n            Type of payment.\r\n            \r\n<br>\r\n  <list type=\"table\">\r\n    <item>P - Payment order</item>\r\n    <item>S - Post.order</item>\r\n    <item>H - In cash</item>\r\n    <item>K - Compensation</item>\r\n    <item>I - Collect.</item>\r\n    <item>D - C.O.D. </item>\r\n    <item>B - Bill of exch.</item>\r\n    <item>L - Plan </item>\r\n    <item>A - By paym.card</item>\r\n    <item>R - Adv.payment</item>\r\n    <item>T - Letter of credit</item>\r\n    <item>O - SIPO (joint collection of payments from inhabitants)</item>\r\n    <item>Z - Voucher (gift certificate)</item>\r\n    <item>C - Delivery note</item>\r\n    <item>J - Other</item>\r\n    <item>N - Personal account</item>\r\n    <item>F - Factoring</item>\r\n  </list>\r\n",
            "nullable": true,
            "example": "A"
          },
          "userStatus": {
            "type": "string",
            "description": "A user (customer) state of a customer order.\r\nThe value is defined variably and it can be any value according to requests of a concrete implementation.\r\nAsk your customer to get possible values.",
            "nullable": true,
            "example": "Values are defined by a concrete customer."
          },
          "isInForeignCurrency": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Is a document in a foreign currency? If ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.CustomerOrderCreate.Currency is not specified, you should not specify this property too.\r\nA - Yes, N - No.",
            "nullable": true,
            "example": "N"
          },
          "currency": {
            "maxLength": 3,
            "minLength": 1,
            "type": "string",
            "description": "A code of currency. \r\nDon't specify for a default currency code.",
            "nullable": true,
            "example": "EUR"
          },
          "note": {
            "type": "string",
            "description": "Note of item.",
            "nullable": true
          },
          "warehouseId": {
            "type": "integer",
            "description": "Identifier of Warehouse",
            "format": "int32",
            "nullable": true
          },
          "customerId": {
            "type": "integer",
            "description": "Identifier of a Customer.",
            "format": "int32",
            "nullable": true
          },
          "branchOfficeId": {
            "type": "integer",
            "description": "Identifier of a branch office/sub-branche office.",
            "format": "int32",
            "nullable": true
          },
          "transportMethodId": {
            "type": "integer",
            "description": "Identifier of a transport method.",
            "format": "int32",
            "nullable": true
          },
          "transportTypeId": {
            "type": "integer",
            "description": "Identifier of a transport type.",
            "format": "int32",
            "nullable": true
          },
          "warehouseTransactionTypeId": {
            "type": "integer",
            "description": "Identifier of a warehouse transaction type.",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerOrderItemCreate"
            },
            "description": "Items of records. Optional.",
            "nullable": true
          },
          "folderId": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "Identifier of a folder where to create a record.\r\n0 means a default folder of the class/entity.",
            "format": "int32",
            "example": 1023
          },
          "reference": {
            "type": "string",
            "description": "Reference no. of record.",
            "nullable": true,
            "example": "X000000001"
          },
          "name": {
            "type": "string",
            "description": "Name of record.",
            "nullable": true,
            "example": "My name"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelChange"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfUserDefinedAttributeChange"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfForeignKeyRelationItemChange"
          }
        },
        "additionalProperties": false,
        "description": "Contract to create a record of a customer order entity."
      },
      "CustomerOrderItemCreate": {
        "type": "object",
        "properties": {
          "externalNumber": {
            "type": "string",
            "description": "External number",
            "nullable": true,
            "example": "EN0001"
          },
          "itemType": {
            "type": "string",
            "description": "<br>\r\n            Type of item.\r\n            \r\n<br>\r\n  <list type=\"table\">\r\n    <item>1 - Receiving record</item>\r\n    <item>2 - Issue slip</item>\r\n    <item>3 - Order</item>\r\n    <item>4 - Demand</item>\r\n    <item>5 - Confirmed order</item>\r\n    <item>6 - Reservation </item>\r\n    <item>7 - Valuation variance </item>\r\n    <item>8 - Dissolution of variance </item>\r\n    <item>0 - Inventory </item>\r\n    <item>T - W2W form </item>\r\n    <item>S - List of items </item>\r\n    <item>Z - Framework customer order </item>\r\n    <item>D - Framework supplier order </item>\r\n    <item>R - Transfer purchase order </item>\r\n  </list>\r\n",
            "nullable": true,
            "example": "4"
          },
          "itemDate": {
            "type": "string",
            "description": "Date of document item.",
            "format": "date-time",
            "nullable": true
          },
          "totalPrice": {
            "type": "number",
            "description": "Total price in a document item.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "totalCurrencyPrice": {
            "type": "number",
            "description": "Total currency price in a document item.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "basicPrice": {
            "type": "number",
            "description": "Basic price in a document item.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "basicCurrencyPrice": {
            "type": "number",
            "description": "Basic currency price in a document item.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "totalVat": {
            "type": "number",
            "description": "VAT in a document item.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "totalCurrencyVat": {
            "type": "number",
            "description": "Currency VAT in a document item.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "unitPrice": {
            "type": "number",
            "description": "A price for a unit.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "unitCurrencyPrice": {
            "type": "number",
            "description": "A currency price for a unit.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "quantityInUnit": {
            "type": "number",
            "description": "A quantity in a unit.",
            "format": "double",
            "nullable": true,
            "example": 1
          },
          "vatCode": {
            "type": "string",
            "description": "A code of VAT.",
            "nullable": true,
            "example": "NUTZ"
          },
          "vatRate": {
            "type": "number",
            "description": "A rate of VAT.\r\nIt should be specified if ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.CustomerOrderItemCreate.VatCode is not.",
            "format": "double",
            "nullable": true,
            "example": 21
          },
          "priceLock": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Should be a price on item locked for a recalculation?\r\nA - Yes, N - No.",
            "nullable": true,
            "example": "N"
          },
          "isInForeignCurrency": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Is an item in a foreign currency? If ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.CustomerOrderItemCreate.Currency is not specified, you should not specify this property too.\r\nA - Yes, N - No.",
            "nullable": true,
            "example": "N"
          },
          "currency": {
            "maxLength": 3,
            "minLength": 1,
            "type": "string",
            "description": "A code of currency. \r\nDon't specify for a default currency code.",
            "nullable": true,
            "example": "EUR"
          },
          "note": {
            "type": "string",
            "description": "Note of item.",
            "nullable": true
          },
          "sourceId": {
            "type": "integer",
            "description": "Identifier of Source.",
            "format": "int32",
            "nullable": true
          },
          "warehouseId": {
            "type": "integer",
            "description": "Identifier of Warehouse",
            "format": "int32",
            "nullable": true
          },
          "customerId": {
            "type": "integer",
            "description": "Identifier of Customer",
            "format": "int32",
            "nullable": true
          },
          "warehouseTransactionTypeId": {
            "type": "integer",
            "description": "Identifier of a warehouse transaction type.",
            "format": "int32",
            "nullable": true
          },
          "measureUnitId": {
            "type": "integer",
            "description": "Unit of measure",
            "format": "int32",
            "nullable": true
          },
          "itemId": {
            "type": "integer",
            "description": "Identifier of an item for a main record. \r\nIn fact, it is an identity db identifier of the item. \r\nIt can be zero or less then zero for items to insert (or you can omit it in a contract at all). \r\nIn this cases, new item will be generated.\r\nIf you specify the item identifier, the item will be updated by values in a contract .\r\nIf you specify the item identifier and you set the ASOL.Nephrite.WebAPI.Contracts.ItemModelChangeBase.Action to ASOL.Nephrite.WebAPI.Contracts.ItemAction.Delete, the item will deleted.",
            "format": "int32"
          },
          "rowOrdinalNumber": {
            "type": "integer",
            "description": "Row ordinal number.",
            "format": "int32"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelChange"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfUserDefinedAttributeChange"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfForeignKeyRelationItemChange"
          }
        },
        "additionalProperties": false,
        "description": "Contract to create an item of record of a general customer order."
      },
      "CustomerOrderItemResult": {
        "required": [
          "itemId",
          "rowOrdinalNumber"
        ],
        "type": "object",
        "properties": {
          "externalNumber": {
            "type": "string",
            "description": "External number",
            "nullable": true
          },
          "itemType": {
            "type": "string",
            "description": "Type of item.",
            "nullable": true
          },
          "itemDate": {
            "type": "string",
            "description": "Date of document item.",
            "format": "date-time",
            "nullable": true
          },
          "totalPrice": {
            "type": "number",
            "description": "Total price in a document item.",
            "format": "double",
            "nullable": true
          },
          "totalCurrencyPrice": {
            "type": "number",
            "description": "Total currency price in a document item.",
            "format": "double",
            "nullable": true
          },
          "basicPrice": {
            "type": "number",
            "description": "Basic price in a document item.",
            "format": "double",
            "nullable": true
          },
          "basicCurrencyPrice": {
            "type": "number",
            "description": "Basic currency price in a document item.",
            "format": "double",
            "nullable": true
          },
          "totalVat": {
            "type": "number",
            "description": "VAT in a document item.",
            "format": "double",
            "nullable": true
          },
          "totalCurrencyVat": {
            "type": "number",
            "description": "Currency VAT in a document item.",
            "format": "double",
            "nullable": true
          },
          "unitPrice": {
            "type": "number",
            "description": "A price for a unit.",
            "format": "double",
            "nullable": true
          },
          "unitCurrencyPrice": {
            "type": "number",
            "description": "A currency price for a unit.",
            "format": "double",
            "nullable": true
          },
          "quantityInUnit": {
            "type": "number",
            "description": "A quantity in a unit.",
            "format": "double",
            "nullable": true,
            "example": 1
          },
          "vatCode": {
            "type": "string",
            "description": "A code of VAT.",
            "nullable": true,
            "example": "NUTZ"
          },
          "vatRate": {
            "type": "number",
            "description": "A rate of VAT.\r\nIt should be specified if ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.CustomerOrderItemResult.VatCode is not.",
            "format": "double",
            "nullable": true,
            "example": 21
          },
          "priceLock": {
            "type": "string",
            "description": "Is a price on item locked for a recalculation?\r\nA - Yes, N - No.",
            "nullable": true,
            "example": "N"
          },
          "isInForeignCurrency": {
            "type": "string",
            "description": "Is an item in a foreign currency? \r\nA - Yes, N - No.",
            "nullable": true,
            "example": "N"
          },
          "currency": {
            "type": "string",
            "description": "A code of currency.",
            "nullable": true,
            "example": "EUR"
          },
          "note": {
            "type": "string",
            "description": "Note of item.",
            "nullable": true
          },
          "sourceId": {
            "type": "integer",
            "description": "Identifier of ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.CustomerOrderItemResult.Source",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "source": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "warehouseId": {
            "type": "integer",
            "description": "Identifier of ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.CustomerOrderItemResult.Warehouse",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "warehouse": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "customerId": {
            "type": "integer",
            "description": "Identifier of ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.CustomerOrderItemResult.Customer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "customer": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "warehouseTransactionTypeId": {
            "type": "integer",
            "description": "Identifier of a warehouse transaction type.",
            "format": "int32",
            "nullable": true
          },
          "warehouseTransactionType": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "measureUnitId": {
            "type": "integer",
            "description": "Identifier of ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.CustomerOrderItemResult.MeasureUnit",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "measureUnit": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelResult"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfIUserDefinedAttributeResult"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfIForeignKeyRelationItemResult"
          },
          "itemId": {
            "type": "integer",
            "description": "Identifier of item in a record.",
            "format": "int32"
          },
          "rowOrdinalNumber": {
            "type": "integer",
            "description": "Row ordinal number.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CustomerOrderItemUpdate": {
        "type": "object",
        "properties": {
          "externalNumber": {
            "type": "string",
            "description": "External number",
            "nullable": true,
            "example": "EN0001"
          },
          "itemType": {
            "type": "string",
            "description": "<br>\r\n            Type of item.\r\n            \r\n<br>\r\n  <list type=\"table\">\r\n    <item>1 - Receiving record</item>\r\n    <item>2 - Issue slip</item>\r\n    <item>3 - Order</item>\r\n    <item>4 - Demand</item>\r\n    <item>5 - Confirmed order</item>\r\n    <item>6 - Reservation </item>\r\n    <item>7 - Valuation variance </item>\r\n    <item>8 - Dissolution of variance </item>\r\n    <item>0 - Inventory </item>\r\n    <item>T - W2W form </item>\r\n    <item>S - List of items </item>\r\n    <item>Z - Framework customer order </item>\r\n    <item>D - Framework supplier order </item>\r\n    <item>R - Transfer purchase order </item>\r\n  </list>\r\n",
            "nullable": true,
            "example": "4"
          },
          "itemDate": {
            "type": "string",
            "description": "Date of document item.",
            "format": "date-time",
            "nullable": true
          },
          "totalPrice": {
            "type": "number",
            "description": "Total price in a document item.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "totalCurrencyPrice": {
            "type": "number",
            "description": "Total currency price in a document item.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "basicPrice": {
            "type": "number",
            "description": "Basic price in a document item.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "basicCurrencyPrice": {
            "type": "number",
            "description": "Basic currency price in a document item.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "totalVat": {
            "type": "number",
            "description": "VAT in a document item.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "totalCurrencyVat": {
            "type": "number",
            "description": "Currency VAT in a document item.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "unitPrice": {
            "type": "number",
            "description": "A price for a unit.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "unitCurrencyPrice": {
            "type": "number",
            "description": "A currency price for a unit.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "quantityInUnit": {
            "type": "number",
            "description": "A quantity in a unit.",
            "format": "double",
            "nullable": true,
            "example": 1
          },
          "vatCode": {
            "type": "string",
            "description": "A code of VAT.",
            "nullable": true,
            "example": "NUTZ"
          },
          "vatRate": {
            "type": "number",
            "description": "A rate of VAT.\r\nIt should be specified if ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.CustomerOrderItemUpdate.VatCode is not.",
            "format": "double",
            "nullable": true,
            "example": 21
          },
          "priceLock": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Should be a price on item locked for a recalculation?\r\nA - Yes, N - No.",
            "nullable": true,
            "example": "N"
          },
          "isInForeignCurrency": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Is an item in a foreign currency? If ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.CustomerOrderItemUpdate.Currency is not specified, you should not specify this property too.\r\nA - Yes, N - No.",
            "nullable": true,
            "example": "N"
          },
          "currency": {
            "maxLength": 3,
            "minLength": 1,
            "type": "string",
            "description": "A code of currency. \r\nDon't specify for a default currency code.",
            "nullable": true,
            "example": "EUR"
          },
          "note": {
            "type": "string",
            "description": "Note of item.",
            "nullable": true
          },
          "sourceId": {
            "type": "integer",
            "description": "Identifier of Source.",
            "format": "int32",
            "nullable": true
          },
          "warehouseId": {
            "type": "integer",
            "description": "Identifier of Warehouse",
            "format": "int32",
            "nullable": true
          },
          "customerId": {
            "type": "integer",
            "description": "Identifier of Customer",
            "format": "int32",
            "nullable": true
          },
          "warehouseTransactionTypeId": {
            "type": "integer",
            "description": "Identifier of a warehouse transaction type.",
            "format": "int32",
            "nullable": true
          },
          "measureUnitId": {
            "type": "integer",
            "description": "Unit of measure",
            "format": "int32",
            "nullable": true
          },
          "action": {
            "$ref": "#/components/schemas/ItemAction"
          },
          "itemId": {
            "type": "integer",
            "description": "Identifier of an item for a main record. \r\nIn fact, it is an identity db identifier of the item. \r\nIt can be zero or less then zero for items to insert (or you can omit it in a contract at all). \r\nIn this cases, new item will be generated.\r\nIf you specify the item identifier, the item will be updated by values in a contract .\r\nIf you specify the item identifier and you set the ASOL.Nephrite.WebAPI.Contracts.ItemModelChangeBase.Action to ASOL.Nephrite.WebAPI.Contracts.ItemAction.Delete, the item will deleted.",
            "format": "int32"
          },
          "rowOrdinalNumber": {
            "type": "integer",
            "description": "Row ordinal number.",
            "format": "int32"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelChange"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfUserDefinedAttributeChange"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfForeignKeyRelationItemChange"
          }
        },
        "additionalProperties": false,
        "description": "Contract to update an item of record of a customer order entity."
      },
      "CustomerOrderResult": {
        "required": [
          "classId"
        ],
        "type": "object",
        "properties": {
          "totalPrice": {
            "type": "number",
            "description": "Total price in document.",
            "format": "double",
            "nullable": true
          },
          "totalCurrencyPrice": {
            "type": "number",
            "description": "Total currency price in document.",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "Date of document.",
            "format": "date-time",
            "nullable": true
          },
          "implementationDate": {
            "type": "string",
            "description": "Implementation date.",
            "format": "date-time",
            "nullable": true
          },
          "documentType": {
            "type": "string",
            "description": "<br>\r\n            Type of document.\r\n            \r\n<br>\r\n  <list type=\"table\">\r\n    <item>1 - Receiving record</item>\r\n    <item>2 - Issue slip</item>\r\n    <item>3 - Order</item>\r\n    <item>4 - Demand</item>\r\n    <item>5 - Confirmed order</item>\r\n    <item>6 - Reservation </item>\r\n    <item>7 - Valuation variance </item>\r\n    <item>8 - Dissolution of variance </item>\r\n    <item>0 - Inventory </item>\r\n    <item>T - W2W form </item>\r\n    <item>S - List of items </item>\r\n    <item>Z - Framework customer order </item>\r\n    <item>D - Framework supplier order </item>\r\n    <item>R - Transfer purchase order </item>\r\n  </list>\r\n",
            "nullable": true
          },
          "paymentType": {
            "type": "string",
            "description": "<br>\r\n            Type of payment.\r\n            \r\n<br>\r\n  <list type=\"table\">\r\n    <item>P - Payment order</item>\r\n    <item>S - Post.order</item>\r\n    <item>H - In cash</item>\r\n    <item>K - Compensation</item>\r\n    <item>I - Collect.</item>\r\n    <item>D - C.O.D. </item>\r\n    <item>B - Bill of exch.</item>\r\n    <item>L - Plan </item>\r\n    <item>A - By paym.card</item>\r\n    <item>R - Adv.payment</item>\r\n    <item>T - Letter of credit</item>\r\n    <item>O - SIPO (joint collection of payments from inhabitants)</item>\r\n    <item>Z - Voucher (gift certificate)</item>\r\n    <item>C - Delivery note</item>\r\n    <item>J - Other</item>\r\n    <item>N - Personal account</item>\r\n    <item>F - Factoring</item>\r\n  </list>\r\n",
            "nullable": true
          },
          "userStatus": {
            "type": "string",
            "description": "A user (customer) state of a customer order.\r\nThe value is defined variably and it can be any value according to requests of a concrete implementation.\r\nAsk your customer to get possible values.",
            "nullable": true,
            "example": "Values are defined by a concrete customer."
          },
          "isInForeignCurrency": {
            "type": "string",
            "description": "Is a document in a foreign currency? \r\nA - Yes, N - No.",
            "nullable": true,
            "example": "N"
          },
          "currency": {
            "type": "string",
            "description": "A code of currency.",
            "nullable": true,
            "example": "EUR"
          },
          "note": {
            "type": "string",
            "description": "Note of item.",
            "nullable": true
          },
          "warehouseId": {
            "type": "integer",
            "description": "Identifier of ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.CustomerOrderResult.Warehouse",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "warehouse": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "customerId": {
            "type": "integer",
            "description": "Identifier of ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.CustomerOrderResult.Customer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "customer": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "branchOfficeId": {
            "type": "integer",
            "description": "Identifier of a branch office/sub-branche office.",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "branchOffice": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "transportMethodId": {
            "type": "integer",
            "description": "Identifier of a transport method.",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "transportMethod": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "transportTypeId": {
            "type": "integer",
            "description": "Identifier of a transport type.",
            "format": "int32",
            "nullable": true
          },
          "transportType": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "warehouseTransactionTypeId": {
            "type": "integer",
            "description": "Identifier of a warehouse transaction type.",
            "format": "int32",
            "nullable": true
          },
          "warehouseTransactionType": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerOrderItemResult"
            },
            "description": "Items of records. Optional.",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "Identifier (PK) of a record.",
            "format": "int32",
            "example": 1
          },
          "classId": {
            "type": "integer",
            "description": "Identifier of the class of the entity.",
            "format": "int32",
            "example": 1023
          },
          "className": {
            "type": "string",
            "description": "Localized name of an entity class. Optional.",
            "nullable": true,
            "example": "My class name"
          },
          "folderId": {
            "type": "integer",
            "description": "Identifier of the folder.",
            "format": "int32",
            "example": 123
          },
          "folderName": {
            "type": "string",
            "description": "Localized name of an entity folder. Optional.",
            "nullable": true,
            "example": "My folder name"
          },
          "lastUpdatedOn": {
            "type": "string",
            "description": "Gets or sets an entity last update date and time.\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "description": "Gets or sets date and time when entity was created .\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "Gets entity timestamp.",
            "nullable": true,
            "example": "00000000000117CB"
          },
          "gunid": {
            "type": "string",
            "description": "Global record identifier within several databases.\r\nThis value is generated by database on a back-end.",
            "nullable": true,
            "example": "00000K00001U00000P"
          },
          "createdById": {
            "type": "integer",
            "description": "Primary key of the creator of the entity/record.",
            "format": "int32",
            "nullable": true,
            "example": 69
          },
          "createdBy": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "lastUpdatedById": {
            "type": "integer",
            "description": "Primary key of the last updated user of the entity",
            "format": "int32",
            "nullable": true,
            "example": 69
          },
          "lastUpdatedBy": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelResult"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfIUserDefinedAttributeResult"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfIForeignKeyRelationItemResult"
          },
          "reference": {
            "type": "string",
            "description": "Reference no. of record.",
            "nullable": true,
            "example": "X0000001"
          },
          "name": {
            "type": "string",
            "description": "Name of record.",
            "nullable": true,
            "example": "Record name"
          }
        },
        "additionalProperties": false,
        "description": "Contracts which is used to retrieve data of a customer order."
      },
      "CustomerOrderShippingFunctionBody": {
        "type": "object",
        "properties": {
          "masterUserParams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerOrderShippingFunctionMasterUserParamItem"
            },
            "description": "Master collection of user defined parameters.",
            "nullable": true
          },
          "entriesUserParams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerOrderShippingFunctionEntriesUserParamItem"
            },
            "description": "Entries collection of user defined parameters.",
            "nullable": true
          },
          "summaryUserParams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerOrderShippingFunctionSummaryUserParamItem"
            },
            "description": "Summary collection of user defined parameters.",
            "nullable": true
          },
          "recordIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordId"
            },
            "description": "Gets or sets source records for a function run.\r\nOptional.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "<inheritdoc />\r\n            Function no. 3504."
      },
      "CustomerOrderShippingFunctionEntriesUserParamItem": {
        "type": "object",
        "properties": {
          "sourceFolderId": {
            "type": "integer",
            "description": "Identifier of folder, where a warehouse source is located.",
            "format": "int32",
            "nullable": true
          },
          "sourceReference": {
            "type": "string",
            "description": "Reference no. of a warehouse source.",
            "nullable": true
          },
          "count": {
            "type": "number",
            "description": "Count of units.",
            "format": "double"
          },
          "additionalDiscount": {
            "type": "number",
            "description": "An additional discount.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An item of entry user defined parameters."
      },
      "CustomerOrderShippingFunctionMasterUserParamItem": {
        "type": "object",
        "properties": {
          "shippingDate": {
            "type": "string",
            "description": "Date of shipping.",
            "format": "date-time",
            "nullable": true
          },
          "customerFolderId": {
            "type": "integer",
            "description": "Identifier of folder, where the customer is located.",
            "format": "int32",
            "nullable": true
          },
          "customerReference": {
            "type": "string",
            "description": "Reference no. of customer.",
            "nullable": true
          },
          "customerLocation": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Location of customer.\r\nT - Inland, E - within the EU, M - out of EU.",
            "nullable": true
          },
          "note": {
            "type": "string",
            "description": "A note.",
            "nullable": true
          },
          "transactTypeFolderId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "Identifier of record with document.",
            "format": "int32",
            "nullable": true
          },
          "transactTypeReference": {
            "type": "string",
            "description": "Reference no. of a transact type..",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An item of master user defined parameters."
      },
      "CustomerOrderShippingFunctionSummaryUserParamItem": {
        "type": "object",
        "properties": {
          "print": {
            "type": "string",
            "description": "Print documents.\r\nN - No, A - Yes.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An item of summery user defined parameters."
      },
      "CustomerOrderUpdate": {
        "type": "object",
        "properties": {
          "totalPrice": {
            "type": "number",
            "description": "Total price in document.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "totalCurrencyPrice": {
            "type": "number",
            "description": "Total currency price in document.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "date": {
            "type": "string",
            "description": "Date of document.",
            "format": "date-time",
            "nullable": true
          },
          "implementationDate": {
            "type": "string",
            "description": "Implementation date.",
            "format": "date-time",
            "nullable": true
          },
          "documentType": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "<br>\r\n            Type of document.\r\n            \r\n<br>\r\n  <list type=\"table\">\r\n    <item>1 - Receiving record</item>\r\n    <item>2 - Issue slip</item>\r\n    <item>3 - Order</item>\r\n    <item>4 - Demand</item>\r\n    <item>5 - Confirmed order</item>\r\n    <item>6 - Reservation </item>\r\n    <item>7 - Valuation variance </item>\r\n    <item>8 - Dissolution of variance </item>\r\n    <item>0 - Inventory </item>\r\n    <item>T - W2W form </item>\r\n    <item>S - List of items </item>\r\n    <item>Z - Framework customer order </item>\r\n    <item>D - Framework supplier order </item>\r\n    <item>R - Transfer purchase order </item>\r\n  </list>\r\n",
            "nullable": true,
            "example": "4"
          },
          "paymentType": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "<br>\r\n            Type of payment.\r\n            \r\n<br>\r\n  <list type=\"table\">\r\n    <item>P - Payment order</item>\r\n    <item>S - Post.order</item>\r\n    <item>H - In cash</item>\r\n    <item>K - Compensation</item>\r\n    <item>I - Collect.</item>\r\n    <item>D - C.O.D. </item>\r\n    <item>B - Bill of exch.</item>\r\n    <item>L - Plan </item>\r\n    <item>A - By paym.card</item>\r\n    <item>R - Adv.payment</item>\r\n    <item>T - Letter of credit</item>\r\n    <item>O - SIPO (joint collection of payments from inhabitants)</item>\r\n    <item>Z - Voucher (gift certificate)</item>\r\n    <item>C - Delivery note</item>\r\n    <item>J - Other</item>\r\n    <item>N - Personal account</item>\r\n    <item>F - Factoring</item>\r\n  </list>\r\n",
            "nullable": true,
            "example": "A"
          },
          "userStatus": {
            "type": "string",
            "description": "A user (customer) state of a customer order.\r\nThe value is defined variably and it can be any value according to requests of a concrete implementation.\r\nAsk your customer to get possible values.",
            "nullable": true,
            "example": "Values are defined by a concrete customer."
          },
          "isInForeignCurrency": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Is a document in a foreign currency? If ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.CustomerOrderUpdate.Currency is not specified, you should not specify this property too.\r\nA - Yes, N - No.",
            "nullable": true,
            "example": "N"
          },
          "currency": {
            "maxLength": 3,
            "minLength": 1,
            "type": "string",
            "description": "A code of currency. \r\nDon't specify for a default currency code.",
            "nullable": true,
            "example": "EUR"
          },
          "note": {
            "type": "string",
            "description": "Note of item.",
            "nullable": true
          },
          "warehouseId": {
            "type": "integer",
            "description": "Identifier of Warehouse",
            "format": "int32",
            "nullable": true
          },
          "customerId": {
            "type": "integer",
            "description": "Identifier of a Customer.",
            "format": "int32",
            "nullable": true
          },
          "branchOfficeId": {
            "type": "integer",
            "description": "Identifier of a branch office/sub-branche office.",
            "format": "int32",
            "nullable": true
          },
          "transportMethodId": {
            "type": "integer",
            "description": "Identifier of a transport method.",
            "format": "int32",
            "nullable": true
          },
          "transportTypeId": {
            "type": "integer",
            "description": "Identifier of a transport type.",
            "format": "int32",
            "nullable": true
          },
          "warehouseTransactionTypeId": {
            "type": "integer",
            "description": "Identifier of a warehouse transaction type.",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerOrderItemUpdate"
            },
            "description": "Items of records. Optional.",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "description": "Reference no. of record.",
            "nullable": true,
            "example": "X000000001"
          },
          "name": {
            "type": "string",
            "description": "Name of record.",
            "nullable": true,
            "example": "My name"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelChange"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfUserDefinedAttributeChange"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfForeignKeyRelationItemChange"
          }
        },
        "additionalProperties": false,
        "description": "Contract to update a record of a customer order entity."
      },
      "DecimalDigitsConflict": {
        "enum": [
          "dontCheck",
          "round",
          "error"
        ],
        "type": "string",
        "description": "Way how to solve a conflict in a number of decimal digits."
      },
      "DeletionDataMode": {
        "enum": [
          "dontDelete",
          "deleteAccordingToTheFilter",
          "deleteAll"
        ],
        "type": "string",
        "description": "Ways how delete data in target class before import."
      },
      "DobropisFvCreate": {
        "required": [
          "variabilniSymbol"
        ],
        "type": "object",
        "properties": {
          "cisloJednaci": {
            "type": "string",
            "nullable": true
          },
          "cisloPoradace": {
            "type": "integer",
            "format": "int32"
          },
          "datumDuzp": {
            "type": "string",
            "nullable": true
          },
          "datumPorizeni": {
            "type": "string",
            "nullable": true
          },
          "datumSplatnosti": {
            "type": "string",
            "nullable": true
          },
          "dobropisIdEx": {
            "type": "string",
            "nullable": true
          },
          "konstantniSymbol": {
            "type": "string",
            "nullable": true
          },
          "organizace": {
            "$ref": "#/components/schemas/OrganizaceCreate"
          },
          "organizace2": {
            "$ref": "#/components/schemas/OrganizaceCreate"
          },
          "podkladovaFakturaId": {
            "type": "integer",
            "description": "Podkladová FV (tř.65), na kterou se má dobropis dopárovat",
            "format": "int32"
          },
          "podkladovaFakturaIdEx": {
            "type": "string",
            "description": "Podkladová FV (tř.65), na kterou se má dobropis dopárovat",
            "nullable": true
          },
          "poznamka": {
            "type": "string",
            "nullable": true
          },
          "specifickySymbol": {
            "maxLength": 10,
            "type": "string",
            "nullable": true
          },
          "typUhrady": {
            "type": "string",
            "nullable": true
          },
          "variabilniSymbol": {
            "maxLength": 10,
            "type": "string"
          },
          "kontaceId": {
            "type": "integer",
            "description": "Klíč na záznam z třídy Kontace prvodokladu",
            "format": "int32"
          },
          "polozky": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Polozka"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DobropisFvDto": {
        "type": "object",
        "properties": {
          "cisloJednaci": {
            "type": "string",
            "nullable": true
          },
          "datumDuzp": {
            "type": "string",
            "format": "date-time"
          },
          "datumPorizeni": {
            "type": "string",
            "format": "date-time"
          },
          "datumSplatnosti": {
            "type": "string",
            "format": "date-time"
          },
          "dobropisId": {
            "type": "integer",
            "format": "int32"
          },
          "dobropisIdEx": {
            "type": "string",
            "nullable": true
          },
          "konstantniSymbol": {
            "type": "string",
            "nullable": true
          },
          "organizaceOdberatel": {
            "$ref": "#/components/schemas/OrganizaceDto"
          },
          "organizacePrijemce": {
            "$ref": "#/components/schemas/OrganizaceDto"
          },
          "poznamka": {
            "type": "string",
            "nullable": true
          },
          "specifickySymbol": {
            "type": "string",
            "nullable": true
          },
          "stav": {
            "type": "integer",
            "format": "int32"
          },
          "stavUhrazenosti": {
            "type": "string",
            "nullable": true
          },
          "variabilniSymbol": {
            "type": "string",
            "nullable": true
          },
          "zbyvaUhradit": {
            "type": "number",
            "format": "double"
          },
          "kontaceHlavicka": {
            "$ref": "#/components/schemas/KontacePrvodokladuDto"
          },
          "polozky": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Polozka"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DownloadExternalDocumentFunctionBody": {
        "type": "object",
        "properties": {
          "params": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DownloadExternalDocumentFunctionParamsItem"
            },
            "description": "Parameters of a function.",
            "nullable": true
          },
          "recordIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordId"
            },
            "description": "Gets or sets source records for a function run.\r\nOptional.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "<inheritdoc />"
      },
      "DownloadExternalDocumentFunctionParamsItem": {
        "required": [
          "documentId"
        ],
        "type": "object",
        "properties": {
          "folderId": {
            "type": "integer",
            "description": "Optional. If specified, a check whether ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.DownloadExternalDocumentFunctionParamsItem.DocumentId is from this folder.",
            "format": "int32",
            "nullable": true
          },
          "documentId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "Identifier of record with document.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Model (contract) of parameters' item for function which downloads external document, including content."
      },
      "EmployeeResult": {
        "required": [
          "classId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Primary key of a location.",
            "format": "int32"
          },
          "firstName": {
            "type": "string",
            "description": "First name of the person.",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the person.",
            "nullable": true
          },
          "state": {
            "type": "string",
            "description": "The state of a person - see ASOL.WebAPI.App.MIM.Contracts.PersonState.",
            "nullable": true
          },
          "personDisplayValue": {
            "type": "string",
            "description": "Display value of the person.",
            "nullable": true
          },
          "classId": {
            "type": "integer",
            "description": "Identifier of the class of the entity.",
            "format": "int32",
            "example": 1023
          },
          "className": {
            "type": "string",
            "description": "Localized name of an entity class. Optional.",
            "nullable": true,
            "example": "My class name"
          },
          "folderId": {
            "type": "integer",
            "description": "Identifier of the folder.",
            "format": "int32",
            "example": 123
          },
          "folderName": {
            "type": "string",
            "description": "Localized name of an entity folder. Optional.",
            "nullable": true,
            "example": "My folder name"
          },
          "lastUpdatedOn": {
            "type": "string",
            "description": "Gets or sets an entity last update date and time.\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "description": "Gets or sets date and time when entity was created .\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "Gets entity timestamp.",
            "nullable": true,
            "example": "00000000000117CB"
          },
          "gunid": {
            "type": "string",
            "description": "Global record identifier within several databases.\r\nThis value is generated by database on a back-end.",
            "nullable": true,
            "example": "00000K00001U00000P"
          },
          "createdById": {
            "type": "integer",
            "description": "Primary key of the creator of the entity/record.",
            "format": "int32",
            "nullable": true,
            "example": 69
          },
          "createdBy": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "lastUpdatedById": {
            "type": "integer",
            "description": "Primary key of the last updated user of the entity",
            "format": "int32",
            "nullable": true,
            "example": 69
          },
          "lastUpdatedBy": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelResult"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfIUserDefinedAttributeResult"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfIForeignKeyRelationItemResult"
          },
          "reference": {
            "type": "string",
            "description": "Reference no. of record.",
            "nullable": true,
            "example": "X0000001"
          },
          "name": {
            "type": "string",
            "description": "Name of record.",
            "nullable": true,
            "example": "Record name"
          }
        },
        "additionalProperties": false,
        "description": "A result contract for employees."
      },
      "ExternalDocumentResult": {
        "required": [
          "classId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Primary key of a location.",
            "format": "int32"
          },
          "fileName": {
            "type": "string",
            "description": "File name",
            "nullable": true
          },
          "state": {
            "type": "string",
            "description": "State of document.",
            "nullable": true
          },
          "fileLength": {
            "type": "integer",
            "description": "Length of file.",
            "format": "int32",
            "nullable": true
          },
          "fileContent": {
            "type": "string",
            "description": "Content of external document in base64 coding.",
            "nullable": true
          },
          "classId": {
            "type": "integer",
            "description": "Identifier of the class of the entity.",
            "format": "int32",
            "example": 1023
          },
          "className": {
            "type": "string",
            "description": "Localized name of an entity class. Optional.",
            "nullable": true,
            "example": "My class name"
          },
          "folderId": {
            "type": "integer",
            "description": "Identifier of the folder.",
            "format": "int32",
            "example": 123
          },
          "folderName": {
            "type": "string",
            "description": "Localized name of an entity folder. Optional.",
            "nullable": true,
            "example": "My folder name"
          },
          "lastUpdatedOn": {
            "type": "string",
            "description": "Gets or sets an entity last update date and time.\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "description": "Gets or sets date and time when entity was created .\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "Gets entity timestamp.",
            "nullable": true,
            "example": "00000000000117CB"
          },
          "gunid": {
            "type": "string",
            "description": "Global record identifier within several databases.\r\nThis value is generated by database on a back-end.",
            "nullable": true,
            "example": "00000K00001U00000P"
          },
          "createdById": {
            "type": "integer",
            "description": "Primary key of the creator of the entity/record.",
            "format": "int32",
            "nullable": true,
            "example": 69
          },
          "createdBy": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "lastUpdatedById": {
            "type": "integer",
            "description": "Primary key of the last updated user of the entity",
            "format": "int32",
            "nullable": true,
            "example": 69
          },
          "lastUpdatedBy": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelResult"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfIUserDefinedAttributeResult"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfIForeignKeyRelationItemResult"
          },
          "reference": {
            "type": "string",
            "description": "Reference no. of record.",
            "nullable": true,
            "example": "X0000001"
          },
          "name": {
            "type": "string",
            "description": "Name of record.",
            "nullable": true,
            "example": "Record name"
          }
        },
        "additionalProperties": false,
        "description": "External document."
      },
      "FakturaVydanaCreate": {
        "required": [
          "datumPorizeni",
          "organizace",
          "variabilniSymbol"
        ],
        "type": "object",
        "properties": {
          "cisloJednaci": {
            "type": "string",
            "nullable": true
          },
          "cisloPoradace": {
            "type": "integer",
            "format": "int32"
          },
          "datumDuzp": {
            "type": "string",
            "nullable": true
          },
          "datumPorizeni": {
            "type": "string"
          },
          "datumSplatnosti": {
            "type": "string",
            "nullable": true
          },
          "fakturaIdEx": {
            "type": "string",
            "nullable": true
          },
          "konstantniSymbol": {
            "type": "string",
            "nullable": true
          },
          "organizace": {
            "$ref": "#/components/schemas/OrganizaceCreate"
          },
          "organizace2": {
            "$ref": "#/components/schemas/OrganizaceCreate"
          },
          "poznamka": {
            "type": "string",
            "nullable": true
          },
          "specifickySymbol": {
            "maxLength": 10,
            "type": "string",
            "nullable": true
          },
          "typUhrady": {
            "type": "string",
            "nullable": true
          },
          "variabilniSymbol": {
            "maxLength": 10,
            "type": "string"
          },
          "kontaceId": {
            "type": "integer",
            "description": "Klíč na záznam z třídy Kontace prvodokladu",
            "format": "int32"
          },
          "polozky": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Polozka"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Faktura vydaná"
      },
      "FakturaVydanaDto": {
        "type": "object",
        "properties": {
          "cenaCelkem": {
            "type": "number",
            "format": "double"
          },
          "cisloJednaci": {
            "type": "string",
            "nullable": true
          },
          "datumDuzp": {
            "type": "string",
            "format": "date-time"
          },
          "datumPorizeni": {
            "type": "string",
            "format": "date-time"
          },
          "datumSplatnosti": {
            "type": "string",
            "format": "date-time"
          },
          "fakturaId": {
            "type": "integer",
            "format": "int32"
          },
          "fakturaIdEx": {
            "type": "string",
            "nullable": true
          },
          "konstantniSymbol": {
            "type": "string",
            "nullable": true
          },
          "organizaceOdberatel": {
            "$ref": "#/components/schemas/OrganizaceDto"
          },
          "organizacePrijemce": {
            "$ref": "#/components/schemas/OrganizaceDto"
          },
          "poznamka": {
            "type": "string",
            "nullable": true
          },
          "specifickySymbol": {
            "type": "string",
            "nullable": true
          },
          "stav": {
            "type": "integer",
            "format": "int32"
          },
          "stavUhrazenosti": {
            "type": "string",
            "nullable": true
          },
          "variabilniSymbol": {
            "type": "string",
            "nullable": true
          },
          "kontaceHlavicka": {
            "$ref": "#/components/schemas/KontacePrvodokladuDto"
          },
          "polozky": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Polozka"
            },
            "nullable": true
          },
          "zbyvaUhradit": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Faktura vydaná DTO"
      },
      "ForeignKeyRelationItemChange": {
        "required": [
          "relationId",
          "side"
        ],
        "type": "object",
        "properties": {
          "record": {
            "$ref": "#/components/schemas/RelatedRecordModelChange"
          },
          "side": {
            "$ref": "#/components/schemas/RelationSide"
          },
          "relationId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets unique relation identifier.",
            "format": "int32"
          },
          "symbolicName": {
            "type": "string",
            "description": "Symbolic name of relation.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A contract to hold information about record in a relation which is a foreign key and which is to be changed."
      },
      "ForeignKeyRelationItemResult": {
        "required": [
          "relationId",
          "side"
        ],
        "type": "object",
        "properties": {
          "record": {
            "$ref": "#/components/schemas/RelatedRecordModelResult"
          },
          "side": {
            "$ref": "#/components/schemas/RelationSide"
          },
          "relationId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets unique relation identifier.\r\nCZ: Vrací nebo nastavuje číslo vztahu.",
            "format": "int32"
          },
          "symbolicName": {
            "type": "string",
            "description": "Symbolic name of relation.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A contract to hold information about record in a relation which is a foreign key."
      },
      "FunctionLog": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FunctionLogItem"
            },
            "description": "Gets or sets the collection of auditlog entries that belong to this auditlog.\r\nCZ: Vrací nebo nastavuje kolekci položek auditlogu, které jsou součástí auditlogu.",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "Gets or sets unique identifier of a function log.",
            "format": "int32"
          },
          "state": {
            "$ref": "#/components/schemas/FunctionResultState"
          }
        },
        "additionalProperties": false,
        "description": "Data structure representing a function log."
      },
      "FunctionLogItem": {
        "type": "object",
        "properties": {
          "level": {
            "$ref": "#/components/schemas/FunctionLogItemLevel"
          },
          "when": {
            "type": "string",
            "description": "Gets or sets date and time when function log item was written.",
            "format": "date-time"
          },
          "referencedRecord": {
            "$ref": "#/components/schemas/IRecordId"
          },
          "message": {
            "type": "string",
            "description": "Gets or sets text message of function log item.",
            "nullable": true
          },
          "severity": {
            "$ref": "#/components/schemas/FunctionLogItemSeverity"
          },
          "itemId": {
            "type": "integer",
            "description": "Gets or sets unique identifier of function log item.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Data structure representing function log item."
      },
      "FunctionLogItemLevel": {
        "enum": [
          "system",
          "application"
        ],
        "type": "string",
        "description": "Level of a function log item."
      },
      "FunctionLogItemSeverity": {
        "enum": [
          "info",
          "warning",
          "error"
        ],
        "type": "string",
        "description": "Severity of a function log item."
      },
      "FunctionResultState": {
        "enum": [
          "success",
          "successWithWarning",
          "successWithError",
          "failure"
        ],
        "type": "string",
        "description": "Enumeration of possible function result states."
      },
      "GeneralImportFunctionBody": {
        "type": "object",
        "properties": {
          "params": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GeneralImportFunctionParamsItem"
            },
            "description": "Parameters of a function.",
            "nullable": true
          },
          "recordIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordId"
            },
            "description": "Gets or sets source records for a function run.\r\nOptional.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A payload of the function. Typically function parameters if they are defined by the function.\r\nThe payload is passed by a request body.,"
      },
      "GeneralImportFunctionParamsItem": {
        "required": [
          "dataSource"
        ],
        "type": "object",
        "properties": {
          "targetFolderId": {
            "type": "integer",
            "description": "Unique identifier of the entity (class in terms of HeN), where",
            "format": "int32",
            "nullable": true
          },
          "deletionDataMode": {
            "$ref": "#/components/schemas/DeletionDataMode"
          },
          "deletionDataFilterId": {
            "type": "integer",
            "description": "An unique identifier of a filter which is used to delete data. Set this property in case ASOL.WebAPI.DataTransfers.Contracts.GeneralImportFunctionParamsItem.DeletionDataMode is ASOL.WebAPI.DataTransfers.Contracts.DeletionDataMode.DeleteAccordingToTheFilter.",
            "format": "int32",
            "nullable": true
          },
          "transactionScope": {
            "$ref": "#/components/schemas/TransactionScope"
          },
          "dataSource": {
            "type": "string",
            "description": "<br>\r\n            Source of data to import.\r\n            \r\n<br>\r\n  <list type=\"bullet\">\r\n    <listheader>Possible values are:</listheader>\r\n    <item>S - import from file.  </item>\r\n    <item>D - import according to database command which is specified in a general import definition.</item>\r\n  </list>\r\n"
          },
          "successTargetFolder": {
            "type": "string",
            "description": "Path to folder where to move imported file (ASOL.WebAPI.DataTransfers.Contracts.GeneralImportFunctionParamsItem.ImportedFileName) if import was without any error.\r\nThis property can be filled when data are imported form file (ASOL.WebAPI.DataTransfers.Contracts.GeneralImportFunctionParamsItem.DataSource is \"S\"), \r\nin case you want to move imported file to specific folder.\r\nBeware! Function works on application server with temporary copy of file. \r\nUploaded file on client side is not reachable by this functionality.",
            "nullable": true
          },
          "failureTargetFolder": {
            "type": "string",
            "description": "Path to folder where to move imported file (ASOL.WebAPI.DataTransfers.Contracts.GeneralImportFunctionParamsItem.ImportedFileName)  if import failed.\r\nThis property can be filled when data are imported form file (ASOL.WebAPI.DataTransfers.Contracts.GeneralImportFunctionParamsItem.DataSource is \"S\"), \r\nin case you want to move imported file to specific folder.\r\nBeware! Function works on application server with temporary copy of file. \r\nUploaded file on client side is not reachable by this functionality.",
            "nullable": true
          },
          "importFromRow": {
            "type": "integer",
            "description": "This property can be specified when data are imported form file (ASOL.WebAPI.DataTransfers.Contracts.GeneralImportFunctionParamsItem.DataSource is \"S\") and several starting rows are to be omitted.\r\nAll rows which row number is lower than this value will be omitted.",
            "format": "int32",
            "nullable": true
          },
          "importToRow": {
            "type": "integer",
            "description": "This property can be specified when data are imported form file (ASOL.WebAPI.DataTransfers.Contracts.GeneralImportFunctionParamsItem.DataSource is \"S\") and several rows at the end of file are to be omitted.\r\nAll rows which row number is greater than this value will be omitted.",
            "format": "int32",
            "nullable": true
          },
          "errorLimit": {
            "type": "integer",
            "description": "The value specifies number of rows imported with any failure (threshold) on which detection of failures is performed.\r\nWhen this threshold is reached, the execution is immediately canceled.\r\nThe value is to be understood as a guide value for entities with items.\r\nUnfilled value or value lower or equal zero means the functionality is switched off and all rows will processed.",
            "format": "int32",
            "nullable": true
          },
          "decimalDigitsConflict": {
            "$ref": "#/components/schemas/DecimalDigitsConflict"
          },
          "roundingRadix": {
            "$ref": "#/components/schemas/RoundingRadix"
          },
          "roundingDirection": {
            "$ref": "#/components/schemas/RoundingDirection"
          },
          "stringLengthConflict": {
            "$ref": "#/components/schemas/StringLengthConflict"
          }
        },
        "additionalProperties": false,
        "description": "Model (contract) of parameters' item for function which imports data using \"General Import\" functionality."
      },
      "GeneralItemModelResult": {
        "required": [
          "itemId",
          "rowOrdinalNumber"
        ],
        "type": "object",
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfIAttributeResult"
          },
          "staticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfIForeignKeyRelationItemResult"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelResult"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfIUserDefinedAttributeResult"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfIForeignKeyRelationItemResult"
          },
          "itemId": {
            "type": "integer",
            "description": "Identifier of item in a record.",
            "format": "int32"
          },
          "rowOrdinalNumber": {
            "type": "integer",
            "description": "Row ordinal number.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "General contract for items which are used to retrieve items of entity, if no specific model for items is used."
      },
      "GeneralModelResultWithItems": {
        "required": [
          "classId"
        ],
        "type": "object",
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfIAttributeResult"
          },
          "staticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfIForeignKeyRelationItemResult"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GeneralItemModelResult"
            },
            "description": "Items of records. Optional.",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "Identifier (PK) of a record.",
            "format": "int32",
            "example": 1
          },
          "classId": {
            "type": "integer",
            "description": "Identifier of the class of the entity.",
            "format": "int32",
            "example": 1023
          },
          "className": {
            "type": "string",
            "description": "Localized name of an entity class. Optional.",
            "nullable": true,
            "example": "My class name"
          },
          "folderId": {
            "type": "integer",
            "description": "Identifier of the folder.",
            "format": "int32",
            "example": 123
          },
          "folderName": {
            "type": "string",
            "description": "Localized name of an entity folder. Optional.",
            "nullable": true,
            "example": "My folder name"
          },
          "lastUpdatedOn": {
            "type": "string",
            "description": "Gets or sets an entity last update date and time.\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "description": "Gets or sets date and time when entity was created .\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "Gets entity timestamp.",
            "nullable": true,
            "example": "00000000000117CB"
          },
          "gunid": {
            "type": "string",
            "description": "Global record identifier within several databases.\r\nThis value is generated by database on a back-end.",
            "nullable": true,
            "example": "00000K00001U00000P"
          },
          "createdById": {
            "type": "integer",
            "description": "Primary key of the creator of the entity/record.",
            "format": "int32",
            "nullable": true,
            "example": 69
          },
          "createdBy": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "lastUpdatedById": {
            "type": "integer",
            "description": "Primary key of the last updated user of the entity",
            "format": "int32",
            "nullable": true,
            "example": 69
          },
          "lastUpdatedBy": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelResult"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfIUserDefinedAttributeResult"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfIForeignKeyRelationItemResult"
          },
          "reference": {
            "type": "string",
            "description": "Reference no. of record.",
            "nullable": true,
            "example": "X0000001"
          },
          "name": {
            "type": "string",
            "description": "Name of record.",
            "nullable": true,
            "example": "Record name"
          }
        },
        "additionalProperties": false
      },
      "HttpStatusCode": {
        "enum": [
          "continue",
          "switchingProtocols",
          "processing",
          "earlyHints",
          "ok",
          "created",
          "accepted",
          "nonAuthoritativeInformation",
          "noContent",
          "resetContent",
          "partialContent",
          "multiStatus",
          "alreadyReported",
          "imUsed",
          "ambiguous",
          "moved",
          "redirect",
          "redirectMethod",
          "notModified",
          "useProxy",
          "unused",
          "temporaryRedirect",
          "permanentRedirect",
          "badRequest",
          "unauthorized",
          "paymentRequired",
          "forbidden",
          "notFound",
          "methodNotAllowed",
          "notAcceptable",
          "proxyAuthenticationRequired",
          "requestTimeout",
          "conflict",
          "gone",
          "lengthRequired",
          "preconditionFailed",
          "requestEntityTooLarge",
          "requestUriTooLong",
          "unsupportedMediaType",
          "requestedRangeNotSatisfiable",
          "expectationFailed",
          "misdirectedRequest",
          "unprocessableEntity",
          "locked",
          "failedDependency",
          "upgradeRequired",
          "preconditionRequired",
          "tooManyRequests",
          "requestHeaderFieldsTooLarge",
          "unavailableForLegalReasons",
          "internalServerError",
          "notImplemented",
          "badGateway",
          "serviceUnavailable",
          "gatewayTimeout",
          "httpVersionNotSupported",
          "variantAlsoNegotiates",
          "insufficientStorage",
          "loopDetected",
          "notExtended",
          "networkAuthenticationRequired"
        ],
        "type": "string"
      },
      "IAttributeResult": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of a column an attribute is mapped to.",
            "nullable": true,
            "readOnly": true
          },
          "value": {
            "description": "Value of the attribute.",
            "nullable": true
          },
          "symbolicName": {
            "type": "string",
            "description": "Symbolic of attribute.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Interface which describes a attribute in results of requests."
      },
      "IForeignKeyRelationItemResult": {
        "type": "object",
        "properties": {
          "record": {
            "$ref": "#/components/schemas/RelatedRecordModelResult"
          },
          "side": {
            "$ref": "#/components/schemas/RelationSide"
          },
          "relationId": {
            "type": "integer",
            "format": "int32"
          },
          "symbolicName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Interface for a contract to hold information about record in a relation which is a foreign key."
      },
      "IFunctionResult": {
        "type": "object",
        "properties": {
          "resultedRecords": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IRecordId"
            },
            "description": "Records which were processed by the function.",
            "nullable": true
          },
          "log": {
            "$ref": "#/components/schemas/FunctionLog"
          }
        },
        "additionalProperties": false,
        "description": "Interface for a result contract of functions."
      },
      "IFunctionWithOutputParamsResult": {
        "type": "object",
        "properties": {
          "outputParams": {
            "$ref": "#/components/schemas/OutputFunctionParams"
          },
          "resultedRecords": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IRecordId"
            },
            "description": "Records which were processed by the function.",
            "nullable": true
          },
          "log": {
            "$ref": "#/components/schemas/FunctionLog"
          }
        },
        "additionalProperties": false,
        "description": "Interface for a result contract of functions."
      },
      "IOutputFunctionParamItem": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IOutputFunctionParamNameValuePair"
            },
            "description": "Collection of output parameter values with their names.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An item in ASOL.Nephrite.WebAPI.Contracts.IOutputFunctionParamItemCollection`1."
      },
      "IOutputFunctionParamNameValuePair": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of an output parameter.",
            "nullable": true
          },
          "value": {
            "description": "Value of an output parameter.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Interface which describe name and value of output parameter"
      },
      "IRecordId": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "classId": {
            "type": "integer",
            "format": "int32"
          },
          "isEmpty": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "IUserDefinedAttributeResult": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of a column an attribute is mapped to.",
            "nullable": true,
            "readOnly": true
          },
          "value": {
            "description": "Value of the attribute.",
            "nullable": true
          },
          "symbolicName": {
            "type": "string",
            "description": "Symbolic of attribute.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Interface which describes a user defined attribute in results of requests."
      },
      "InvoiceOutCreate": {
        "required": [
          "folderId"
        ],
        "type": "object",
        "properties": {
          "invoiceNo": {
            "type": "string",
            "description": "Number of an invoice. \r\nIt is a ASOL.Nephrite.WebAPI.Contracts.IModelBase.Name attribute.",
            "nullable": true,
            "example": "IO00569875656"
          },
          "totalPrice": {
            "type": "number",
            "description": "Total price in document.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "totalCurrencyPrice": {
            "type": "number",
            "description": "Total currency price in document.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "isInForeignCurrency": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Is a document in a foreign currency? If ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.InvoiceOutCreate.Currency is not specified, you should not specify this property too.\r\nA - Yes, N - No.",
            "nullable": true,
            "example": "N"
          },
          "currency": {
            "maxLength": 3,
            "minLength": 1,
            "type": "string",
            "description": "A code of currency. \r\nDon't specify for a default currency code!",
            "nullable": true,
            "example": "EUR"
          },
          "erDate": {
            "type": "string",
            "description": "E/R date.\r\nDon't specify for a default currency code!",
            "format": "date-time",
            "nullable": true,
            "example": "2021-11-01T00:00:00.000Z"
          },
          "exchangeRateUnit": {
            "type": "integer",
            "description": "Exchange rate unit. 1 in most cases.\r\nDon't specify for a default currency code!",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "exchangeRate": {
            "type": "number",
            "description": "Exchange rate.\r\nDon't specify for a default currency code!",
            "format": "double",
            "nullable": true,
            "example": 1
          },
          "issueDate": {
            "type": "string",
            "description": "Date of issue.",
            "format": "date-time",
            "nullable": true,
            "example": "2021-11-01T00:00:00.000Z"
          },
          "dueDate": {
            "type": "string",
            "description": "Due date.",
            "format": "date-time",
            "nullable": true,
            "example": "2021-11-01T00:00:00.000Z"
          },
          "vatDueDate": {
            "type": "string",
            "description": "Due date.",
            "format": "date-time",
            "nullable": true,
            "example": "2021-11-01T00:00:00.000Z"
          },
          "transactionDate": {
            "type": "string",
            "description": "Transaction date.",
            "format": "date-time",
            "nullable": true,
            "example": "2021-11-01T00:00:00.000Z"
          },
          "paymentType": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "<br>\r\n            Type of payment.\r\n            \r\n<br>\r\n  <list type=\"table\">\r\n    <item>P - Payment order</item>\r\n    <item>S - Post.order</item>\r\n    <item>H - In cash</item>\r\n    <item>K - Compensation</item>\r\n    <item>I - Collect.</item>\r\n    <item>D - C.O.D. </item>\r\n    <item>B - Bill of exch.</item>\r\n    <item>L - Plan </item>\r\n    <item>A - By paym.card</item>\r\n    <item>R - Adv.payment</item>\r\n    <item>T - Letter of credit</item>\r\n    <item>O - SIPO (joint collection of payments from inhabitants)</item>\r\n    <item>Z - Voucher (gift certificate)</item>\r\n    <item>C - Delivery note</item>\r\n    <item>J - Other</item>\r\n    <item>N - Personal account</item>\r\n    <item>F - Factoring</item>\r\n  </list>\r\n",
            "nullable": true,
            "example": "A"
          },
          "variableSymbol": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "Variable symbol of a payment.\r\nIt should be filled if its pre-filling is suppressed or if it differs from the reference no.",
            "nullable": true,
            "example": "00000000123"
          },
          "matchingSymbol": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "Matching symbol. Used for accounting operations. It can be the same as ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.InvoiceOutCreate.VariableSymbol.\r\nIt should be filled if its pre-filling is suppressed or if it differs from the ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.InvoiceOutCreate.VariableSymbol.",
            "nullable": true,
            "example": "00000000123"
          },
          "note": {
            "type": "string",
            "description": "A note.",
            "nullable": true
          },
          "constantSymbol": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "A constant symbol of a payment.",
            "nullable": true,
            "example": "0204"
          },
          "specificSymbol": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "A specific symbol of a payment.",
            "nullable": true,
            "example": "00001"
          },
          "customerId": {
            "type": "integer",
            "description": "Identifier of a Customer.",
            "format": "int32",
            "nullable": true
          },
          "branchOfficeId": {
            "type": "integer",
            "description": "Identifier of a branch office/sub-branche office.",
            "format": "int32",
            "nullable": true
          },
          "transportMethodId": {
            "type": "integer",
            "description": "Identifier of a transport method.",
            "format": "int32",
            "nullable": true
          },
          "warehouseId": {
            "type": "integer",
            "description": "Identifier of Warehouse",
            "format": "int32",
            "nullable": true
          },
          "bankAccountId": {
            "type": "integer",
            "description": "Identifier of a bank account number.",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceOutItemCreate"
            },
            "description": "Items of records. Optional.",
            "nullable": true
          },
          "folderId": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "Identifier of a folder where to create a record.\r\n0 means a default folder of the class/entity.",
            "format": "int32",
            "example": 1023
          },
          "reference": {
            "type": "string",
            "description": "Reference no. of record.",
            "nullable": true,
            "example": "X000000001"
          },
          "name": {
            "type": "string",
            "description": "Name of record.",
            "nullable": true,
            "example": "My name"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelChange"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfUserDefinedAttributeChange"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfForeignKeyRelationItemChange"
          }
        },
        "additionalProperties": false,
        "description": "Contract to create a record of an invoice out entity."
      },
      "InvoiceOutItemCreate": {
        "type": "object",
        "properties": {
          "priceLock": {
            "type": "string",
            "description": "Recalculation of prices is suppressed.",
            "nullable": true,
            "example": "A"
          },
          "totalPrice": {
            "type": "number",
            "description": "Total price in a document item.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "totalCurrencyPrice": {
            "type": "number",
            "description": "Total currency price in a document item.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "basicPrice": {
            "type": "number",
            "description": "A price without VAT in a document item.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "basicCurrencyPrice": {
            "type": "number",
            "description": "A currency price without VAT in a document item.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "totalVat": {
            "type": "number",
            "description": "A VAT in a document item.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "totalCurrencyVat": {
            "type": "number",
            "description": "A currency VAT in a document item.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "vatCode": {
            "type": "string",
            "description": "A code of VAT.",
            "nullable": true,
            "example": "NUTZ"
          },
          "vatRate": {
            "type": "number",
            "description": "A rate of VAT.\r\nIt should be specified if ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.InvoiceOutItemCreate.VatCode is not.",
            "format": "double",
            "nullable": true,
            "example": 21
          },
          "unitPrice": {
            "type": "number",
            "description": "A price for a unit.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "unitCurrencyPrice": {
            "type": "number",
            "description": "A currency price for a unit.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "quantityInUnit": {
            "type": "number",
            "description": "A quantity in a unit.",
            "format": "double",
            "nullable": true,
            "example": 1.5
          },
          "currency": {
            "maxLength": 3,
            "minLength": 1,
            "type": "string",
            "description": "A code of currency. \r\nDon't specify for a default currency code.",
            "nullable": true,
            "example": "EUR"
          },
          "itemName": {
            "type": "string",
            "description": "A name of item, eg. name of goods (ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.InvoiceOutItemCreate.GoodsId).  \r\nIt doesn't have to be filled when ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.InvoiceOutItemCreate.GoodsId is specified.",
            "nullable": true,
            "example": "Postage fee"
          },
          "matchingSymbol": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "Matching symbol. Used for accounting operations.",
            "nullable": true,
            "example": "00000000123"
          },
          "goodsId": {
            "type": "integer",
            "description": "Identifier of goods.",
            "format": "int32",
            "nullable": true
          },
          "measureUnitId": {
            "type": "integer",
            "description": "Unit of measure",
            "format": "int32",
            "nullable": true
          },
          "itemId": {
            "type": "integer",
            "description": "Identifier of an item for a main record. \r\nIn fact, it is an identity db identifier of the item. \r\nIt can be zero or less then zero for items to insert (or you can omit it in a contract at all). \r\nIn this cases, new item will be generated.\r\nIf you specify the item identifier, the item will be updated by values in a contract .\r\nIf you specify the item identifier and you set the ASOL.Nephrite.WebAPI.Contracts.ItemModelChangeBase.Action to ASOL.Nephrite.WebAPI.Contracts.ItemAction.Delete, the item will deleted.",
            "format": "int32"
          },
          "rowOrdinalNumber": {
            "type": "integer",
            "description": "Row ordinal number.",
            "format": "int32"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelChange"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfUserDefinedAttributeChange"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfForeignKeyRelationItemChange"
          }
        },
        "additionalProperties": false,
        "description": "Contract to create an item of record of an invoice out entity."
      },
      "InvoiceOutItemResult": {
        "required": [
          "itemId",
          "rowOrdinalNumber"
        ],
        "type": "object",
        "properties": {
          "totalPrice": {
            "type": "number",
            "description": "Total price in a document item.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "totalCurrencyPrice": {
            "type": "number",
            "description": "Total currency price in a document item.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "basicPrice": {
            "type": "number",
            "description": "A price without VAT in a document item.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "basicCurrencyPrice": {
            "type": "number",
            "description": "A currency price without VAT in a document item.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "totalVat": {
            "type": "number",
            "description": "A VAT in a document item.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "totalCurrencyVat": {
            "type": "number",
            "description": "A currency VAT in a document item.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "vatCode": {
            "type": "string",
            "description": "A code of VAT.",
            "nullable": true,
            "example": "NUTZ"
          },
          "vatRate": {
            "type": "number",
            "description": "A rate of VAT.\r\nIt should be specified if ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.InvoiceOutItemResult.VatCode is not.",
            "format": "double",
            "nullable": true,
            "example": 21
          },
          "unitPrice": {
            "type": "number",
            "description": "A price for a unit.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "unitCurrencyPrice": {
            "type": "number",
            "description": "A currency price for a unit.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "quantityInUnit": {
            "type": "number",
            "description": "A quantity in a unit.",
            "format": "double",
            "nullable": true,
            "example": 1
          },
          "currency": {
            "type": "string",
            "description": "A code of currency. \r\nDon't specify for a default currency code.",
            "nullable": true,
            "example": "EUR"
          },
          "itemName": {
            "type": "string",
            "description": "A name of item, eg. name of goods (ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.InvoiceOutItemResult.GoodsId).  \r\nIt doesn't have to be filled when ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.InvoiceOutItemResult.GoodsId is specified.",
            "nullable": true,
            "example": "Postage fee"
          },
          "matchingSymbol": {
            "type": "string",
            "description": "Matching symbol. Used for accounting operations.",
            "nullable": true,
            "example": "00000000123"
          },
          "goodsId": {
            "type": "integer",
            "description": "Identifier of ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.InvoiceOutItemResult.Goods.",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "goods": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "measureUnitId": {
            "type": "integer",
            "description": "Identifier of ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.InvoiceOutItemResult.MeasureUnit.",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "measureUnit": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelResult"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfIUserDefinedAttributeResult"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfIForeignKeyRelationItemResult"
          },
          "itemId": {
            "type": "integer",
            "description": "Identifier of item in a record.",
            "format": "int32"
          },
          "rowOrdinalNumber": {
            "type": "integer",
            "description": "Row ordinal number.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Contract to create an item of record of a customer order entity."
      },
      "InvoiceOutItemUpdate": {
        "type": "object",
        "properties": {
          "totalPrice": {
            "type": "number",
            "description": "Total price in a document item.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "totalCurrencyPrice": {
            "type": "number",
            "description": "Total currency price in a document item.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "basicPrice": {
            "type": "number",
            "description": "A price without VAT in a document item.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "basicCurrencyPrice": {
            "type": "number",
            "description": "A currency price without VAT in a document item.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "totalVat": {
            "type": "number",
            "description": "A VAT in a document item.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "totalCurrencyVat": {
            "type": "number",
            "description": "A currency VAT in a document item.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "vatCode": {
            "type": "string",
            "description": "A code of VAT.",
            "nullable": true,
            "example": "NUTZ"
          },
          "vatRate": {
            "type": "number",
            "description": "A rate of VAT.\r\nIt should be specified if ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.InvoiceOutItemUpdate.VatCode is not.",
            "format": "double",
            "nullable": true,
            "example": 21
          },
          "unitPrice": {
            "type": "number",
            "description": "A price for a unit.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "unitCurrencyPrice": {
            "type": "number",
            "description": "A currency price for a unit.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "quantityInUnit": {
            "type": "number",
            "description": "A quantity in a unit.",
            "format": "double",
            "nullable": true,
            "example": 1.5
          },
          "currency": {
            "maxLength": 3,
            "minLength": 1,
            "type": "string",
            "description": "A code of currency. \r\nDon't specify for a default currency code.",
            "nullable": true,
            "example": "EUR"
          },
          "itemName": {
            "type": "string",
            "description": "A name of item, eg. name of goods (ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.InvoiceOutItemUpdate.GoodsId).  \r\nIt doesn't have to be filled when ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.InvoiceOutItemUpdate.GoodsId is specified.",
            "nullable": true,
            "example": "Postage fee"
          },
          "matchingSymbol": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "Matching symbol. Used for accounting operations.",
            "nullable": true,
            "example": "00000000123"
          },
          "goodsId": {
            "type": "integer",
            "description": "Identifier of goods.",
            "format": "int32",
            "nullable": true
          },
          "measureUnitId": {
            "type": "integer",
            "description": "Unit of measure",
            "format": "int32",
            "nullable": true
          },
          "action": {
            "$ref": "#/components/schemas/ItemAction"
          },
          "itemId": {
            "type": "integer",
            "description": "Identifier of an item for a main record. \r\nIn fact, it is an identity db identifier of the item. \r\nIt can be zero or less then zero for items to insert (or you can omit it in a contract at all). \r\nIn this cases, new item will be generated.\r\nIf you specify the item identifier, the item will be updated by values in a contract .\r\nIf you specify the item identifier and you set the ASOL.Nephrite.WebAPI.Contracts.ItemModelChangeBase.Action to ASOL.Nephrite.WebAPI.Contracts.ItemAction.Delete, the item will deleted.",
            "format": "int32"
          },
          "rowOrdinalNumber": {
            "type": "integer",
            "description": "Row ordinal number.",
            "format": "int32"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelChange"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfUserDefinedAttributeChange"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfForeignKeyRelationItemChange"
          }
        },
        "additionalProperties": false,
        "description": "Contract to update an item of record of an invoice out record."
      },
      "InvoiceOutResult": {
        "required": [
          "classId"
        ],
        "type": "object",
        "properties": {
          "invoiceNo": {
            "type": "string",
            "description": "Number of an invoice. \r\nIt is a ASOL.Nephrite.WebAPI.Contracts.IModelBase.Name attribute.",
            "nullable": true,
            "example": "IO00569875656"
          },
          "totalPrice": {
            "type": "number",
            "description": "Total price in document.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "totalCurrencyPrice": {
            "type": "number",
            "description": "Total currency price in document.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "isInForeignCurrency": {
            "type": "string",
            "description": "Is a document in a foreign currency? If ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.InvoiceOutResult.Currency is not specified, you should not specify this property too.\r\nA - Yes, N - No.",
            "nullable": true,
            "example": "N"
          },
          "currency": {
            "type": "string",
            "description": "A code of currency. \r\nDon't specify for a default currency code!",
            "nullable": true,
            "example": "EUR"
          },
          "erDate": {
            "type": "string",
            "description": "E/R date.\r\nDon't specify for a default currency code!",
            "format": "date-time",
            "nullable": true,
            "example": "2021-11-01T00:00:00.000Z"
          },
          "exchangeRateUnit": {
            "type": "integer",
            "description": "Exchange rate unit. 1 in most cases.\r\nDon't specify for a default currency code!",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "exchangeRate": {
            "type": "number",
            "description": "Exchange rate.\r\nDon't specify for a default currency code!",
            "format": "double",
            "nullable": true,
            "example": 1
          },
          "issueDate": {
            "type": "string",
            "description": "Date of issue.",
            "format": "date-time",
            "nullable": true,
            "example": "2021-11-01T00:00:00.000Z"
          },
          "dueDate": {
            "type": "string",
            "description": "Due date.",
            "format": "date-time",
            "nullable": true,
            "example": "2021-11-01T00:00:00.000Z"
          },
          "vatDueDate": {
            "type": "string",
            "description": "Due date.",
            "format": "date-time",
            "nullable": true,
            "example": "2021-11-01T00:00:00.000Z"
          },
          "transactionDate": {
            "type": "string",
            "description": "Transaction date.",
            "format": "date-time",
            "nullable": true,
            "example": "2021-11-01T00:00:00.000Z"
          },
          "paymentType": {
            "type": "string",
            "description": "<br>\r\n            Type of payment.\r\n            \r\n<br>\r\n  <list type=\"table\">\r\n    <item>P - Payment order</item>\r\n    <item>S - Post.order</item>\r\n    <item>H - In cash</item>\r\n    <item>K - Compensation</item>\r\n    <item>I - Collect.</item>\r\n    <item>D - C.O.D. </item>\r\n    <item>B - Bill of exch.</item>\r\n    <item>L - Plan </item>\r\n    <item>A - By paym.card</item>\r\n    <item>R - Adv.payment</item>\r\n    <item>T - Letter of credit</item>\r\n    <item>O - SIPO (joint collection of payments from inhabitants)</item>\r\n    <item>Z - Voucher (gift certificate)</item>\r\n    <item>C - Delivery note</item>\r\n    <item>J - Other</item>\r\n    <item>N - Personal account</item>\r\n    <item>F - Factoring</item>\r\n  </list>\r\n",
            "nullable": true,
            "example": "A"
          },
          "variableSymbol": {
            "type": "string",
            "description": "Variable symbol of a payment.",
            "nullable": true,
            "example": "00000000123"
          },
          "matchingSymbol": {
            "type": "string",
            "description": "Matching symbol. Used for accounting operations. It can be the same as ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.InvoiceOutResult.VariableSymbol.",
            "nullable": true,
            "example": "00000000123"
          },
          "note": {
            "type": "string",
            "description": "A note.",
            "nullable": true
          },
          "constantSymbol": {
            "type": "string",
            "description": "A constant symbol of a payment.",
            "nullable": true,
            "example": "0204"
          },
          "specificSymbol": {
            "type": "string",
            "description": "A specific symbol of a payment.",
            "nullable": true,
            "example": "00001"
          },
          "customerId": {
            "type": "integer",
            "description": "Identifier of ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.InvoiceOutResult.Customer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "customer": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "branchOfficeId": {
            "type": "integer",
            "description": "Identifier of a branch office/sub-branche office.",
            "format": "int32",
            "nullable": true
          },
          "branchOffice": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "transportMethodId": {
            "type": "integer",
            "description": "Identifier of a transport method.",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "transportMethod": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "warehouseId": {
            "type": "integer",
            "description": "Identifier of ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.InvoiceOutResult.Warehouse",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "warehouse": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "bankAccountId": {
            "type": "integer",
            "description": "Identifier of a bank account number.",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "bankAccount": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceOutItemResult"
            },
            "description": "Items of records. Optional.",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "Identifier (PK) of a record.",
            "format": "int32",
            "example": 1
          },
          "classId": {
            "type": "integer",
            "description": "Identifier of the class of the entity.",
            "format": "int32",
            "example": 1023
          },
          "className": {
            "type": "string",
            "description": "Localized name of an entity class. Optional.",
            "nullable": true,
            "example": "My class name"
          },
          "folderId": {
            "type": "integer",
            "description": "Identifier of the folder.",
            "format": "int32",
            "example": 123
          },
          "folderName": {
            "type": "string",
            "description": "Localized name of an entity folder. Optional.",
            "nullable": true,
            "example": "My folder name"
          },
          "lastUpdatedOn": {
            "type": "string",
            "description": "Gets or sets an entity last update date and time.\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "description": "Gets or sets date and time when entity was created .\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "Gets entity timestamp.",
            "nullable": true,
            "example": "00000000000117CB"
          },
          "gunid": {
            "type": "string",
            "description": "Global record identifier within several databases.\r\nThis value is generated by database on a back-end.",
            "nullable": true,
            "example": "00000K00001U00000P"
          },
          "createdById": {
            "type": "integer",
            "description": "Primary key of the creator of the entity/record.",
            "format": "int32",
            "nullable": true,
            "example": 69
          },
          "createdBy": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "lastUpdatedById": {
            "type": "integer",
            "description": "Primary key of the last updated user of the entity",
            "format": "int32",
            "nullable": true,
            "example": 69
          },
          "lastUpdatedBy": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelResult"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfIUserDefinedAttributeResult"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfIForeignKeyRelationItemResult"
          },
          "reference": {
            "type": "string",
            "description": "Reference no. of record.",
            "nullable": true,
            "example": "X0000001"
          },
          "name": {
            "type": "string",
            "description": "Name of record.",
            "nullable": true,
            "example": "Record name"
          }
        },
        "additionalProperties": false,
        "description": "Contracts which is used to retrieve data of an invoice out."
      },
      "InvoiceOutUpdate": {
        "type": "object",
        "properties": {
          "invoiceNo": {
            "type": "string",
            "description": "Number of an invoice. \r\nIt is a ASOL.Nephrite.WebAPI.Contracts.IModelBase.Name attribute.",
            "nullable": true,
            "example": "IO00569875656"
          },
          "totalPrice": {
            "type": "number",
            "description": "Total price in document.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "totalCurrencyPrice": {
            "type": "number",
            "description": "Total currency price in document.",
            "format": "double",
            "nullable": true,
            "example": 123.23
          },
          "isInForeignCurrency": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Is a document in a foreign currency? If ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.InvoiceOutUpdate.Currency is not specified, you should not specify this property too.\r\nA - Yes, N - No.",
            "nullable": true,
            "example": "N"
          },
          "currency": {
            "maxLength": 3,
            "minLength": 1,
            "type": "string",
            "description": "A code of currency. \r\nDon't specify for a default currency code!",
            "nullable": true,
            "example": "EUR"
          },
          "erDate": {
            "type": "string",
            "description": "E/R date.\r\nDon't specify for a default currency code!",
            "format": "date-time",
            "nullable": true,
            "example": "2021-11-01T00:00:00.000Z"
          },
          "exchangeRateUnit": {
            "type": "integer",
            "description": "Exchange rate unit. 1 in most cases.\r\nDon't specify for a default currency code!",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "exchangeRate": {
            "type": "number",
            "description": "Exchange rate.\r\nDon't specify for a default currency code!",
            "format": "double",
            "nullable": true,
            "example": 1
          },
          "issueDate": {
            "type": "string",
            "description": "Date of issue.",
            "format": "date-time",
            "nullable": true,
            "example": "2021-11-01T00:00:00.000Z"
          },
          "dueDate": {
            "type": "string",
            "description": "Due date.",
            "format": "date-time",
            "nullable": true,
            "example": "2021-11-01T00:00:00.000Z"
          },
          "vatDueDate": {
            "type": "string",
            "description": "Due date.",
            "format": "date-time",
            "nullable": true,
            "example": "2021-11-01T00:00:00.000Z"
          },
          "transactionDate": {
            "type": "string",
            "description": "Transaction date.",
            "format": "date-time",
            "nullable": true,
            "example": "2021-11-01T00:00:00.000Z"
          },
          "paymentType": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "<br>\r\n            Type of payment.\r\n            \r\n<br>\r\n  <list type=\"table\">\r\n    <item>P - Payment order</item>\r\n    <item>S - Post.order</item>\r\n    <item>H - In cash</item>\r\n    <item>K - Compensation</item>\r\n    <item>I - Collect.</item>\r\n    <item>D - C.O.D. </item>\r\n    <item>B - Bill of exch.</item>\r\n    <item>L - Plan </item>\r\n    <item>A - By paym.card</item>\r\n    <item>R - Adv.payment</item>\r\n    <item>T - Letter of credit</item>\r\n    <item>O - SIPO (joint collection of payments from inhabitants)</item>\r\n    <item>Z - Voucher (gift certificate)</item>\r\n    <item>C - Delivery note</item>\r\n    <item>J - Other</item>\r\n    <item>N - Personal account</item>\r\n    <item>F - Factoring</item>\r\n  </list>\r\n",
            "nullable": true,
            "example": "A"
          },
          "variableSymbol": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "Variable symbol of a payment.",
            "nullable": true,
            "example": "00000000123"
          },
          "matchingSymbol": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "Matching symbol. Used for accounting operations. It can be the same as ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.InvoiceOutUpdate.VariableSymbol.",
            "nullable": true,
            "example": "00000000123"
          },
          "note": {
            "type": "string",
            "description": "A note.",
            "nullable": true
          },
          "constantSymbol": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "A constant symbol of a payment.",
            "nullable": true,
            "example": "0204"
          },
          "specificSymbol": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "A specific symbol of a payment.",
            "nullable": true,
            "example": "00001"
          },
          "customerId": {
            "type": "integer",
            "description": "Identifier of a Customer.",
            "format": "int32",
            "nullable": true
          },
          "branchOfficeId": {
            "type": "integer",
            "description": "Identifier of a branch office/sub-branche office.",
            "format": "int32",
            "nullable": true
          },
          "transportMethodId": {
            "type": "integer",
            "description": "Identifier of a transport method.",
            "format": "int32",
            "nullable": true
          },
          "warehouseId": {
            "type": "integer",
            "description": "Identifier of Warehouse",
            "format": "int32",
            "nullable": true
          },
          "bankAccountId": {
            "type": "integer",
            "description": "Identifier of a bank account number.",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceOutItemUpdate"
            },
            "description": "Items of records. Optional.",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "description": "Reference no. of record.",
            "nullable": true,
            "example": "X000000001"
          },
          "name": {
            "type": "string",
            "description": "Name of record.",
            "nullable": true,
            "example": "My name"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelChange"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfUserDefinedAttributeChange"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfForeignKeyRelationItemChange"
          }
        },
        "additionalProperties": false,
        "description": "Contract to update a record of an invoice out entity."
      },
      "ItemAction": {
        "enum": [
          "insertUpdate",
          "delete"
        ],
        "type": "string",
        "description": "Action for item"
      },
      "KeyValuePairOfStringStringValues": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "KontacePrvodokladuDto": {
        "type": "object",
        "properties": {
          "kontaceId": {
            "type": "integer",
            "format": "int32"
          },
          "interniCislo": {
            "type": "string",
            "nullable": true
          },
          "kontaceNazev": {
            "type": "string",
            "nullable": true
          },
          "sbornikNazev": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Třída Kontace prvodokladu (do Response)"
      },
      "LegalFormResult": {
        "required": [
          "classId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Primary key of a location.",
            "format": "int32"
          },
          "code": {
            "type": "string",
            "description": "Additional info about a legal form.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Additional info about a legal form.",
            "nullable": true
          },
          "res": {
            "type": "string",
            "description": "RES (register of economic entities) code",
            "nullable": true
          },
          "countryId": {
            "type": "integer",
            "description": "Identifier of ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.LegalFormResult.Country",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "country": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "classId": {
            "type": "integer",
            "description": "Identifier of the class of the entity.",
            "format": "int32",
            "example": 1023
          },
          "className": {
            "type": "string",
            "description": "Localized name of an entity class. Optional.",
            "nullable": true,
            "example": "My class name"
          },
          "folderId": {
            "type": "integer",
            "description": "Identifier of the folder.",
            "format": "int32",
            "example": 123
          },
          "folderName": {
            "type": "string",
            "description": "Localized name of an entity folder. Optional.",
            "nullable": true,
            "example": "My folder name"
          },
          "lastUpdatedOn": {
            "type": "string",
            "description": "Gets or sets an entity last update date and time.\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "description": "Gets or sets date and time when entity was created .\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "Gets entity timestamp.",
            "nullable": true,
            "example": "00000000000117CB"
          },
          "gunid": {
            "type": "string",
            "description": "Global record identifier within several databases.\r\nThis value is generated by database on a back-end.",
            "nullable": true,
            "example": "00000K00001U00000P"
          },
          "createdById": {
            "type": "integer",
            "description": "Primary key of the creator of the entity/record.",
            "format": "int32",
            "nullable": true,
            "example": 69
          },
          "createdBy": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "lastUpdatedById": {
            "type": "integer",
            "description": "Primary key of the last updated user of the entity",
            "format": "int32",
            "nullable": true,
            "example": 69
          },
          "lastUpdatedBy": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelResult"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfIUserDefinedAttributeResult"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfIForeignKeyRelationItemResult"
          },
          "reference": {
            "type": "string",
            "description": "Reference no. of record.",
            "nullable": true,
            "example": "X0000001"
          },
          "name": {
            "type": "string",
            "description": "Name of record.",
            "nullable": true,
            "example": "Record name"
          }
        },
        "additionalProperties": false,
        "description": "Contract to get a legal form"
      },
      "LocationCreate": {
        "required": [
          "folderId"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Additional info about an location.",
            "nullable": true
          },
          "roomTypeId": {
            "type": "integer",
            "description": "Identifier of room type.",
            "format": "int32",
            "nullable": true
          },
          "buildingId": {
            "type": "integer",
            "description": "Identifier of a building.",
            "format": "int32",
            "nullable": true
          },
          "folderId": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "Identifier of a folder where to create a record.\r\n0 means a default folder of the class/entity.",
            "format": "int32",
            "example": 1023
          },
          "reference": {
            "type": "string",
            "description": "Reference no. of record.",
            "nullable": true,
            "example": "X000000001"
          },
          "name": {
            "type": "string",
            "description": "Name of record.",
            "nullable": true,
            "example": "My name"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelChange"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfUserDefinedAttributeChange"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfForeignKeyRelationItemChange"
          }
        },
        "additionalProperties": false,
        "description": "Contract to create record of a Location entity."
      },
      "LocationResult": {
        "required": [
          "classId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Primary key of a location.",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "description": "Additional info about a location.",
            "nullable": true
          },
          "state": {
            "type": "string",
            "description": "State of room - Active, Closed, Temporarily out of order.",
            "nullable": true
          },
          "dateFrom": {
            "type": "string",
            "description": "Date when the location is being used from.",
            "format": "date-time",
            "nullable": true
          },
          "dateTo": {
            "type": "string",
            "description": "Date when the location is canceled from.",
            "format": "date-time",
            "nullable": true
          },
          "roomTypeId": {
            "type": "integer",
            "description": "Identifier of room type.",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "roomType": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "buildingId": {
            "type": "integer",
            "description": "Identifier of a building.",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "building": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "classId": {
            "type": "integer",
            "description": "Identifier of the class of the entity.",
            "format": "int32",
            "example": 1023
          },
          "className": {
            "type": "string",
            "description": "Localized name of an entity class. Optional.",
            "nullable": true,
            "example": "My class name"
          },
          "folderId": {
            "type": "integer",
            "description": "Identifier of the folder.",
            "format": "int32",
            "example": 123
          },
          "folderName": {
            "type": "string",
            "description": "Localized name of an entity folder. Optional.",
            "nullable": true,
            "example": "My folder name"
          },
          "lastUpdatedOn": {
            "type": "string",
            "description": "Gets or sets an entity last update date and time.\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "description": "Gets or sets date and time when entity was created .\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "Gets entity timestamp.",
            "nullable": true,
            "example": "00000000000117CB"
          },
          "gunid": {
            "type": "string",
            "description": "Global record identifier within several databases.\r\nThis value is generated by database on a back-end.",
            "nullable": true,
            "example": "00000K00001U00000P"
          },
          "createdById": {
            "type": "integer",
            "description": "Primary key of the creator of the entity/record.",
            "format": "int32",
            "nullable": true,
            "example": 69
          },
          "createdBy": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "lastUpdatedById": {
            "type": "integer",
            "description": "Primary key of the last updated user of the entity",
            "format": "int32",
            "nullable": true,
            "example": 69
          },
          "lastUpdatedBy": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelResult"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfIUserDefinedAttributeResult"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfIForeignKeyRelationItemResult"
          },
          "reference": {
            "type": "string",
            "description": "Reference no. of record.",
            "nullable": true,
            "example": "X0000001"
          },
          "name": {
            "type": "string",
            "description": "Name of record.",
            "nullable": true,
            "example": "Record name"
          }
        },
        "additionalProperties": false,
        "description": "Location of asset."
      },
      "MajetekDto": {
        "type": "object",
        "properties": {
          "porizovaciCena": {
            "type": "number",
            "description": "Pořizovací cena.",
            "format": "double"
          },
          "aktualniCena": {
            "type": "number",
            "description": "Aktuální cena.",
            "format": "double"
          },
          "datumPorizeni": {
            "type": "string",
            "description": "Datum pořízení.",
            "format": "date-time",
            "nullable": true
          },
          "datumVyrazeni": {
            "type": "string",
            "description": "Datum vyřazení.",
            "format": "date-time",
            "nullable": true
          },
          "datumZarazeni": {
            "type": "string",
            "description": "Datum zařazení.",
            "format": "date-time",
            "nullable": true
          },
          "inventarniCislo": {
            "type": "string",
            "description": "Inventární číslo.",
            "nullable": true
          },
          "majetekId": {
            "type": "integer",
            "description": "Jednoznačný identifikátor.",
            "format": "int32"
          },
          "mistnost": {
            "$ref": "#/components/schemas/MistnostDto"
          },
          "nazev": {
            "type": "string",
            "description": "Název.",
            "nullable": true
          },
          "zodpovednaOsoba": {
            "$ref": "#/components/schemas/ZamestnanecDto"
          },
          "stav": {
            "type": "integer",
            "description": "Stav: 1 - Převzat do evidence, 2 - Zařazen, 3 - Aktivní, 4 - Připraven k vyřazení, 5 - Vyřazen, 6 - Převeden, 7 - Stornován, 8 - Předimportován, 9 - Předzpracován.",
            "format": "int32"
          },
          "vyrobniCislo": {
            "type": "string",
            "description": "Výrobní číslo.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Majetek DTO"
      },
      "Microsoft.AspNetCore.Mvc.ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "MistnostDto": {
        "type": "object",
        "properties": {
          "cislo": {
            "type": "string",
            "description": "Číslo místnosti.",
            "nullable": true
          },
          "mistnostId": {
            "type": "integer",
            "format": "int32"
          },
          "nazev": {
            "type": "string",
            "description": "Název místnosti.",
            "nullable": true
          },
          "stav": {
            "type": "string",
            "description": "Stav (valuace atributu třídy Místnosti, atribut Stav): 0 - Aktivní, 1 - Uzavřena, 2 - Dočasně mimo provoz.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Místnost DTO"
      },
      "OrganizaceCreate": {
        "type": "object",
        "properties": {
          "datumNarozeni": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "example": "2001-01-29"
          },
          "datumUmrti": {
            "maxLength": 30,
            "type": "string",
            "nullable": true
          },
          "dic": {
            "maxLength": 15,
            "type": "string",
            "nullable": true,
            "example": "CZ11111111111"
          },
          "eMail": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "example": "org@org.net"
          },
          "ico": {
            "maxLength": 15,
            "type": "string",
            "nullable": true,
            "example": "22222222222"
          },
          "idPartnera": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "example": "EXP_00001"
          },
          "jmeno": {
            "maxLength": 50,
            "type": "string",
            "nullable": true,
            "example": "Josef"
          },
          "nazevDoplnujici": {
            "maxLength": 80,
            "type": "string",
            "nullable": true,
            "example": "NAZEV_DOPLN"
          },
          "nazevOrganizace": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "example": "ALLSOFT s.r.o"
          },
          "nazevZkraceny": {
            "maxLength": 40,
            "type": "string",
            "nullable": true,
            "example": "NAZEV_ZKR"
          },
          "organizaceIdEx": {
            "maxLength": 20,
            "type": "string",
            "nullable": true,
            "example": "OIX_0001"
          },
          "platceDph": {
            "maxLength": 1,
            "type": "string",
            "nullable": true,
            "example": "A"
          },
          "poznamka": {
            "type": "string",
            "nullable": true,
            "example": "POZNAMKA"
          },
          "pravniForma": {
            "maxLength": 6,
            "type": "string",
            "nullable": true,
            "example": "SO"
          },
          "prijmeni": {
            "maxLength": 50,
            "type": "string",
            "nullable": true,
            "example": "prijmeni"
          },
          "rodneCislo": {
            "maxLength": 15,
            "type": "string",
            "nullable": true,
            "example": "1234567777"
          },
          "zemeId": {
            "maxLength": 3,
            "type": "string",
            "nullable": true,
            "example": "CZ"
          },
          "adresy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Adresa"
            },
            "description": "Seznam adres organizace",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganizaceDto": {
        "type": "object",
        "properties": {
          "cisloOrganizace": {
            "type": "string",
            "nullable": true
          },
          "datumNarozeni": {
            "type": "string",
            "format": "date-time"
          },
          "datumUmrti": {
            "type": "string",
            "format": "date-time"
          },
          "dic": {
            "type": "string",
            "nullable": true
          },
          "eMail": {
            "type": "string",
            "nullable": true
          },
          "ico": {
            "type": "string",
            "nullable": true
          },
          "idPartnera": {
            "type": "string",
            "nullable": true
          },
          "jmeno": {
            "type": "string",
            "nullable": true
          },
          "nazevDoplnujici": {
            "type": "string",
            "nullable": true
          },
          "nazevOrganizace": {
            "type": "string",
            "nullable": true
          },
          "nazevZkraceny": {
            "type": "string",
            "nullable": true
          },
          "organizaceIdEx": {
            "type": "string",
            "nullable": true
          },
          "platceDph": {
            "type": "string",
            "nullable": true
          },
          "poznamka": {
            "type": "string",
            "nullable": true
          },
          "pravniForma": {
            "type": "string",
            "nullable": true
          },
          "prijmeni": {
            "type": "string",
            "nullable": true
          },
          "rodneCislo": {
            "type": "string",
            "nullable": true
          },
          "stav": {
            "type": "string",
            "nullable": true
          },
          "zemeId": {
            "type": "string",
            "nullable": true
          },
          "adresy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Adresa"
            },
            "description": "Seznam adres organizace",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganizaceUpdate": {
        "type": "object",
        "properties": {
          "datumNarozeni": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "example": "2001-01-29"
          },
          "datumUmrti": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "example": "2079-03-27"
          },
          "dic": {
            "maxLength": 15,
            "type": "string",
            "nullable": true,
            "example": "CZ11111111111"
          },
          "eMail": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "example": "org@org.net"
          },
          "idPartnera": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "example": "EXP_00001"
          },
          "jmeno": {
            "maxLength": 50,
            "type": "string",
            "nullable": true,
            "example": "Josef"
          },
          "nazevDoplnujici": {
            "maxLength": 80,
            "type": "string",
            "nullable": true,
            "example": "NAZEV_DOPLN"
          },
          "nazevOrganizace": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "example": "ALLSOFT s.r.o"
          },
          "nazevZkraceny": {
            "maxLength": 40,
            "type": "string",
            "nullable": true,
            "example": "NAZEV ZKRACENY"
          },
          "organizaceIdEx": {
            "maxLength": 20,
            "type": "string",
            "nullable": true,
            "example": "OIX_0001"
          },
          "platceDph": {
            "maxLength": 1,
            "type": "string",
            "nullable": true,
            "example": "A"
          },
          "poznamka": {
            "type": "string",
            "nullable": true,
            "example": "POZNAMKA"
          },
          "pravniForma": {
            "maxLength": 6,
            "type": "string",
            "nullable": true,
            "example": "SO"
          },
          "prijmeni": {
            "maxLength": 50,
            "type": "string",
            "nullable": true,
            "example": "prijmeni"
          },
          "zemeId": {
            "maxLength": 3,
            "type": "string",
            "nullable": true,
            "example": "CZ"
          },
          "adresy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdresaUpdate"
            },
            "description": "Seznam adres organizace",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OutputFunctionParams": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IOutputFunctionParamItem"
            },
            "description": "Data of output parameters.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Output parameters of function."
      },
      "PhoneConnectionCreate": {
        "required": [
          "destinationAttribute",
          "folderId",
          "recordClassId"
        ],
        "type": "object",
        "properties": {
          "subscribersPhoneNumber": {
            "type": "string",
            "description": "Subscriber's ph.no.",
            "nullable": true,
            "example": "244104111"
          },
          "destinationAttribute": {
            "maxLength": 70,
            "minLength": 1,
            "type": "string",
            "description": "A destination attribute where the phone connection is linked up.",
            "example": "lcs.organizace.telefon"
          },
          "recordClassId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "Number of class of ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.PhoneConnectionCreate.DestinationAttribute.",
            "format": "int32",
            "example": 12
          },
          "objectNumber": {
            "type": "integer",
            "description": "In case ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.PhoneConnectionCreate.DestinationAttribute is an attribute on items, this is a primary key of the item. .",
            "format": "int32",
            "nullable": true
          },
          "countryId": {
            "type": "integer",
            "description": "Identifier of Country",
            "format": "int32",
            "nullable": true
          },
          "nationalDialingCodeId": {
            "type": "integer",
            "description": "Identifier ofNationalDialingCode",
            "format": "int32",
            "nullable": true
          },
          "subjectId": {
            "type": "integer",
            "description": "Identifier of Subject",
            "format": "int32",
            "nullable": true
          },
          "folderId": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "Identifier of a folder where to create a record.\r\n0 means a default folder of the class/entity.",
            "format": "int32",
            "example": 1023
          },
          "reference": {
            "type": "string",
            "description": "Reference no. of record.",
            "nullable": true,
            "example": "X000000001"
          },
          "name": {
            "type": "string",
            "description": "Name of record.",
            "nullable": true,
            "example": "My name"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelChange"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfUserDefinedAttributeChange"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfForeignKeyRelationItemChange"
          }
        },
        "additionalProperties": false,
        "description": "Contract to create record of a phone connection entity/class."
      },
      "PhoneConnectionResult": {
        "required": [
          "classId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Primary key of a location.",
            "format": "int32"
          },
          "subscribersPhoneNumber": {
            "type": "string",
            "description": "Subscriber's ph.no.",
            "nullable": true
          },
          "destinationAttribute": {
            "type": "string",
            "description": "A destination attribute where the phone connection is linked up.",
            "nullable": true
          },
          "recordClassId": {
            "type": "integer",
            "description": "Number of class of ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.PhoneConnectionResult.DestinationAttribute.",
            "format": "int32"
          },
          "objectNumber": {
            "type": "integer",
            "description": "In case ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.PhoneConnectionResult.DestinationAttribute is an attribute on items, this is a primary key of the item. .",
            "format": "int32",
            "nullable": true
          },
          "countryId": {
            "type": "integer",
            "description": "Identifier of ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.PhoneConnectionResult.Country",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "country": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "nationalDialingCodeId": {
            "type": "integer",
            "description": "Identifier of ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.PhoneConnectionResult.NationalDialingCode",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "nationalDialingCode": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "subjectId": {
            "type": "integer",
            "description": "Identifier of ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.PhoneConnectionResult.Subject",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "subject": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "classId": {
            "type": "integer",
            "description": "Identifier of the class of the entity.",
            "format": "int32",
            "example": 1023
          },
          "className": {
            "type": "string",
            "description": "Localized name of an entity class. Optional.",
            "nullable": true,
            "example": "My class name"
          },
          "folderId": {
            "type": "integer",
            "description": "Identifier of the folder.",
            "format": "int32",
            "example": 123
          },
          "folderName": {
            "type": "string",
            "description": "Localized name of an entity folder. Optional.",
            "nullable": true,
            "example": "My folder name"
          },
          "lastUpdatedOn": {
            "type": "string",
            "description": "Gets or sets an entity last update date and time.\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "description": "Gets or sets date and time when entity was created .\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "Gets entity timestamp.",
            "nullable": true,
            "example": "00000000000117CB"
          },
          "gunid": {
            "type": "string",
            "description": "Global record identifier within several databases.\r\nThis value is generated by database on a back-end.",
            "nullable": true,
            "example": "00000K00001U00000P"
          },
          "createdById": {
            "type": "integer",
            "description": "Primary key of the creator of the entity/record.",
            "format": "int32",
            "nullable": true,
            "example": 69
          },
          "createdBy": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "lastUpdatedById": {
            "type": "integer",
            "description": "Primary key of the last updated user of the entity",
            "format": "int32",
            "nullable": true,
            "example": 69
          },
          "lastUpdatedBy": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelResult"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfIUserDefinedAttributeResult"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfIForeignKeyRelationItemResult"
          },
          "reference": {
            "type": "string",
            "description": "Reference no. of record.",
            "nullable": true,
            "example": "X0000001"
          },
          "name": {
            "type": "string",
            "description": "Name of record.",
            "nullable": true,
            "example": "Record name"
          }
        },
        "additionalProperties": false,
        "description": "Contract to get a data of phone connection record."
      },
      "PhoneConnectionUpdate": {
        "required": [
          "destinationAttribute",
          "recordClassId"
        ],
        "type": "object",
        "properties": {
          "subscribersPhoneNumber": {
            "type": "string",
            "description": "Subscriber's ph.no.",
            "nullable": true,
            "example": "244104111"
          },
          "destinationAttribute": {
            "maxLength": 70,
            "minLength": 1,
            "type": "string",
            "description": "A destination attribute where the phone connection is linked up.",
            "example": "lcs.organizace.telefon"
          },
          "recordClassId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "Number of class of ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.PhoneConnectionUpdate.DestinationAttribute.",
            "format": "int32",
            "example": 12
          },
          "objectNumber": {
            "type": "integer",
            "description": "In case ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.PhoneConnectionUpdate.DestinationAttribute is an attribute on items, this is a primary key of the item. .",
            "format": "int32",
            "nullable": true
          },
          "countryId": {
            "type": "integer",
            "description": "Identifier of Country",
            "format": "int32",
            "nullable": true
          },
          "nationalDialingCodeId": {
            "type": "integer",
            "description": "Identifier ofNationalDialingCode",
            "format": "int32",
            "nullable": true
          },
          "subjectId": {
            "type": "integer",
            "description": "Identifier of Subject",
            "format": "int32",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "description": "Reference no. of record.",
            "nullable": true,
            "example": "X000000001"
          },
          "name": {
            "type": "string",
            "description": "Name of record.",
            "nullable": true,
            "example": "My name"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelChange"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfUserDefinedAttributeChange"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfForeignKeyRelationItemChange"
          }
        },
        "additionalProperties": false,
        "description": "Contract to create record of a phone connection entity/class."
      },
      "PlatceCreate": {
        "required": [
          "kodKnihy",
          "variabilniSymbol"
        ],
        "type": "object",
        "properties": {
          "kodKnihy": {
            "type": "integer",
            "description": "Kód knihy poplatku",
            "format": "int32",
            "example": 123
          },
          "platceIdEx": {
            "type": "string",
            "nullable": true
          },
          "platnostOd": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "example": "2001-01-29"
          },
          "poznamka": {
            "type": "string",
            "description": "Poznámka",
            "nullable": true
          },
          "spojovaciCislo": {
            "type": "number",
            "format": "double"
          },
          "specifickySymbol": {
            "type": "number",
            "format": "double"
          },
          "variabilniSymbol": {
            "maxLength": 10,
            "type": "string",
            "description": "Variabilní symbol"
          },
          "organizace": {
            "$ref": "#/components/schemas/OrganizaceCreate"
          }
        },
        "additionalProperties": false
      },
      "PlatceDto": {
        "type": "object",
        "properties": {
          "celkemZaPredpisy": {
            "type": "number",
            "format": "double"
          },
          "kodKnihy": {
            "type": "integer",
            "format": "int32"
          },
          "platceId": {
            "type": "integer",
            "format": "int32"
          },
          "platceIdEx": {
            "type": "string",
            "nullable": true
          },
          "platnostDo": {
            "type": "string",
            "format": "date-time"
          },
          "platnostOd": {
            "type": "string",
            "format": "date-time"
          },
          "poznamka": {
            "type": "string",
            "nullable": true
          },
          "specifickySymbol": {
            "type": "number",
            "format": "double"
          },
          "spojovaciCislo": {
            "type": "number",
            "format": "double"
          },
          "variabilniSymbol": {
            "type": "string",
            "nullable": true
          },
          "zbyvaZaPredpisy": {
            "type": "number",
            "format": "double"
          },
          "organizace": {
            "$ref": "#/components/schemas/OrganizaceDto"
          }
        },
        "additionalProperties": false
      },
      "PlatceInvalidate": {
        "type": "object",
        "properties": {
          "datumUkonceni": {
            "type": "string",
            "nullable": true
          },
          "poznamka": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Třída hodnot pro zneplatnění Plátce"
      },
      "PlatceUpdate": {
        "type": "object",
        "properties": {
          "poznamka": {
            "type": "string",
            "description": "Poznámka",
            "nullable": true
          },
          "spojovaciCislo": {
            "type": "number",
            "description": "Spojovací číslo",
            "format": "double"
          },
          "organizace": {
            "$ref": "#/components/schemas/OrganizaceUpdate"
          }
        },
        "additionalProperties": false
      },
      "PokladniDokladCreate": {
        "required": [
          "cisloPoradace",
          "datumPorizeni",
          "typ"
        ],
        "type": "object",
        "properties": {
          "referenceSubjektu": {
            "type": "string",
            "description": "Interní číslo dokladu.",
            "nullable": true
          },
          "cisloPoradace": {
            "type": "integer",
            "format": "int32"
          },
          "cisloDokladuEx": {
            "type": "string",
            "description": "Číslo dokladu externí.",
            "nullable": true
          },
          "datumDuzp": {
            "type": "string",
            "nullable": true
          },
          "datumPorizeni": {
            "type": "string"
          },
          "pokladniDokladIdEx": {
            "type": "string",
            "nullable": true
          },
          "organizaceSubjekt": {
            "$ref": "#/components/schemas/OrganizaceCreate"
          },
          "poznamka": {
            "type": "string",
            "nullable": true
          },
          "ucelPlatby": {
            "type": "string",
            "nullable": true
          },
          "zpusobUhrady": {
            "type": "string",
            "description": "Způsob úhrady: H - Hotově, P - Platební kartou.",
            "nullable": true
          },
          "typ": {
            "type": "string",
            "description": "Typ pokladního dokladu: P - Příjmový, V - Výdajový."
          },
          "polozky": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PokladniDokladPolozka"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Pokladní doklad"
      },
      "PokladniDokladDto": {
        "type": "object",
        "properties": {
          "cenaCelkem": {
            "type": "number",
            "format": "double"
          },
          "datumDuzp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "datumPorizeni": {
            "type": "string",
            "format": "date-time"
          },
          "organizaceSubjekt": {
            "$ref": "#/components/schemas/OrganizaceDto"
          },
          "pokladniDokladId": {
            "type": "integer",
            "format": "int32"
          },
          "pokladniDokladIdEx": {
            "type": "string",
            "nullable": true
          },
          "poznamka": {
            "type": "string",
            "nullable": true
          },
          "referenceSubjektu": {
            "type": "string",
            "description": "Interní číslo dokladu.",
            "nullable": true
          },
          "stav": {
            "type": "integer",
            "description": "Stav: 0 - Pořízeno, 1 - Zaúčtováno, 7 - Stornováno.",
            "format": "int32"
          },
          "typ": {
            "type": "string",
            "description": "Typ pokladního dokladu: P - Příjmový, V - Výdajový.",
            "nullable": true
          },
          "ucelPlatby": {
            "type": "string",
            "nullable": true
          },
          "zpusobUhrady": {
            "type": "string",
            "description": "Způsob úhrady: H - Hotově, P - Platební kartou.",
            "nullable": true
          },
          "polozky": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PokladniDokladPolozka"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Pokladní doklad DTO"
      },
      "PokladniDokladPolozka": {
        "required": [
          "nazev"
        ],
        "type": "object",
        "properties": {
          "cenaCelkem": {
            "type": "number",
            "description": "Atribut zveřejněn pouze pro čtení dat PokladniDokladDto.\r\nPři uložení hodnotu dopočítá instance třídy sama.",
            "format": "double"
          },
          "cenaJednotkova": {
            "type": "number",
            "description": "Při doplnění této hodnoty se využije atribut pocet a aplikačně se vypočte cenaZaklad a cenaCelkem.\r\nPlatí, že pocet x cenaJednotkova = cenaZaklad.",
            "format": "double"
          },
          "cenaZaklad": {
            "type": "number",
            "description": "Při doplnění této hodnoty se využije atribut pocet a aplikačně se vypočte cenaJednotkova a cenaCelkem.\r\ndefault:\r\npocet =1\r\ncenaJednotkova=cenaZaklad\r\n<remarks>\r\nPovinnost je cena základ nebo množství a cena jednotková (pak se cena základ neuvádí).\r\n</remarks>",
            "format": "double"
          },
          "dphCelkem": {
            "type": "number",
            "format": "double"
          },
          "kodDph": {
            "type": "string",
            "description": "Kód DPH obsahuje referenci na třídu 48 Sazby DPH....kod repretentuje sazbu DPH.",
            "nullable": true
          },
          "nazev": {
            "type": "string",
            "description": "Předmět. Text na řádku."
          },
          "pocet": {
            "type": "number",
            "description": "vychozí hodnota = 1\r\nnení třeba dopňovat\r\nplatí, že\r\npocet x cen_jedn = cenaZaklad",
            "format": "double"
          },
          "hrazenyDokladId": {
            "type": "integer",
            "description": "Jednoznačný identifikátor (číslo subjektu) hrazeného dokladu.",
            "format": "int32"
          },
          "parovaciZnak": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Položka pokladního dokladu"
      },
      "Polozka": {
        "required": [
          "cena_zaklad",
          "nazev"
        ],
        "type": "object",
        "properties": {
          "cena_celkem": {
            "type": "number",
            "description": "Atribut zveřejněn pouze pro čtení dat\r\nFakturaVydanaDto, DobropisDto",
            "format": "double"
          },
          "cena_jedn": {
            "type": "number",
            "description": "není třeba dopňovat\r\nplatí, že\r\npocet x cen_jedn = cena_zaklad",
            "format": "double"
          },
          "cena_zaklad": {
            "type": "number",
            "description": "při doplnění této hodnoty se aplikačně doplní cena_jedn + pocet\r\ndefault\r\npocet =1\r\ncena_jedn=cena_zaklad",
            "format": "double"
          },
          "dph_celkem": {
            "type": "string",
            "nullable": true
          },
          "kod_dph": {
            "type": "string",
            "description": "Kód DPH obsahuje referenci na třídu 48 Sazby DPH....kod repretentuje sazbu DPH",
            "nullable": true
          },
          "nazev": {
            "type": "string"
          },
          "pocet": {
            "type": "number",
            "description": "vychozí hodnota = 1\r\nnení třeba dopňovat\r\nplatí, že\r\npocet x cen_jedn = cena_zaklad",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "PravniForma": {
        "type": "object",
        "properties": {
          "kod": {
            "type": "string",
            "nullable": true
          },
          "kodRES": {
            "type": "string",
            "nullable": true
          },
          "typ": {
            "type": "string",
            "nullable": true
          },
          "popis": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Číselník Právní forma organizace"
      },
      "PredpisCreate": {
        "type": "object",
        "properties": {
          "platceId": {
            "type": "integer",
            "description": "Interní identifikátor Plátce",
            "format": "int32"
          },
          "platceIdEx": {
            "type": "string",
            "description": "Externí identifikátor Plátce",
            "nullable": true
          },
          "predpisIdEx": {
            "type": "string",
            "description": "Externí identifikátor Předpisu",
            "nullable": true
          },
          "faktura": {
            "$ref": "#/components/schemas/FakturaVydanaCreate"
          }
        },
        "additionalProperties": false,
        "description": "Třída Předpisy"
      },
      "PredpisDto": {
        "type": "object",
        "properties": {
          "predpisId": {
            "type": "integer",
            "format": "int32"
          },
          "predpisIdEx": {
            "type": "string",
            "nullable": true
          },
          "platceId": {
            "type": "integer",
            "format": "int32"
          },
          "platceIdEx": {
            "type": "string",
            "nullable": true
          },
          "faktura": {
            "$ref": "#/components/schemas/FakturaVydanaDto"
          }
        },
        "additionalProperties": false,
        "description": "Třída Předpisy (do Response)"
      },
      "PredpisUpdate": {
        "type": "object",
        "properties": {
          "datumSplatnosti": {
            "type": "string",
            "description": "Datum splatnosti",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Třída parametrů pro opravu předpisu pohledávky."
      },
      "PreplatekCreate": {
        "type": "object",
        "properties": {
          "platceId": {
            "type": "integer",
            "description": "Interní identifikátor Plátce",
            "format": "int32"
          },
          "platceIdEx": {
            "type": "string",
            "description": "Externí identifikátor Plátce",
            "nullable": true
          },
          "preplatekIdEx": {
            "type": "string",
            "description": "Externí identifikátor Přeplatku",
            "nullable": true
          },
          "dobropis": {
            "$ref": "#/components/schemas/DobropisFvCreate"
          }
        },
        "additionalProperties": false,
        "description": "Třída Přeplatky"
      },
      "PreplatekDto": {
        "type": "object",
        "properties": {
          "preplatekId": {
            "type": "integer",
            "format": "int32"
          },
          "preplatekIdEx": {
            "type": "string",
            "nullable": true
          },
          "platceId": {
            "type": "integer",
            "format": "int32"
          },
          "platceIdEx": {
            "type": "string",
            "nullable": true
          },
          "dobropis": {
            "$ref": "#/components/schemas/DobropisFvDto"
          }
        },
        "additionalProperties": false,
        "description": "Třída Přeplatky (do Response)"
      },
      "PreplatekUpdate": {
        "type": "object",
        "properties": {
          "datumSplatnosti": {
            "type": "string",
            "description": "Datum splatnosti",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Třída parametrů pro opravu přeplatku pohledávky."
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "errorNumber": {
            "type": "integer",
            "description": "Internal error number. Optional.",
            "format": "int64",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { },
        "description": "A machine-readable format for specifying errors in HTTP API responses based on  https://tools.ietf.org/html/rfc7807"
      },
      "RecordDataRowType": {
        "enum": [
          "header",
          "item"
        ],
        "type": "string",
        "description": "Type of row."
      },
      "RecordId": {
        "type": "object",
        "properties": {
          "id": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "Get valid record number or Record.Empty constant.",
            "format": "int32"
          },
          "classId": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "Get valid class number or 0.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Record identifier for a unique record identification."
      },
      "RecordPartScope": {
        "enum": [
          "none",
          "header",
          "items",
          "all"
        ],
        "type": "string",
        "description": "Defines a part of a record"
      },
      "RecordPeriodItemResult": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Reference code of period (e.g. 2022)",
            "nullable": true,
            "example": "2022"
          },
          "name": {
            "type": "string",
            "description": "Display name of period (e.g. Accounting period)",
            "nullable": true,
            "example": "Accounting period"
          },
          "id": {
            "type": "string",
            "description": "Value of period in HEX format '0x00AA...'",
            "nullable": true,
            "example": "0x0000000080000000000000000000000000000000000000000000000000000000"
          },
          "start": {
            "type": "string",
            "description": "Beginning of a period. \r\nOptional. Some kinds of periods does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "end": {
            "type": "string",
            "description": "End of a period.\r\nOptional. Some kinds of periods does not define this property.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about a period."
      },
      "RecordPeriodKind": {
        "enum": [
          "Calendar",
          "Accounting",
          "Custom",
          "All"
        ],
        "type": "string",
        "description": "Kind of period to get."
      },
      "RecordPeriodRange": {
        "enum": [
          "Current",
          "Defined",
          "All"
        ],
        "type": "string",
        "description": "Range of periods to get."
      },
      "RecordPeriodResponse": {
        "type": "object",
        "properties": {
          "periods": {
            "$ref": "#/components/schemas/RecordPeriodsResult"
          },
          "currentPeriods": {
            "$ref": "#/components/schemas/CurrentRecordPeriodResult"
          }
        },
        "additionalProperties": false,
        "description": "Contract that contains information about periods."
      },
      "RecordPeriodsResult": {
        "type": "object",
        "properties": {
          "calendar": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordPeriodItemResult"
            },
            "description": "Collection of defined calendar periods.",
            "nullable": true
          },
          "accounting": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordPeriodItemResult"
            },
            "description": "Collection of defined accounting periods.",
            "nullable": true
          },
          "custom": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomRecordPeriodItemResult"
            },
            "description": "Collection of defined custom periods.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Defined periods."
      },
      "RelatedRecordModelChange": {
        "required": [
          "classId",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "Identifier (PK) of an entity/record.\r\nZero means unset.",
            "format": "int32"
          },
          "classId": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "Identifier of an entity/record class.\r\nZero means unset.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "A contract to hold related record to change."
      },
      "RelatedRecordModelResult": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "Identifier (PK) of an entity/record.",
            "format": "int32"
          },
          "classId": {
            "type": "integer",
            "description": "Identifier of an entity class.",
            "format": "int32"
          },
          "className": {
            "type": "string",
            "description": "Localized name of an entity class. Optional.",
            "nullable": true
          },
          "folderId": {
            "type": "integer",
            "description": "Identifier of an entity folder.",
            "format": "int32"
          },
          "folderName": {
            "type": "string",
            "description": "Localized name of an entity folder. Optional.",
            "nullable": true
          },
          "gunid": {
            "type": "string",
            "description": "Global record identifier within several databases.\r\nThis value is generated by database on a back-end.",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "description": "Gets or sets date and time when entity was created .\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "lastUpdatedOn": {
            "type": "string",
            "description": "Gets or sets an entity last update date and time.\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of an entity record.",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "description": "Reference no. of an entity record.",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "Gets record timestamp.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A contract to hold data of a retrieved related entity/record. Invoice, Customer etc. \r\nIt does not contain all data of entity/record. Only the significant ones."
      },
      "RelationCollectionOfForeignKeyRelationItemChange": {
        "type": "object",
        "properties": {
          "relationItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ForeignKeyRelationItemChange"
            },
            "description": "Collection of related entities/records.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Object which contains a collection of related entities/records."
      },
      "RelationCollectionOfIForeignKeyRelationItemResult": {
        "type": "object",
        "properties": {
          "relationItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IForeignKeyRelationItemResult"
            },
            "description": "Collection of related entities/records.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Object which contains a collection of related entities/records."
      },
      "RelationCollectionOfRelationItemModelChange": {
        "type": "object",
        "properties": {
          "relationItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelationItemModelChange"
            },
            "description": "Collection of related entities/records.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Object which contains a collection of related entities/records."
      },
      "RelationCollectionOfRelationItemModelResult": {
        "type": "object",
        "properties": {
          "relationItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelationItemModelResult"
            },
            "description": "Collection of related entities/records.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Object which contains a collection of related entities/records."
      },
      "RelationItemModelChange": {
        "required": [
          "relationId",
          "side"
        ],
        "type": "object",
        "properties": {
          "records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedRecordModelChange"
            },
            "description": "Information about an related entity/record of the relation.\r\nIf ASOL.Nephrite.WebAPI.Contracts.RelationItemModelBase.Side is ASOL.Nephrite.WebAPI.Contracts.RelationSide.Left, this is a TO ROLE record, if  ASOL.Nephrite.WebAPI.Contracts.RelationItemModelBase.Side is  ASOL.Nephrite.WebAPI.Contracts.RelationSide.Right, this is a FROM ROLE record.",
            "nullable": true
          },
          "side": {
            "$ref": "#/components/schemas/RelationSide"
          },
          "relationId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets unique relation identifier.\r\nCZ: Vrací nebo nastavuje číslo vztahu.",
            "format": "int32"
          },
          "symbolicName": {
            "type": "string",
            "description": "Symbolic name of relation.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contract to information about changes in dynamic relation item."
      },
      "RelationItemModelResult": {
        "required": [
          "relationId",
          "side"
        ],
        "type": "object",
        "properties": {
          "records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedRecordModelResult"
            },
            "description": "Information about an related entity/record of the relation.\r\nIf ASOL.Nephrite.WebAPI.Contracts.RelationItemModelBase.Side is ASOL.Nephrite.WebAPI.Contracts.RelationSide.Left, this is a TO ROLE record, if  ASOL.Nephrite.WebAPI.Contracts.RelationItemModelBase.Side is  ASOL.Nephrite.WebAPI.Contracts.RelationSide.Right, this is a FROM ROLE record.",
            "nullable": true
          },
          "side": {
            "$ref": "#/components/schemas/RelationSide"
          },
          "relationId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets unique relation identifier.\r\nCZ: Vrací nebo nastavuje číslo vztahu.",
            "format": "int32"
          },
          "symbolicName": {
            "type": "string",
            "description": "Symbolic name of relation.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A contract to hold information about records in relation."
      },
      "RelationSide": {
        "enum": [
          "left",
          "right"
        ],
        "type": "string",
        "description": "Side of relations (ORIENTATION), primarily for dynamic relations.\r\n(For static relation is used ASOL.Nephrite.WebAPI.Contracts.RelationSide.Left)"
      },
      "ReturnFunctionLogDetailType": {
        "enum": [
          "always",
          "warning",
          "error",
          "never"
        ],
        "type": "string",
        "description": "Enumeration of possibilities when detail of a function log should be included in a message."
      },
      "RoundingDirection": {
        "enum": [
          "up",
          "down",
          "arithmetically"
        ],
        "type": "string",
        "description": "Direction of rounding."
      },
      "RoundingRadix": {
        "enum": [
          "units",
          "tenths",
          "hundredths",
          "thousandths",
          "tenThousandths",
          "hundredThousandths",
          "millionths"
        ],
        "type": "string",
        "description": "Rounding radix od decimal numbers."
      },
      "StavOrganizace": {
        "type": "object",
        "properties": {
          "kod": {
            "type": "string",
            "nullable": true
          },
          "popis": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Číselník Stav organizace"
      },
      "StringLengthConflict": {
        "enum": [
          "dontCheck",
          "cutFromRight",
          "error"
        ],
        "type": "string",
        "description": "Way how to solve conflicts in max allowed length of text data."
      },
      "TinRegisterCreate": {
        "required": [
          "folderId"
        ],
        "type": "object",
        "properties": {
          "tinVat": {
            "type": "string",
            "description": "TIN/VATIN – value added tax identification number",
            "nullable": true,
            "example": "CZ64949541"
          },
          "vatPayer": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Is a VAT payer?\r\nA - Yes, N - No, 0 - Unspecified.",
            "nullable": true,
            "example": "0"
          },
          "vatPayerTo": {
            "type": "string",
            "description": "Payer of VAT to.",
            "format": "date-time",
            "nullable": true
          },
          "vatPayerFrom": {
            "type": "string",
            "description": "Payer of VAT from.",
            "format": "date-time",
            "nullable": true
          },
          "countryId": {
            "type": "integer",
            "description": "Identifier of country",
            "format": "int32",
            "nullable": true
          },
          "companyId": {
            "type": "integer",
            "description": "Identifier of Company.",
            "format": "int32",
            "nullable": true
          },
          "folderId": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "Identifier of a folder where to create a record.\r\n0 means a default folder of the class/entity.",
            "format": "int32",
            "example": 1023
          },
          "reference": {
            "type": "string",
            "description": "Reference no. of record.",
            "nullable": true,
            "example": "X000000001"
          },
          "name": {
            "type": "string",
            "description": "Name of record.",
            "nullable": true,
            "example": "My name"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelChange"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfUserDefinedAttributeChange"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfForeignKeyRelationItemChange"
          }
        },
        "additionalProperties": false,
        "description": "Contract to create record of a tin register entity/class."
      },
      "TinRegisterResult": {
        "required": [
          "classId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Primary key of a location.",
            "format": "int32"
          },
          "tinVat": {
            "type": "string",
            "description": "TIN/VATIN – value added tax identification number",
            "nullable": true
          },
          "vatPayer": {
            "type": "string",
            "description": "Is a VAT payer?\r\nA - Yes, N - No, 0 - Unspecified.",
            "nullable": true
          },
          "vatPayerTo": {
            "type": "string",
            "description": "Payer of VAT to.",
            "format": "date-time"
          },
          "vatPayerFrom": {
            "type": "string",
            "description": "Payer of VAT from.",
            "format": "date-time"
          },
          "countryId": {
            "type": "integer",
            "description": "Identifier of ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.TinRegisterResult.Country",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "country": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "companyId": {
            "type": "integer",
            "description": "Identifier of ASOL.WebAPI.App.Customer.Lif.EShop.Contracts.TinRegisterResult.Company",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "company": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "classId": {
            "type": "integer",
            "description": "Identifier of the class of the entity.",
            "format": "int32",
            "example": 1023
          },
          "className": {
            "type": "string",
            "description": "Localized name of an entity class. Optional.",
            "nullable": true,
            "example": "My class name"
          },
          "folderId": {
            "type": "integer",
            "description": "Identifier of the folder.",
            "format": "int32",
            "example": 123
          },
          "folderName": {
            "type": "string",
            "description": "Localized name of an entity folder. Optional.",
            "nullable": true,
            "example": "My folder name"
          },
          "lastUpdatedOn": {
            "type": "string",
            "description": "Gets or sets an entity last update date and time.\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "description": "Gets or sets date and time when entity was created .\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "Gets entity timestamp.",
            "nullable": true,
            "example": "00000000000117CB"
          },
          "gunid": {
            "type": "string",
            "description": "Global record identifier within several databases.\r\nThis value is generated by database on a back-end.",
            "nullable": true,
            "example": "00000K00001U00000P"
          },
          "createdById": {
            "type": "integer",
            "description": "Primary key of the creator of the entity/record.",
            "format": "int32",
            "nullable": true,
            "example": 69
          },
          "createdBy": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "lastUpdatedById": {
            "type": "integer",
            "description": "Primary key of the last updated user of the entity",
            "format": "int32",
            "nullable": true,
            "example": 69
          },
          "lastUpdatedBy": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelResult"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfIUserDefinedAttributeResult"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfIForeignKeyRelationItemResult"
          },
          "reference": {
            "type": "string",
            "description": "Reference no. of record.",
            "nullable": true,
            "example": "X0000001"
          },
          "name": {
            "type": "string",
            "description": "Name of record.",
            "nullable": true,
            "example": "Record name"
          }
        },
        "additionalProperties": false
      },
      "TinRegisterUpdate": {
        "type": "object",
        "properties": {
          "tinVat": {
            "type": "string",
            "description": "TIN/VATIN – value added tax identification number",
            "nullable": true,
            "example": "CZ64949541"
          },
          "vatPayer": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Is a VAT payer?\r\nA - Yes, N - No, 0 - Unspecified.",
            "nullable": true,
            "example": "0"
          },
          "vatPayerTo": {
            "type": "string",
            "description": "Payer of VAT to.",
            "format": "date-time",
            "nullable": true
          },
          "vatPayerFrom": {
            "type": "string",
            "description": "Payer of VAT from.",
            "format": "date-time",
            "nullable": true
          },
          "countryId": {
            "type": "integer",
            "description": "Identifier of country",
            "format": "int32",
            "nullable": true
          },
          "companyId": {
            "type": "integer",
            "description": "Identifier of Company.",
            "format": "int32",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "description": "Reference no. of record.",
            "nullable": true,
            "example": "X000000001"
          },
          "name": {
            "type": "string",
            "description": "Name of record.",
            "nullable": true,
            "example": "My name"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelChange"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfUserDefinedAttributeChange"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfForeignKeyRelationItemChange"
          }
        },
        "additionalProperties": false,
        "description": "Contract to create record of a tin register entity/class."
      },
      "TransactionScope": {
        "enum": [
          "fileOrDbCommand",
          "record",
          "test"
        ],
        "type": "string",
        "description": "Transaction scope, in which the data are imported."
      },
      "TypAdresy": {
        "type": "object",
        "properties": {
          "kod": {
            "type": "string",
            "nullable": true
          },
          "popis": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Číselník Typ adresy"
      },
      "UhradaDto": {
        "type": "object",
        "properties": {
          "castka": {
            "type": "number",
            "format": "double"
          },
          "datumUhrady": {
            "type": "string",
            "format": "date-time"
          },
          "datumSmazaniUhrady": {
            "type": "string",
            "description": "Datum smazání úhrady. Platný záznam úhrady má v atributu datumSmazaniUhrady hodnotu 0001-01-01T00:00:00. Atribut datumSmazaniUhrady je naplněn pouze při volání REST API Uhrada/Smazana/OdDatumu.",
            "format": "date-time"
          },
          "hradiciDokladId": {
            "type": "integer",
            "format": "int32"
          },
          "hradiciDokladCislo": {
            "type": "string",
            "nullable": true
          },
          "hrazenyDokladId": {
            "type": "integer",
            "format": "int32"
          },
          "hrazenyDokladIdEx": {
            "type": "string",
            "nullable": true
          },
          "typUhrady": {
            "type": "string",
            "description": "Typ úhrady",
            "nullable": true
          },
          "uhradaId": {
            "type": "integer",
            "description": "Identifikátor úhrady",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UploadFilesCollectionResultOfUploadedFileResult": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UploadedFileResult"
            },
            "description": "Uploaded files.",
            "nullable": true
          },
          "count": {
            "type": "integer",
            "description": "Count of uploaded files.",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of uploaded files."
      },
      "UploadedFileResult": {
        "type": "object",
        "properties": {
          "fileUID": {
            "type": "string",
            "description": "Unique file upload identifier.",
            "nullable": true,
            "readOnly": true
          },
          "contentType": {
            "type": "string",
            "description": "Gets or sets the raw Content-Type header of the uploaded file.",
            "nullable": true
          },
          "contentDisposition": {
            "type": "string",
            "description": "Gets or sets the raw Content-Disposition header of the uploaded file.",
            "nullable": true
          },
          "length": {
            "type": "integer",
            "description": "Gets or sets the file length in bytes.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "Gets or sets the form field name from the Content-Disposition header.",
            "nullable": true
          },
          "fileName": {
            "type": "string",
            "description": "Gets or sets the file name from the Content-Disposition header.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about uploaded files."
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the subject identifier.\r\nThe same user can have more ASOL.Nephrite.WebAPI.AuthProvider.Contracts.User.Ids when connects using more languages or db profiles.",
            "nullable": true,
            "example": "UserId 22c60fc06eb1bc33fe7210afcc30af1247b4dab5fe719be160627288d0b7f7f1"
          },
          "firstName": {
            "type": "string",
            "description": "Given name of the user.",
            "nullable": true,
            "example": "Firstname"
          },
          "lastName": {
            "type": "string",
            "description": "Family name of the user.",
            "nullable": true,
            "example": "Lastname"
          },
          "userName": {
            "type": "string",
            "description": "Gets or sets the username (login name or login email).",
            "nullable": true,
            "example": "domain\firstname.lastname"
          },
          "password": {
            "type": "string",
            "description": "Gets or sets the password.",
            "nullable": true
          },
          "providerSubjectId": {
            "type": "string",
            "description": "Gets or sets the subject identifier from Helios Nephrite.",
            "nullable": true,
            "example": "16589745"
          },
          "providerName": {
            "type": "string",
            "description": "Gets or sets the name of provider which got ASOL.Nephrite.WebAPI.AuthProvider.Contracts.User.ProviderSubjectId.",
            "nullable": true,
            "example": "Noris.Clients.ServiceGate.ServiceGateConnector"
          },
          "systemRole": {
            "type": "string",
            "description": "Gets or sets the system role of the user on a server side (admin/user).",
            "nullable": true,
            "example": "user"
          },
          "email": {
            "type": "string",
            "description": "Gets or sets the email of the user.",
            "nullable": true,
            "example": "user"
          }
        },
        "additionalProperties": false,
        "description": "User entity."
      },
      "UserDefinedAttributeChange": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of a column an attribute is mapped to.",
            "nullable": true
          },
          "value": {
            "description": "Value of the attribute.",
            "nullable": true
          },
          "symbolicName": {
            "type": "string",
            "description": "Symbolic name of attribute.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Class which describes a user defined attribute change."
      },
      "ValidationProblemDetails": {
        "type": "object",
        "properties": {
          "errorNumber": {
            "type": "integer",
            "description": "Internal error number. Optional.",
            "format": "int64",
            "nullable": true
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { },
        "description": "A ProblemDetails for validation errors."
      },
      "ZamestnanecDto": {
        "type": "object",
        "properties": {
          "osobniCislo": {
            "type": "string",
            "description": "Osobní číslo.",
            "nullable": true
          },
          "zamestnanecId": {
            "type": "integer",
            "description": "Jednoznačný identifikátor.",
            "format": "int32"
          },
          "jmeno": {
            "type": "string",
            "description": "Jméno.",
            "nullable": true
          },
          "prijmeni": {
            "type": "string",
            "description": "Příjmení.",
            "nullable": true
          },
          "login": {
            "type": "string",
            "description": "Login.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Zaměstnanec DTO"
      },
      "Zeme": {
        "type": "object",
        "properties": {
          "kod": {
            "type": "string",
            "nullable": true
          },
          "popis": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Číselník Země"
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "description": "Basic Authorization header using the Basic scheme. \r\n\r\n Enter 'UserName' and 'UserId ' values got by api/Connect/LogIn endpoint . \r\n\r\n E.g. UserName = ASOL\\firstname.lastname, Password: 'UserId  ebbea0265....'",
        "scheme": "Basic"
      }
    }
  },
  "tags": [
    {
      "name": "Cache",
      "description": "Controller enables to store a value to a memory cache."
    },
    {
      "name": "Connect",
      "description": "Controller for actions with users."
    },
    {
      "name": "GenericData",
      "description": "<br>\r\n            This controller is obsolete and it will be removed in the future. Use generic requests or dedicated endpoints instead.\r\n            \r\n<br>\r\n            Controller contains common actions for entities which can be defined universally.\r\n            "
    },
    {
      "name": "EShop",
      "description": "Controller to execute actions in connection with eShop functionality."
    },
    {
      "name": "Persons",
      "description": "Controller to retrieve data of persons like contact persons, employees etc.\r\nSee endpoints of controller."
    },
    {
      "name": "DataTransfers",
      "description": "Controller to manage data transfers in and out of Helios Nephrite."
    },
    {
      "name": "Files",
      "description": "Controller to manage data transfers in and out of Helios Nephrite."
    },
    {
      "name": "Generic",
      "description": "Controller contains common actions for entities which can be defined universally."
    }
  ],
  "externalDocs": {
    "description": "Integration with Helios Nephrite using web API",
    "url": "https://public.helios.eu/nephrite/doc/cs/index.php?title=Integrace_pomoc%C3%AD_webov%C3%A9ho_API"
  }
}