{
  "openapi": "3.0.1",
  "info": {
    "title": "API of Pantheon",
    "description": "Swagger with ASP.NET Core API of Helios Pantheon.\r\n(0.0.37-beta)",
    "termsOfService": "https://www.helios.eu/vseobecne-obchodni-podminky/",
    "contact": {
      "name": "Asseco Solutions, a.s.",
      "url": "https://www.heliosnephrite.cz/",
      "email": "info@helios.eu"
    },
    "license": {
      "name": "Asseco Solutions, a.s. Helios Pantheon license",
      "url": "https://www.helios.eu/vseobecne-obchodni-podminky/"
    },
    "version": "1.0"
  },
  "paths": {
    "/api/v1/Customer/Pantheon/AdresaUpdate": {
      "put": {
        "tags": [
          "AdresaUpdate"
        ],
        "summary": "Změna údajů existující adresy",
        "description": "<b>Příklad volání:</b>\r\n<p>Curl</p>\r\n             curl -X PUT \"https://localhost:5020/api/v1/AdresaUpdate\" -H  \"accept: application/json\" -H  \"Content-Type: application/json\" -d \"{\\\"organizaceIdEx\\\":\\\"OIX_0001\\\",\\\"typAdresy\\\":\\\"Trvalá\\\",\\\"cisloCo\\\":\\\"15\\\",\\\"cisloCp\\\":\\\"263\\\",\\\"obec\\\":\\\"Plzeň\\\",\\\"castObce\\\":\\\"Bolevec\\\",\\\"mestskyObvod\\\":\\\"Plzeň 1\\\",\\\"okres\\\":\\\"Plzeň město\\\",\\\"pismenoCo\\\":\\\"a\\\",\\\"psc\\\":\\\"32300\\\",\\\"stavAdresy\\\":1,\\\"typCislaDomovniho\\\":1,\\\"ulice\\\":\\\"Nefritová\\\"}\"\r\n             <p>Request URL</p>\r\n             https://localhost:5020/api/v1/AdresaUpdate",
        "parameters": [
          {
            "name": "recordNumber",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdresaUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizaceDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Cache/{key}": {
      "get": {
        "tags": [
          "Cache"
        ],
        "summary": "Gets a value stored in cache.\r\nIf key is not in cache",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Key of entry in a cache.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CacheResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Cache": {
      "put": {
        "tags": [
          "Cache"
        ],
        "summary": "Sets value to a memory cache with a specified key.",
        "parameters": [
          {
            "name": "Priority",
            "in": "query",
            "description": "The priority for keeping the cache entry in the cache during a memory pressure tokened cleanup.\r\nSpecifies how items are prioritized for preservation during a memory pressure triggered cleanup.\r\nPossible values: low, normal, high, neverRemove.",
            "schema": {
              "$ref": "#/components/schemas/CacheItemPriority"
            }
          },
          {
            "name": "SlidingExpiration",
            "in": "query",
            "description": "Period how long (in minutes) the cache entry can be inactive (e.g. not accessed) before it will be removed. \r\nThis will not extend the entry lifetime beyond the absolute expiration (if set).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "AbsoluteExpirationRelativeToNow",
            "in": "query",
            "description": "An absolute expiration time (in minutes), relative to time when a cache entry was stored.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Key and value.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CacheRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CacheResponse"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/CiselnikEvidencniTyp": {
      "get": {
        "tags": [
          "CiselnikEvidencniTyp"
        ],
        "summary": "Číselník Evidenční typ",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfCiselnikEvidencniTyp"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "CiselnikEvidencniTyp"
        ],
        "summary": "Číselník Evidenční typ",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfCiselnikEvidencniTyp"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/CiselnikKodDph/{platnostOd}": {
      "get": {
        "tags": [
          "CiselnikKodDph"
        ],
        "summary": "Číselník Kód DPH",
        "description": "ZiskatCiselnikKodDphAsync",
        "parameters": [
          {
            "name": "platnostOd",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfCiselnikKodDph"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/CiselnikKodDph": {
      "head": {
        "tags": [
          "CiselnikKodDph"
        ],
        "summary": "Číselník Kód DPH",
        "description": "ZiskatCiselnikKodDphAsync",
        "parameters": [
          {
            "name": "platnostOd",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfCiselnikKodDph"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/CiselnikTypUhrady": {
      "get": {
        "tags": [
          "CiselnikTypUhrady"
        ],
        "summary": "Číselník Typ úhrady",
        "description": "GetCiselnikTypUhradyAsync",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfCiselnikTypUhrady"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "CiselnikTypUhrady"
        ],
        "summary": "Číselník Typ úhrady",
        "description": "GetCiselnikTypUhradyAsync",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfCiselnikTypUhrady"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/Connect/LogIn": {
      "post": {
        "tags": [
          "Connect"
        ],
        "summary": "Authorizes the user which is specified in authenticateInfo parameter.",
        "description": "Sample request with domain account:\r\n```\r\nPOST /api/connect/login HTTP/1.1\r\nHost: localhost:53078\r\nContent-Type: application/json\r\n{\r\n    \"username\": \"ASOL\\\\username\",\r\n    \"password\": \"domain password\",\r\n    \"UseWindowsAuthentication\": true,\r\n    \"UseCurrentUserCredentials\": false\r\n    \"LanguageId\"   : \"CZ\",\r\n    \"DbProfile\": \"test_env\",\r\n\"ServerURL\" : \"http://www.mydomain.cz/hen\"\r\n}\r\n```\r\n            \r\nSample request with HeN account:\r\n```\r\nPOST /api/connect/login HTTP/1.1\r\nHost: localhost:53078\r\nContent-Type: application/json\r\n{\r\n    \"username\": \"username\",\r\n    \"password\": \"password\",\r\n    \"UseWindowsAuthentication\": false,\r\n    \"LanguageId\"   : \"CZ\",\r\n    \"DbProfile\": \"test_env\",\r\n\"ServerURL\" : \"http://www.mydomain.cz/hen\"\r\n}\r\n```",
        "requestBody": {
          "description": "Info about user to authorize.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticateRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "<br>\r\n             If authorization failed\r\n             \r\n<br>\r\n  ```\r\n             {\r\n              \"type\":\"https://tools.ietf.org/html/rfc7231#section-6.5.1\",\r\n              \"title\": \"BadRequest\",\r\n              \"status\": 400,\r\n             \"detail\": \"System.AggregateException: One or more errors occurred. (The logon attempt failed) ---> System.ComponentModel.Win32Exception: The logon attempt failed\\r\\n   --- End of inner exception stack trace ---\",\r\n             \"instance\": \"POST /api/Connect/LogIn\",\r\n             }\r\n             ```\r\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "<br>\r\n             If an unexpected error occurred. Check the log then.\r\n             \r\n<br>\r\n  ```\r\n             {\r\n              \"type\": \"https://tools.ietf.org/html/rfc7235#section...\",\r\n              \"title\": \"InternalServerError\",\r\n              \"status\": 500,\r\n             \"detail\": \"\"Unknown error, check the log, please.\"\",\r\n             \"instance\": \"POST /api/Connect/LogIn\",\r\n             }\r\n             ```\r\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "<br>\r\n             Returns info of authenticated user:\r\n             \r\n<br>\r\n  ```\r\n             {\r\n             \"success\": true,\r\n             \"statusCode\": 200,\r\n             \"errorMessage\": \"\",\r\n             \"userName\": \"ASOL\\\\username\",\r\n             \"userId\": \"UserId 31f49a7ddc18e97247308d5180ac684890f5a5c3442e0ab7115e037f6d6dd2f6\"\r\n             }\r\n             ```\r\n\r\n<br>\r\n             Use returned \"userName\" value as user name and \"userId\" value as password for following basic authorization for requests which require an authentication then.\r\n             ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticateResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Connect/UserInfo": {
      "get": {
        "tags": [
          "Connect"
        ],
        "summary": "Gets info about currently authenticated user.",
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/Connect/UserInfoByName": {
      "get": {
        "tags": [
          "Connect"
        ],
        "summary": "Gets all authenticated users with the same user name as currently authenticated user.\r\nIt can return more users in case the user is logged with different languages or to another site.",
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/Connect/LogOut": {
      "post": {
        "tags": [
          "Connect"
        ],
        "summary": "Logs out currently authorized user and removes it from authenticated users.",
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Country": {
      "get": {
        "tags": [
          "Country"
        ],
        "summary": "Gets collection of countries according to parameters.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "<br>\r\n            Gets or sets identifier of template or view which is used to browse data.\r\n            0 or unspecified value means a user default template or view.\r\n            \r\n<br>Use this parameter instead of former 'BrowseId.BrowseNumber' parameter.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Type",
            "in": "query",
            "description": "<br>\r\n            Type of a browse. Default is ASOL.Nephrite.WebAPI.Contracts.BrowseType.Template.\r\n            \r\n<br>\r\n            Use this parameter instead of former 'BrowseId.Type' parameter.\r\n            ",
            "schema": {
              "$ref": "#/components/schemas/BrowseType"
            }
          },
          {
            "name": "FilterId",
            "in": "query",
            "description": "Unique identifier of a predefined filter to get data.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FilterParams",
            "in": "query",
            "description": "<br>Optional. It has to be specified when a filter definition (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId) contains variable arguments.\r\n<br>\r\n            Variable arguments of a filter which is specified in ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId.\r\n            They have to be specified when this filter contains at least one parameter which value is specified as a variable (a named parameter).\r\n            This value has to be specified at the moment when the filter is applied.\r\n            If value of parameter is not set, it will be marked as skipped, see Description in example.\r\n            If value is null, a null value will be passed to parameter. \r\n            \r\n<br>\r\n            Example: ?FilterParams=Code='ABC'&FilterParams=Price=123.56&FilterParams=issueDate=2021-11-03T00:00:00&FilterParams=Description&FilterParams=Code=null\r\n            ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "TemplateFilterParams",
            "in": "query",
            "description": "<br>Optional. It has to be specified when a browse template filter definition (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id) contains variable arguments.\r\n<br>\r\n            Variable arguments of a filter which is part of a browse template filter definition (default one for a current user or specified in ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id).\r\n            They have to be specified when this filter contains at least one parameter which value is specified as a variable (a named parameter).\r\n            This value has to be specified at the moment when the filter is applied.\r\n            If value of parameter is not set, it will be marked as skipped, see Description in example.\r\n            If value is null, a null value will be passed to parameter. \r\n            \r\n<br>\r\n            Example: TemplateFilterParams=Code='ABC'&TemplateFilterParams=Price=123.56&TemplateFilterParams=issueDate=2021-11-03T00:00:00&TemplateFilterParams=Description&TemplateFilterParams=Code=null\r\n            ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "FolderId",
            "in": "query",
            "description": "Folder where records to get are stored.\r\nIf zero or null, default folder is used (the folder with minimal value - the first created folder).",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "description": "<br>\r\n            Filter expression to get data.\r\n            \r\n<br>\r\n            THIS PROPERTY'S NOT SUPPORTED YET! DON'T USE IT AT ALL! IT IS IGNORED!\r\n            INSTEAD, USE A PREDEFINED FILTER (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId) or filter which is a part of a browse template (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id).\r\n            ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "Sort order rules for returned data.\r\nRules have to match a column definition of template which is used to retrieve data.\r\nFormat is: \"[template column name] [sort direction]\", e.g.: ?orderBy=name desc,hireDate. Also \"asc\" can be used for more clarity.\r\nIf neither \"desc\" nor \"asc\" is used, \"asc\" is used by default.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TotalCount",
            "in": "query",
            "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.BrowseResponse should contain the total number of rows.\r\nDefault is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Count",
            "in": "query",
            "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.BrowseResponse should contain the number of rows on current page..\r\nDefault is true.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Number of rows which are skipped during retrieval of data.\r\nIf not specified, no rows are skipped. It means, the first row on the first page is displayed at the top of the page.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "Top",
            "in": "query",
            "description": "Page size.\r\nIf not specified, default user settings will be used.",
            "schema": {
              "maximum": 2147483647,
              "minimum": -1,
              "type": "integer",
              "format": "int32",
              "example": 100
            },
            "example": 100
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrowseResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "Country"
        ],
        "summary": "Gets collection of countries according to parameters.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "<br>\r\n            Gets or sets identifier of template or view which is used to browse data.\r\n            0 or unspecified value means a user default template or view.\r\n            \r\n<br>Use this parameter instead of former 'BrowseId.BrowseNumber' parameter.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Type",
            "in": "query",
            "description": "<br>\r\n            Type of a browse. Default is ASOL.Nephrite.WebAPI.Contracts.BrowseType.Template.\r\n            \r\n<br>\r\n            Use this parameter instead of former 'BrowseId.Type' parameter.\r\n            ",
            "schema": {
              "$ref": "#/components/schemas/BrowseType"
            }
          },
          {
            "name": "FilterId",
            "in": "query",
            "description": "Unique identifier of a predefined filter to get data.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FilterParams",
            "in": "query",
            "description": "<br>Optional. It has to be specified when a filter definition (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId) contains variable arguments.\r\n<br>\r\n            Variable arguments of a filter which is specified in ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId.\r\n            They have to be specified when this filter contains at least one parameter which value is specified as a variable (a named parameter).\r\n            This value has to be specified at the moment when the filter is applied.\r\n            If value of parameter is not set, it will be marked as skipped, see Description in example.\r\n            If value is null, a null value will be passed to parameter. \r\n            \r\n<br>\r\n            Example: ?FilterParams=Code='ABC'&FilterParams=Price=123.56&FilterParams=issueDate=2021-11-03T00:00:00&FilterParams=Description&FilterParams=Code=null\r\n            ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "TemplateFilterParams",
            "in": "query",
            "description": "<br>Optional. It has to be specified when a browse template filter definition (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id) contains variable arguments.\r\n<br>\r\n            Variable arguments of a filter which is part of a browse template filter definition (default one for a current user or specified in ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id).\r\n            They have to be specified when this filter contains at least one parameter which value is specified as a variable (a named parameter).\r\n            This value has to be specified at the moment when the filter is applied.\r\n            If value of parameter is not set, it will be marked as skipped, see Description in example.\r\n            If value is null, a null value will be passed to parameter. \r\n            \r\n<br>\r\n            Example: TemplateFilterParams=Code='ABC'&TemplateFilterParams=Price=123.56&TemplateFilterParams=issueDate=2021-11-03T00:00:00&TemplateFilterParams=Description&TemplateFilterParams=Code=null\r\n            ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "FolderId",
            "in": "query",
            "description": "Folder where records to get are stored.\r\nIf zero or null, default folder is used (the folder with minimal value - the first created folder).",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "description": "<br>\r\n            Filter expression to get data.\r\n            \r\n<br>\r\n            THIS PROPERTY'S NOT SUPPORTED YET! DON'T USE IT AT ALL! IT IS IGNORED!\r\n            INSTEAD, USE A PREDEFINED FILTER (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId) or filter which is a part of a browse template (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id).\r\n            ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "Sort order rules for returned data.\r\nRules have to match a column definition of template which is used to retrieve data.\r\nFormat is: \"[template column name] [sort direction]\", e.g.: ?orderBy=name desc,hireDate. Also \"asc\" can be used for more clarity.\r\nIf neither \"desc\" nor \"asc\" is used, \"asc\" is used by default.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TotalCount",
            "in": "query",
            "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.BrowseResponse should contain the total number of rows.\r\nDefault is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Count",
            "in": "query",
            "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.BrowseResponse should contain the number of rows on current page..\r\nDefault is true.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Number of rows which are skipped during retrieval of data.\r\nIf not specified, no rows are skipped. It means, the first row on the first page is displayed at the top of the page.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "Top",
            "in": "query",
            "description": "Page size.\r\nIf not specified, default user settings will be used.",
            "schema": {
              "maximum": 2147483647,
              "minimum": -1,
              "type": "integer",
              "format": "int32",
              "example": 100
            },
            "example": 100
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrowseResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Country"
        ],
        "summary": "Creates a new country.",
        "requestBody": {
          "description": "Data for a new country.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CountryCreate"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IRecordId"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Country/{id}": {
      "get": {
        "tags": [
          "Country"
        ],
        "summary": "Gets info about country.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of country (PK).",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountryResult"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "Country"
        ],
        "summary": "Gets info about country.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of country (PK).",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountryResult"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Country"
        ],
        "summary": "Update selected properties of a country.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of record to update.",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Data of an country to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CountryUpdate"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Country"
        ],
        "summary": "Update selected properties of an country.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of an country to delete.",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Dobropis": {
      "post": {
        "tags": [
          "Dobropis"
        ],
        "summary": "Založení nového Dobropisu",
        "requestBody": {
          "description": "Data nové Faktury vydané",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DobropisFvCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FakturaVydanaDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "Dobropis"
        ],
        "parameters": [
          {
            "name": "DobropisId",
            "in": "query",
            "description": "Interní identifikátor Dobropisu",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 781254
            },
            "example": 781254
          },
          {
            "name": "DobropisIdEx",
            "in": "query",
            "description": "Externí identifikátor Dobropisu",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "FVX_0001"
            },
            "example": "FVX_0001"
          },
          {
            "name": "Organizace.DatumNarozeni",
            "in": "query",
            "description": "Datum narození",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "2001-01-29"
            },
            "example": "2001-01-29"
          },
          {
            "name": "Organizace.Dic",
            "in": "query",
            "description": "DIČ",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "CZ11111111111"
            },
            "example": "CZ11111111111"
          },
          {
            "name": "Organizace.Ico",
            "in": "query",
            "description": "IČO",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "22222222222"
            },
            "example": "22222222222"
          },
          {
            "name": "Organizace.Jmeno",
            "in": "query",
            "description": "Jméno",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Josef"
            },
            "example": "Josef"
          },
          {
            "name": "Organizace.NazevDoplnujici",
            "in": "query",
            "description": "Doplňující název",
            "schema": {
              "maxLength": 80,
              "type": "string",
              "example": "NAZEV_DOPLN"
            },
            "example": "NAZEV_DOPLN"
          },
          {
            "name": "Organizace.NazevOrganizace",
            "in": "query",
            "description": "Název organizace",
            "schema": {
              "maxLength": 100,
              "type": "string",
              "example": "ALLSOFT s.r.o"
            },
            "example": "ALLSOFT s.r.o"
          },
          {
            "name": "Organizace.OrganizaceIdEx",
            "in": "query",
            "description": "Externí identifikátor organizace",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "OIX_0001"
            },
            "example": "OIX_0001"
          },
          {
            "name": "Organizace.PravniForma",
            "in": "query",
            "description": "Právní forma",
            "schema": {
              "maxLength": 6,
              "type": "string",
              "example": "SO"
            },
            "example": "SO"
          },
          {
            "name": "Organizace.Prijmeni",
            "in": "query",
            "description": "Příjmení",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Červený"
            },
            "example": "Červený"
          },
          {
            "name": "Organizace.RodneCislo",
            "in": "query",
            "description": "Rodné číslo",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "1234567777"
            },
            "example": "1234567777"
          },
          {
            "name": "Organizace.CisloDokladu",
            "in": "query",
            "description": "Číslo dokladu (max. 30 znaků)",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "112233445566"
            },
            "example": "112233445566"
          },
          {
            "name": "Organizace.TypDokladu",
            "in": "query",
            "description": "Typ dokladu - občanský průkaz (O) nebo cestovní pas (C)",
            "schema": {
              "maxLength": 1,
              "type": "string",
              "example": "C"
            },
            "example": "C"
          },
          {
            "name": "Stav",
            "in": "query",
            "description": "<br>Stav faktury\r\n<br>(0 - Pořízeno, 1 - Zaúčtováno, 7 - Stornováno)",
            "schema": {
              "type": "string",
              "example": "0"
            },
            "example": "0"
          },
          {
            "name": "StavUhrazenosti",
            "in": "query",
            "description": "<br>Stav uhrazenosti faktury\r\n<br>(N - Neuhrazeno, C - Částečně uhrazeno, U - Uhrazeno, P - Přeplaceno)",
            "schema": {
              "type": "string",
              "example": "N"
            },
            "example": "N"
          },
          {
            "name": "VariabilniSymbol",
            "in": "query",
            "description": "Variabilní symbol",
            "schema": {
              "maxLength": 10,
              "type": "string",
              "example": "133445566"
            },
            "example": "133445566"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfDobropisFvDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "Dobropis"
        ],
        "parameters": [
          {
            "name": "DobropisId",
            "in": "query",
            "description": "Interní identifikátor Dobropisu",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 781254
            },
            "example": 781254
          },
          {
            "name": "DobropisIdEx",
            "in": "query",
            "description": "Externí identifikátor Dobropisu",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "FVX_0001"
            },
            "example": "FVX_0001"
          },
          {
            "name": "Organizace.DatumNarozeni",
            "in": "query",
            "description": "Datum narození",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "2001-01-29"
            },
            "example": "2001-01-29"
          },
          {
            "name": "Organizace.Dic",
            "in": "query",
            "description": "DIČ",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "CZ11111111111"
            },
            "example": "CZ11111111111"
          },
          {
            "name": "Organizace.Ico",
            "in": "query",
            "description": "IČO",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "22222222222"
            },
            "example": "22222222222"
          },
          {
            "name": "Organizace.Jmeno",
            "in": "query",
            "description": "Jméno",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Josef"
            },
            "example": "Josef"
          },
          {
            "name": "Organizace.NazevDoplnujici",
            "in": "query",
            "description": "Doplňující název",
            "schema": {
              "maxLength": 80,
              "type": "string",
              "example": "NAZEV_DOPLN"
            },
            "example": "NAZEV_DOPLN"
          },
          {
            "name": "Organizace.NazevOrganizace",
            "in": "query",
            "description": "Název organizace",
            "schema": {
              "maxLength": 100,
              "type": "string",
              "example": "ALLSOFT s.r.o"
            },
            "example": "ALLSOFT s.r.o"
          },
          {
            "name": "Organizace.OrganizaceIdEx",
            "in": "query",
            "description": "Externí identifikátor organizace",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "OIX_0001"
            },
            "example": "OIX_0001"
          },
          {
            "name": "Organizace.PravniForma",
            "in": "query",
            "description": "Právní forma",
            "schema": {
              "maxLength": 6,
              "type": "string",
              "example": "SO"
            },
            "example": "SO"
          },
          {
            "name": "Organizace.Prijmeni",
            "in": "query",
            "description": "Příjmení",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Červený"
            },
            "example": "Červený"
          },
          {
            "name": "Organizace.RodneCislo",
            "in": "query",
            "description": "Rodné číslo",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "1234567777"
            },
            "example": "1234567777"
          },
          {
            "name": "Organizace.CisloDokladu",
            "in": "query",
            "description": "Číslo dokladu (max. 30 znaků)",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "112233445566"
            },
            "example": "112233445566"
          },
          {
            "name": "Organizace.TypDokladu",
            "in": "query",
            "description": "Typ dokladu - občanský průkaz (O) nebo cestovní pas (C)",
            "schema": {
              "maxLength": 1,
              "type": "string",
              "example": "C"
            },
            "example": "C"
          },
          {
            "name": "Stav",
            "in": "query",
            "description": "<br>Stav faktury\r\n<br>(0 - Pořízeno, 1 - Zaúčtováno, 7 - Stornováno)",
            "schema": {
              "type": "string",
              "example": "0"
            },
            "example": "0"
          },
          {
            "name": "StavUhrazenosti",
            "in": "query",
            "description": "<br>Stav uhrazenosti faktury\r\n<br>(N - Neuhrazeno, C - Částečně uhrazeno, U - Uhrazeno, P - Přeplaceno)",
            "schema": {
              "type": "string",
              "example": "N"
            },
            "example": "N"
          },
          {
            "name": "VariabilniSymbol",
            "in": "query",
            "description": "Variabilní symbol",
            "schema": {
              "maxLength": 10,
              "type": "string",
              "example": "133445566"
            },
            "example": "133445566"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfDobropisFvDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/FakturaVydana": {
      "post": {
        "tags": [
          "FakturaVydana"
        ],
        "summary": "Založení nového Faktury vydané",
        "requestBody": {
          "description": "Data nové Faktury vydané",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FakturaVydanaCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FakturaVydanaDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "FakturaVydana"
        ],
        "parameters": [
          {
            "name": "fakturaId",
            "in": "query",
            "description": "Interní identifikátor Faktury vydané",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 781254
            },
            "example": 781254
          },
          {
            "name": "fakturaIdEx",
            "in": "query",
            "description": "Externí identifikátor Faktury vydané",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "FAK_0001"
            },
            "example": "FAK_0001"
          },
          {
            "name": "organizace.DatumNarozeni",
            "in": "query",
            "description": "Datum narození",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "2001-01-29"
            },
            "example": "2001-01-29"
          },
          {
            "name": "organizace.Dic",
            "in": "query",
            "description": "DIČ",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "CZ11111111111"
            },
            "example": "CZ11111111111"
          },
          {
            "name": "organizace.Ico",
            "in": "query",
            "description": "IČO",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "22222222222"
            },
            "example": "22222222222"
          },
          {
            "name": "organizace.Jmeno",
            "in": "query",
            "description": "Jméno",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Josef"
            },
            "example": "Josef"
          },
          {
            "name": "organizace.NazevDoplnujici",
            "in": "query",
            "description": "Doplňující název",
            "schema": {
              "maxLength": 80,
              "type": "string",
              "example": "NAZEV_DOPLN"
            },
            "example": "NAZEV_DOPLN"
          },
          {
            "name": "organizace.NazevOrganizace",
            "in": "query",
            "description": "Název organizace",
            "schema": {
              "maxLength": 100,
              "type": "string",
              "example": "ALLSOFT s.r.o"
            },
            "example": "ALLSOFT s.r.o"
          },
          {
            "name": "organizace.OrganizaceIdEx",
            "in": "query",
            "description": "Externí identifikátor organizace",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "OIX_0001"
            },
            "example": "OIX_0001"
          },
          {
            "name": "organizace.PravniForma",
            "in": "query",
            "description": "Právní forma",
            "schema": {
              "maxLength": 6,
              "type": "string",
              "example": "SO"
            },
            "example": "SO"
          },
          {
            "name": "organizace.Prijmeni",
            "in": "query",
            "description": "Příjmení",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Červený"
            },
            "example": "Červený"
          },
          {
            "name": "organizace.RodneCislo",
            "in": "query",
            "description": "Rodné číslo",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "1234567777"
            },
            "example": "1234567777"
          },
          {
            "name": "organizace.CisloDokladu",
            "in": "query",
            "description": "Číslo dokladu (max. 30 znaků)",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "112233445566"
            },
            "example": "112233445566"
          },
          {
            "name": "organizace.TypDokladu",
            "in": "query",
            "description": "Typ dokladu - občanský průkaz (O) nebo cestovní pas (C)",
            "schema": {
              "maxLength": 1,
              "type": "string",
              "example": "C"
            },
            "example": "C"
          },
          {
            "name": "stav",
            "in": "query",
            "description": "<br>Stav faktury\r\n<br>(0 - Pořízeno, 1 - Zaúčtováno, 7 - Stornováno)",
            "schema": {
              "type": "string",
              "example": "0"
            },
            "example": "0"
          },
          {
            "name": "stavUhrazenosti",
            "in": "query",
            "description": "<br>Stav uhrazenosti faktury\r\n<br>(N - Neuhrazeno, C - Částečně uhrazeno, U - Uhrazeno, P - Přeplaceno)",
            "schema": {
              "type": "string",
              "example": "N"
            },
            "example": "N"
          },
          {
            "name": "variabilniSymbol",
            "in": "query",
            "schema": {
              "maxLength": 10,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfFakturaVydanaDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "FakturaVydana"
        ],
        "parameters": [
          {
            "name": "fakturaId",
            "in": "query",
            "description": "Interní identifikátor Faktury vydané",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 781254
            },
            "example": 781254
          },
          {
            "name": "fakturaIdEx",
            "in": "query",
            "description": "Externí identifikátor Faktury vydané",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "FAK_0001"
            },
            "example": "FAK_0001"
          },
          {
            "name": "organizace.DatumNarozeni",
            "in": "query",
            "description": "Datum narození",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "2001-01-29"
            },
            "example": "2001-01-29"
          },
          {
            "name": "organizace.Dic",
            "in": "query",
            "description": "DIČ",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "CZ11111111111"
            },
            "example": "CZ11111111111"
          },
          {
            "name": "organizace.Ico",
            "in": "query",
            "description": "IČO",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "22222222222"
            },
            "example": "22222222222"
          },
          {
            "name": "organizace.Jmeno",
            "in": "query",
            "description": "Jméno",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Josef"
            },
            "example": "Josef"
          },
          {
            "name": "organizace.NazevDoplnujici",
            "in": "query",
            "description": "Doplňující název",
            "schema": {
              "maxLength": 80,
              "type": "string",
              "example": "NAZEV_DOPLN"
            },
            "example": "NAZEV_DOPLN"
          },
          {
            "name": "organizace.NazevOrganizace",
            "in": "query",
            "description": "Název organizace",
            "schema": {
              "maxLength": 100,
              "type": "string",
              "example": "ALLSOFT s.r.o"
            },
            "example": "ALLSOFT s.r.o"
          },
          {
            "name": "organizace.OrganizaceIdEx",
            "in": "query",
            "description": "Externí identifikátor organizace",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "OIX_0001"
            },
            "example": "OIX_0001"
          },
          {
            "name": "organizace.PravniForma",
            "in": "query",
            "description": "Právní forma",
            "schema": {
              "maxLength": 6,
              "type": "string",
              "example": "SO"
            },
            "example": "SO"
          },
          {
            "name": "organizace.Prijmeni",
            "in": "query",
            "description": "Příjmení",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Červený"
            },
            "example": "Červený"
          },
          {
            "name": "organizace.RodneCislo",
            "in": "query",
            "description": "Rodné číslo",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "1234567777"
            },
            "example": "1234567777"
          },
          {
            "name": "organizace.CisloDokladu",
            "in": "query",
            "description": "Číslo dokladu (max. 30 znaků)",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "112233445566"
            },
            "example": "112233445566"
          },
          {
            "name": "organizace.TypDokladu",
            "in": "query",
            "description": "Typ dokladu - občanský průkaz (O) nebo cestovní pas (C)",
            "schema": {
              "maxLength": 1,
              "type": "string",
              "example": "C"
            },
            "example": "C"
          },
          {
            "name": "stav",
            "in": "query",
            "description": "<br>Stav faktury\r\n<br>(0 - Pořízeno, 1 - Zaúčtováno, 7 - Stornováno)",
            "schema": {
              "type": "string",
              "example": "0"
            },
            "example": "0"
          },
          {
            "name": "stavUhrazenosti",
            "in": "query",
            "description": "<br>Stav uhrazenosti faktury\r\n<br>(N - Neuhrazeno, C - Částečně uhrazeno, U - Uhrazeno, P - Přeplaceno)",
            "schema": {
              "type": "string",
              "example": "N"
            },
            "example": "N"
          },
          {
            "name": "variabilniSymbol",
            "in": "query",
            "schema": {
              "maxLength": 10,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfFakturaVydanaDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/GenericData/Classes/{classId}": {
      "get": {
        "tags": [
          "GenericData"
        ],
        "summary": "<br>\r\n            This endpoint is obsolete! Use /api/v1/generic/browse/{classId:int:min(1)} (/api/v1/generic/browse/{classSymbolicName:alpha}) endpoint instead. \r\n            \r\n<br>\r\n            Gets collection of records according to parameters.\r\n            \r\n<br>\r\n            Beware! FilterArguments parameter is renamed to TemplateFilterParams and instead of BrowseIdentification use BrowseId.BrowseNumber and BrowseId.BrowseType properties.\r\n            ",
        "parameters": [
          {
            "name": "classId",
            "in": "path",
            "description": "Class/Entity identifier of the records.",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "BrowseId.BrowseNumber",
            "in": "query",
            "description": "<br>\r\n            Gets or sets browse template or view number (unique).\r\n            \r\n<br>\r\n            Beware! This property is obsolete!\r\n            \r\n<br>\r\n            In the future, in '/api/v1/generic/browse/**' endpoints, this property will be replaced by 'Id' property.\r\n            So, if this is a query parameter of any of '/api/v1/generic/browse/**' endpoints, use 'Id' property!\r\n            Do NOT query parameters 'Id' and 'BrowseId.BrowseNumber' together in a request.\r\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10236,
              "deprecated": true
            },
            "example": 10236
          },
          {
            "name": "BrowseId.BrowseType",
            "in": "query",
            "description": "<br>\r\n            Gets or sets browse type - type of browse is used to retrieve data. Default is ASOL.Nephrite.WebAPI.Contracts.BrowseType.Template.\r\n            \r\n<br>\r\n            Beware! This property is obsolete!\r\n            \r\n<br>\r\n            In the future, in '/api/v1/generic/browse/**' endpoints, this property will be replaced by 'Type' property.\r\n            So, if this is a query parameter of any of '/api/v1/generic/browse/**' endpoints, use 'Type' property!\r\n            Do NOT query parameters 'Type' and 'BrowseId.BrowseType' together in a request.\r\n            ",
            "schema": {
              "$ref": "#/components/schemas/BrowseType"
            },
            "example": "template"
          },
          {
            "name": "FilterArguments",
            "in": "query",
            "description": "<br>\r\n            This parameter is obsolete and it will be removed in the future. Use 'TemplateFilterParams' in new generic endpoint /api/v1/generic/browse/... instead.\r\n            \r\n<br>\r\n            Optional.\r\n            \r\n<br>\r\n            Arguments of a filter which is part of a browse template filter definition.\r\n            They have to be specified when a browse template contains a filter with parameters only.\r\n            If value of parameter is not set, it will be marked as skipped, see Description in example.\r\n            If value is null, a null value will be passed to parameter. \r\n            \r\n<br>\r\n            Example: FilterArguments=Code='ABC'&FilterArguments=Price=123.56&FilterArguments=issueDate=2021-11-03T00:00:00&FilterArguments=Description&FilterArguments=Code=null\r\n            ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "deprecated": true
            }
          },
          {
            "name": "BrowseIdentification",
            "in": "query",
            "description": "<br>\r\n             This property is obsolete and it will be removed in the future. Use ASOL.Nephrite.WebAPI.Contracts.BrowseId.BrowseNumber and ASOL.Nephrite.WebAPI.Contracts.BrowseId.BrowseType instead.\r\n             \r\n<br>\r\n             Represents identification of template or view which will be used to retrieve data.\r\n             Pattern to fill this parameter is {<T|V>N} where T means a template, V means a view\r\n             and N is unique identifier of the view or template.\r\n             Example: &BrowseIdentification=T11158 means that the template with number 11158 will be used to retrieve data.\r\n            \r\n             If not specified, default user settings will be used.\r\n             ",
            "schema": {
              "type": "string",
              "deprecated": true
            }
          },
          {
            "name": "FolderId",
            "in": "query",
            "description": "Folder where records to get are stored.\r\nIf zero or null, default folder is used (the folder with minimal value - the first created folder).",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "description": "<br>\r\n            Filter expression to get data.\r\n            \r\n<br>\r\n            THIS PROPERTY'S NOT SUPPORTED YET! DON'T USE IT AT ALL! IT IS IGNORED!\r\n            INSTEAD, USE A PREDEFINED FILTER (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId) or filter which is a part of a browse template (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id).\r\n            ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "Sort order rules for returned data.\r\nRules have to match a column definition of template which is used to retrieve data.\r\nFormat is: \"[template column name] [sort direction]\", e.g.: ?orderBy=name desc,hireDate. Also \"asc\" can be used for more clarity.\r\nIf neither \"desc\" nor \"asc\" is used, \"asc\" is used by default.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TotalCount",
            "in": "query",
            "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.BrowseResponse should contain the total number of rows.\r\nDefault is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Count",
            "in": "query",
            "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.BrowseResponse should contain the number of rows on current page..\r\nDefault is true.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Number of rows which are skipped during retrieval of data.\r\nIf not specified, no rows are skipped. It means, the first row on the first page is displayed at the top of the page.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "Top",
            "in": "query",
            "description": "Page size.\r\nIf not specified, default user settings will be used.",
            "schema": {
              "maximum": 2147483647,
              "minimum": -1,
              "type": "integer",
              "format": "int32",
              "example": 100
            },
            "example": 100
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrowseResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/GenericData/Classes/{classId}/Records/{id}": {
      "delete": {
        "tags": [
          "GenericData"
        ],
        "summary": "<br>\r\n            Deletes a record. \r\n            \r\n<br>\r\n            This endpoint is obsolete! Deletion of records will be processed by a generic call in the future.\r\n            ",
        "parameters": [
          {
            "name": "classId",
            "in": "path",
            "description": "Class/Entity identifier of the record.",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Local identifier if the record.",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Kniha": {
      "get": {
        "tags": [
          "Kniha"
        ],
        "summary": "Vyhledání Knih",
        "parameters": [
          {
            "name": "EvidencniTyp",
            "in": "query",
            "description": "Evidenční typ (pole)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfCiselnikKodDph"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "Kniha"
        ],
        "summary": "Vyhledání Knih",
        "parameters": [
          {
            "name": "EvidencniTyp",
            "in": "query",
            "description": "Evidenční typ (pole)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfCiselnikKodDph"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Majetek": {
      "get": {
        "tags": [
          "Majetek"
        ],
        "summary": "Vyhledání majetku pomocí atributů třídy MajetekSearch ve FromQuery.",
        "parameters": [
          {
            "name": "mistnost.mistnostCislo",
            "in": "query",
            "description": "Číslo místnosti.",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "HK0001"
            },
            "example": "HK0001"
          },
          {
            "name": "mistnost.mistnostNazev",
            "in": "query",
            "description": "Název místnosti.",
            "schema": {
              "maxLength": 40,
              "type": "string",
              "example": "Klarinet"
            },
            "example": "Klarinet"
          },
          {
            "name": "mistnostId",
            "in": "query",
            "description": "Interní identifikátor místnosti.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 741254
            },
            "example": 741254
          },
          {
            "name": "zodpovednaOsoba.osobniCislo",
            "in": "query",
            "description": "Osobní číslo.",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "ZHK0001"
            },
            "example": "ZHK0001"
          },
          {
            "name": "zodpovednaOsoba.login",
            "in": "query",
            "description": "Login.",
            "schema": {
              "maxLength": 60,
              "type": "string",
              "example": "magdalena.nova"
            },
            "example": "magdalena.nova"
          },
          {
            "name": "zodpovednaOsoba.jmeno",
            "in": "query",
            "description": "Jméno.",
            "schema": {
              "maxLength": 40,
              "type": "string",
              "example": "Magdalena"
            },
            "example": "Magdalena"
          },
          {
            "name": "zodpovednaOsoba.prijmeni",
            "in": "query",
            "description": "Příjmení.",
            "schema": {
              "maxLength": 40,
              "type": "string",
              "example": "Nová"
            },
            "example": "Nová"
          },
          {
            "name": "zodpovednaOsobaId",
            "in": "query",
            "description": "Interní identifikátor zodpovědné osoby.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "typMajetku",
            "in": "query",
            "description": "Typ majetku: 10 - Dlouhodobý majetek(DLM), 20 - Komponenta souboru movitých věcí, 30 - Drobný majetek (DRM).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 10
            },
            "example": 10
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfMajetekDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Majetek/{type}/{recordNumber}": {
      "get": {
        "tags": [
          "Majetek"
        ],
        "summary": "Vyhledání majetku pomocí typu majetku a ID v routě.",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Typ majetku: 10 - Dlouhodobý majetek(DLM), 20 - Komponenta souboru movitých věcí, 30 - Drobný majetek (DRM).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "recordNumber",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfMajetekDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "Majetek"
        ],
        "summary": "Vyhledání majetku pomocí typu majetku a ID v routě.",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Typ majetku: 10 - Dlouhodobý majetek(DLM), 20 - Komponenta souboru movitých věcí, 30 - Drobný majetek (DRM).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "recordNumber",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfMajetekDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Mistnost": {
      "get": {
        "tags": [
          "Mistnost"
        ],
        "summary": "Vyhledání místností pomocí atributů třídy MistnostSearch ve FromQuery.",
        "parameters": [
          {
            "name": "mistnostCislo",
            "in": "query",
            "description": "Číslo místnosti.",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "HK0001"
            },
            "example": "HK0001"
          },
          {
            "name": "mistnostNazev",
            "in": "query",
            "description": "Název místnosti.",
            "schema": {
              "maxLength": 40,
              "type": "string",
              "example": "Klarinet"
            },
            "example": "Klarinet"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfMistnostDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Mistnost/{recordNumber}": {
      "get": {
        "tags": [
          "Mistnost"
        ],
        "summary": "Vyhledání místnosti pomocí ID v routě.",
        "parameters": [
          {
            "name": "recordNumber",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfMistnostDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "Mistnost"
        ],
        "summary": "Vyhledání místnosti pomocí ID v routě.",
        "parameters": [
          {
            "name": "recordNumber",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfMistnostDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Organizace": {
      "get": {
        "tags": [
          "Organizace"
        ],
        "summary": "Vyhledání organizací",
        "parameters": [
          {
            "name": "DatumNarozeni",
            "in": "query",
            "description": "Datum narození",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "2001-01-29"
            },
            "example": "2001-01-29"
          },
          {
            "name": "Dic",
            "in": "query",
            "description": "DIČ",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "CZ11111111111"
            },
            "example": "CZ11111111111"
          },
          {
            "name": "Ico",
            "in": "query",
            "description": "IČO",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "22222222222"
            },
            "example": "22222222222"
          },
          {
            "name": "Jmeno",
            "in": "query",
            "description": "Jméno",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Josef"
            },
            "example": "Josef"
          },
          {
            "name": "NazevDoplnujici",
            "in": "query",
            "description": "Doplňující název",
            "schema": {
              "maxLength": 80,
              "type": "string",
              "example": "NAZEV_DOPLN"
            },
            "example": "NAZEV_DOPLN"
          },
          {
            "name": "NazevOrganizace",
            "in": "query",
            "description": "Název organizace",
            "schema": {
              "maxLength": 100,
              "type": "string",
              "example": "ALLSOFT s.r.o"
            },
            "example": "ALLSOFT s.r.o"
          },
          {
            "name": "OrganizaceIdEx",
            "in": "query",
            "description": "Externí identifikátor organizace",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "OIX_0001"
            },
            "example": "OIX_0001"
          },
          {
            "name": "PravniForma",
            "in": "query",
            "description": "Právní forma",
            "schema": {
              "maxLength": 6,
              "type": "string",
              "example": "SO"
            },
            "example": "SO"
          },
          {
            "name": "Prijmeni",
            "in": "query",
            "description": "Příjmení",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Červený"
            },
            "example": "Červený"
          },
          {
            "name": "RodneCislo",
            "in": "query",
            "description": "Rodné číslo",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "1234567777"
            },
            "example": "1234567777"
          },
          {
            "name": "CisloDokladu",
            "in": "query",
            "description": "Číslo dokladu (max. 30 znaků)",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "112233445566"
            },
            "example": "112233445566"
          },
          {
            "name": "TypDokladu",
            "in": "query",
            "description": "Typ dokladu - občanský průkaz (O) nebo cestovní pas (C)",
            "schema": {
              "maxLength": 1,
              "type": "string",
              "example": "C"
            },
            "example": "C"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizaceCreate"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "Organizace"
        ],
        "summary": "Vyhledání organizací",
        "parameters": [
          {
            "name": "DatumNarozeni",
            "in": "query",
            "description": "Datum narození",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "2001-01-29"
            },
            "example": "2001-01-29"
          },
          {
            "name": "Dic",
            "in": "query",
            "description": "DIČ",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "CZ11111111111"
            },
            "example": "CZ11111111111"
          },
          {
            "name": "Ico",
            "in": "query",
            "description": "IČO",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "22222222222"
            },
            "example": "22222222222"
          },
          {
            "name": "Jmeno",
            "in": "query",
            "description": "Jméno",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Josef"
            },
            "example": "Josef"
          },
          {
            "name": "NazevDoplnujici",
            "in": "query",
            "description": "Doplňující název",
            "schema": {
              "maxLength": 80,
              "type": "string",
              "example": "NAZEV_DOPLN"
            },
            "example": "NAZEV_DOPLN"
          },
          {
            "name": "NazevOrganizace",
            "in": "query",
            "description": "Název organizace",
            "schema": {
              "maxLength": 100,
              "type": "string",
              "example": "ALLSOFT s.r.o"
            },
            "example": "ALLSOFT s.r.o"
          },
          {
            "name": "OrganizaceIdEx",
            "in": "query",
            "description": "Externí identifikátor organizace",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "OIX_0001"
            },
            "example": "OIX_0001"
          },
          {
            "name": "PravniForma",
            "in": "query",
            "description": "Právní forma",
            "schema": {
              "maxLength": 6,
              "type": "string",
              "example": "SO"
            },
            "example": "SO"
          },
          {
            "name": "Prijmeni",
            "in": "query",
            "description": "Příjmení",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Červený"
            },
            "example": "Červený"
          },
          {
            "name": "RodneCislo",
            "in": "query",
            "description": "Rodné číslo",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "1234567777"
            },
            "example": "1234567777"
          },
          {
            "name": "CisloDokladu",
            "in": "query",
            "description": "Číslo dokladu (max. 30 znaků)",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "112233445566"
            },
            "example": "112233445566"
          },
          {
            "name": "TypDokladu",
            "in": "query",
            "description": "Typ dokladu - občanský průkaz (O) nebo cestovní pas (C)",
            "schema": {
              "maxLength": 1,
              "type": "string",
              "example": "C"
            },
            "example": "C"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizaceCreate"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Organizace"
        ],
        "summary": "Založení nové organizace",
        "requestBody": {
          "description": "Data nove organizace nebo osoby",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizaceCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizaceCreate"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Organizace/{recordNumber}": {
      "put": {
        "tags": [
          "Organizace"
        ],
        "summary": "Změna údajů existující organizace (nelze měnit údaje adres organizace)",
        "description": "Změna údajů existující organizace (nelze měnit údaje adres organizace)",
        "parameters": [
          {
            "name": "recordNumber",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizaceUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizaceDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Organizace/{id}": {
      "delete": {
        "tags": [
          "Organizace"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Platce": {
      "post": {
        "tags": [
          "Platce"
        ],
        "summary": "Založení nového Plátce",
        "requestBody": {
          "description": "Data nového Plátce",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatceCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatceCreate"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "Platce"
        ],
        "summary": "Vyhledání Plátce",
        "parameters": [
          {
            "name": "KodKnihy",
            "in": "query",
            "description": "Kód knihy poplatku",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 777
            },
            "example": 777
          },
          {
            "name": "PlatceId",
            "in": "query",
            "description": "Interní identifikátor Plátce (parametr má přednost před ostatními parametry)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 781254
            },
            "example": 781254
          },
          {
            "name": "PlatceIdEx",
            "in": "query",
            "description": "Externí identifikátor Plátce (parametr má přednost před ostatními parametry)",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "PIX_0001"
            },
            "example": "PIX_0001"
          },
          {
            "name": "VariabilniSymbol",
            "in": "query",
            "description": "Variabilní symbol",
            "schema": {
              "maxLength": 10,
              "type": "string",
              "example": "7770000001"
            },
            "example": "7770000001"
          },
          {
            "name": "RodneCislo",
            "in": "query",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "1234567777"
            },
            "example": "1234567777"
          },
          {
            "name": "CisloDokladu",
            "in": "query",
            "description": "Číslo dokladu (max. 30 znaků)",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "112233445566"
            },
            "example": "112233445566"
          },
          {
            "name": "TypDokladu",
            "in": "query",
            "description": "Typ dokladu - občanský průkaz (O) nebo cestovní pas (C)",
            "schema": {
              "maxLength": 1,
              "type": "string",
              "example": "C"
            },
            "example": "C"
          },
          {
            "name": "DatumNarozeni",
            "in": "query",
            "description": "Datum narození (formát rrrr-mm-dd)",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "format": "date",
              "example": "2001-01-29"
            },
            "example": "2001-01-29"
          },
          {
            "name": "Dic",
            "in": "query",
            "description": "DIČ",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "CZ11111111111"
            },
            "example": "CZ11111111111"
          },
          {
            "name": "Ico",
            "in": "query",
            "description": "IČ",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "22222222222"
            },
            "example": "22222222222"
          },
          {
            "name": "Jmeno",
            "in": "query",
            "description": "Jméno",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Josef"
            },
            "example": "Josef"
          },
          {
            "name": "Prijmeni",
            "in": "query",
            "description": "Příjmení",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Novák"
            },
            "example": "Novák"
          },
          {
            "name": "NazevDoplnujici",
            "in": "query",
            "description": "Název doplňující",
            "schema": {
              "maxLength": 80,
              "type": "string",
              "example": ""
            },
            "example": ""
          },
          {
            "name": "NazevOrganizace",
            "in": "query",
            "description": "Název organizace",
            "schema": {
              "maxLength": 100,
              "type": "string",
              "example": ""
            },
            "example": ""
          },
          {
            "name": "OrganizaceIdEx",
            "in": "query",
            "description": "Externí identifikátor organizace",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": ""
            },
            "example": ""
          },
          {
            "name": "Adresa.Ulice",
            "in": "query",
            "description": "Nazev ulice",
            "schema": {
              "maxLength": 200,
              "type": "string",
              "example": "Nefritová"
            },
            "example": "Nefritová"
          },
          {
            "name": "Adresa.Obec",
            "in": "query",
            "description": "Název obce",
            "schema": {
              "maxLength": 200,
              "type": "string",
              "example": "Plzeň"
            },
            "example": "Plzeň"
          },
          {
            "name": "Adresa.Psc",
            "in": "query",
            "description": "PSČ",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "32300"
            },
            "example": "32300"
          },
          {
            "name": "Adresa.CastObce",
            "in": "query",
            "description": "Část obce",
            "schema": {
              "maxLength": 200,
              "type": "string",
              "example": "Bolevec"
            },
            "example": "Bolevec"
          },
          {
            "name": "Adresa.CisloCp",
            "in": "query",
            "description": "Číslo popisné (domovní)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 263
            },
            "example": 263
          },
          {
            "name": "Adresa.CisloCo",
            "in": "query",
            "description": "Cislo orientacni",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 15
            },
            "example": 15
          },
          {
            "name": "Adresa.PismenoCo",
            "in": "query",
            "description": "Pismeno cisla orientacniho",
            "schema": {
              "maxLength": 2,
              "type": "string",
              "example": "a"
            },
            "example": "a"
          },
          {
            "name": "Adresa.IdCentralniReg",
            "in": "query",
            "description": "Identifikátor adresního místa (centr. registr)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 156358
            },
            "example": 156358
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfPlatceDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfPlatceDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfPlatceDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Platce/{recordNumber}": {
      "get": {
        "tags": [
          "Platce"
        ],
        "summary": "Vyhledání Plátce podle ID",
        "parameters": [
          {
            "name": "recordNumber",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfPlatceDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "Platce"
        ],
        "summary": "Vyhledání Plátce podle ID",
        "parameters": [
          {
            "name": "recordNumber",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfPlatceDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Platce/{externiIdentifikator}": {
      "put": {
        "tags": [
          "Platce"
        ],
        "summary": "Změna údajů existujícího Plátce (podle externího identifikátoru)",
        "description": "Změna údajů existující organizace (nelze měnit údaje adres organizace)",
        "parameters": [
          {
            "name": "externiIdentifikator",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatceUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizaceDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Platce/{interniIdentifikator}": {
      "put": {
        "tags": [
          "Platce"
        ],
        "summary": "Změna údajů záznamu Plátce (podle interního identifikátoru)",
        "description": "Změna údajů záznamu Plátce (lze měnit také údaje adres organizace Plátce)",
        "parameters": [
          {
            "name": "interniIdentifikator",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatceUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatceDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Platce/Invalidate/{interniIdentifikator}": {
      "put": {
        "tags": [
          "Platce"
        ],
        "summary": "Zneplatnění existujícího Plátce",
        "description": "Zneplatnění existujícího Plátce (zadán Interní identifikátor)",
        "parameters": [
          {
            "name": "interniIdentifikator",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatceInvalidate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatceDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Platce/Invalidate/{externiIdentifikator}": {
      "put": {
        "tags": [
          "Platce"
        ],
        "summary": "Zneplatnění existujícího Plátce",
        "description": "Zneplatnění existujícího Plátce (zadán Externí identifikátor)",
        "parameters": [
          {
            "name": "externiIdentifikator",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatceInvalidate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatceDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/PokladniDoklad": {
      "get": {
        "tags": [
          "PokladniDoklad"
        ],
        "summary": "Vyhledání pokladních dokladů pomocí atributů třídy PokladniDokladSearch ve FromQuery.",
        "parameters": [
          {
            "name": "pokladniDokladId",
            "in": "query",
            "description": "Interní identifikátor pokladního dokladu",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 781254
            },
            "example": 781254
          },
          {
            "name": "pokladniDokladIdEx",
            "in": "query",
            "description": "Externí identifikátor pokladního dokladu",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "PDE_0001"
            },
            "example": "PDE_0001"
          },
          {
            "name": "organizace.DatumNarozeni",
            "in": "query",
            "description": "Datum narození",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "2001-01-29"
            },
            "example": "2001-01-29"
          },
          {
            "name": "organizace.Dic",
            "in": "query",
            "description": "DIČ",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "CZ11111111111"
            },
            "example": "CZ11111111111"
          },
          {
            "name": "organizace.Ico",
            "in": "query",
            "description": "IČO",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "22222222222"
            },
            "example": "22222222222"
          },
          {
            "name": "organizace.Jmeno",
            "in": "query",
            "description": "Jméno",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Josef"
            },
            "example": "Josef"
          },
          {
            "name": "organizace.NazevDoplnujici",
            "in": "query",
            "description": "Doplňující název",
            "schema": {
              "maxLength": 80,
              "type": "string",
              "example": "NAZEV_DOPLN"
            },
            "example": "NAZEV_DOPLN"
          },
          {
            "name": "organizace.NazevOrganizace",
            "in": "query",
            "description": "Název organizace",
            "schema": {
              "maxLength": 100,
              "type": "string",
              "example": "ALLSOFT s.r.o"
            },
            "example": "ALLSOFT s.r.o"
          },
          {
            "name": "organizace.OrganizaceIdEx",
            "in": "query",
            "description": "Externí identifikátor organizace",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "OIX_0001"
            },
            "example": "OIX_0001"
          },
          {
            "name": "organizace.PravniForma",
            "in": "query",
            "description": "Právní forma",
            "schema": {
              "maxLength": 6,
              "type": "string",
              "example": "SO"
            },
            "example": "SO"
          },
          {
            "name": "organizace.Prijmeni",
            "in": "query",
            "description": "Příjmení",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Červený"
            },
            "example": "Červený"
          },
          {
            "name": "organizace.RodneCislo",
            "in": "query",
            "description": "Rodné číslo",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "1234567777"
            },
            "example": "1234567777"
          },
          {
            "name": "organizace.CisloDokladu",
            "in": "query",
            "description": "Číslo dokladu (max. 30 znaků)",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "112233445566"
            },
            "example": "112233445566"
          },
          {
            "name": "organizace.TypDokladu",
            "in": "query",
            "description": "Typ dokladu - občanský průkaz (O) nebo cestovní pas (C)",
            "schema": {
              "maxLength": 1,
              "type": "string",
              "example": "C"
            },
            "example": "C"
          },
          {
            "name": "poradacId",
            "in": "query",
            "description": "Číslo pořadače pro třídu Pokladna",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 126
            },
            "example": 126
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfPokladniDokladDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "PokladniDoklad"
        ],
        "summary": "Založení nového pokladního dokladu podle obsahu instance PokladniDokladCreate v Body.",
        "requestBody": {
          "description": "Data nového pokladního dokladu.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PokladniDokladCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PokladniDokladDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/PokladniDoklad/{recordNumber}": {
      "get": {
        "tags": [
          "PokladniDoklad"
        ],
        "summary": "Vyhledání pokladního dokladu pomocí ID v routě.",
        "parameters": [
          {
            "name": "recordNumber",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfPokladniDokladDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "PokladniDoklad"
        ],
        "summary": "Vyhledání pokladního dokladu pomocí ID v routě.",
        "parameters": [
          {
            "name": "recordNumber",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfPokladniDokladDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/PravniForma": {
      "get": {
        "tags": [
          "PravniForma"
        ],
        "summary": "Seznam třídy Právní forma (číselník)",
        "description": "PravniFormaSeznamAsync",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfPravniForma"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "PravniForma"
        ],
        "summary": "Seznam třídy Právní forma (číselník)",
        "description": "PravniFormaSeznamAsync",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfPravniForma"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Predpis": {
      "post": {
        "tags": [
          "Predpis"
        ],
        "summary": "Založení nového Předpisu",
        "requestBody": {
          "description": "Data Předpisu",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PredpisCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PredpisDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "Predpis"
        ],
        "summary": "Vyhledání Předpisů pomocí atributů třídy PredpisSearch v FromQuery",
        "parameters": [
          {
            "name": "kodKnihy",
            "in": "query",
            "description": "Kód knihy poplatku",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 777
            },
            "example": 777
          },
          {
            "name": "predpisId",
            "in": "query",
            "description": "Interní identifikátor Předpisu",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "predpisIdEx",
            "in": "query",
            "description": "Externí identifikátor Předpisu",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "FVX_0001"
            },
            "example": "FVX_0001"
          },
          {
            "name": "platceId",
            "in": "query",
            "description": "Interní identifikátor Plátce",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 781254
            },
            "example": 781254
          },
          {
            "name": "platceIdEx",
            "in": "query",
            "description": "Externí identifikátor Plátce",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "PIX_0001"
            },
            "example": "PIX_0001"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfPredpisDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfPredpisDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfPredpisDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Predpis/Invalidate/{interniIdentifikator}": {
      "put": {
        "tags": [
          "Predpis"
        ],
        "summary": "Stornování Předpisu",
        "description": "Stornování Předpisu (zadán Interní identifikátor)",
        "parameters": [
          {
            "name": "interniIdentifikator",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PredpisDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Predpis/Invalidate/{externiIdentifikator}": {
      "put": {
        "tags": [
          "Predpis"
        ],
        "summary": "Stornování Předpisu",
        "description": "Stornování Předpisu (zadán Externí identifikátor)",
        "parameters": [
          {
            "name": "externiIdentifikator",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PredpisDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Preplatek": {
      "post": {
        "tags": [
          "Preplatek"
        ],
        "summary": "Založení nového Přeplatku",
        "requestBody": {
          "description": "Data Přeplatku",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PreplatekCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreplatekDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "Preplatek"
        ],
        "summary": "Vyhledání Přeplatků pomocí atributů třídy PreplatekSearch v FromQuery",
        "parameters": [
          {
            "name": "kodKnihy",
            "in": "query",
            "description": "Kód knihy poplatku",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 777
            },
            "example": 777
          },
          {
            "name": "preplatekId",
            "in": "query",
            "description": "Interní identifikátor Přeplatku",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "preplatekIdEx",
            "in": "query",
            "description": "Externí identifikátor Přeplatku",
            "schema": {
              "maxLength": 20,
              "type": "string"
            }
          },
          {
            "name": "platceId",
            "in": "query",
            "description": "Interní identifikátor Plátce",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 781254
            },
            "example": 781254
          },
          {
            "name": "platceIdEx",
            "in": "query",
            "description": "Externí identifikátor Plátce",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "PIX_0001"
            },
            "example": "PIX_0001"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfPreplatekDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Preplatek/{recordNumber}": {
      "get": {
        "tags": [
          "Preplatek"
        ],
        "parameters": [
          {
            "name": "recordNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfPreplatekDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "Preplatek"
        ],
        "parameters": [
          {
            "name": "recordNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfPreplatekDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Preplatek/Invalidate/{interniIdentifikator}": {
      "put": {
        "tags": [
          "Preplatek"
        ],
        "summary": "Stornování Přeplatku",
        "description": "Stornování Přeplatku (zadán Interní identifikátor)",
        "parameters": [
          {
            "name": "interniIdentifikator",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreplatekDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Preplatek/Invalidate/{externiIdentifikator}": {
      "put": {
        "tags": [
          "Preplatek"
        ],
        "summary": "Stornování Přeplatku",
        "description": "Stornování Přeplatku (zadán Externí identifikátor)",
        "parameters": [
          {
            "name": "externiIdentifikator",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreplatekDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/StavOrganizace": {
      "get": {
        "tags": [
          "StavOrganizace"
        ],
        "summary": "Seznam třídy Stav Organizace (číselník)",
        "description": "StavOrganizaceSeznamAsync",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfStavOrganizace"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "StavOrganizace"
        ],
        "summary": "Seznam třídy Stav Organizace (číselník)",
        "description": "StavOrganizaceSeznamAsync",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfStavOrganizace"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/TypAdresy": {
      "get": {
        "tags": [
          "TypAdresy"
        ],
        "summary": "Seznam třídy Typ adresy (číselník)",
        "description": "TypAdresySeznamAsync",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfTypAdresy"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "TypAdresy"
        ],
        "summary": "Seznam třídy Typ adresy (číselník)",
        "description": "TypAdresySeznamAsync",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfTypAdresy"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Uhrada/Faktura": {
      "get": {
        "tags": [
          "Uhrada"
        ],
        "parameters": [
          {
            "name": "fakturaId",
            "in": "query",
            "description": "Interní identifikátor Faktury vydané",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 781254
            },
            "example": 781254
          },
          {
            "name": "fakturaIdEx",
            "in": "query",
            "description": "Externí identifikátor Faktury vydané",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "FAK_0001"
            },
            "example": "FAK_0001"
          },
          {
            "name": "organizace.DatumNarozeni",
            "in": "query",
            "description": "Datum narození",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "2001-01-29"
            },
            "example": "2001-01-29"
          },
          {
            "name": "organizace.Dic",
            "in": "query",
            "description": "DIČ",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "CZ11111111111"
            },
            "example": "CZ11111111111"
          },
          {
            "name": "organizace.Ico",
            "in": "query",
            "description": "IČO",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "22222222222"
            },
            "example": "22222222222"
          },
          {
            "name": "organizace.Jmeno",
            "in": "query",
            "description": "Jméno",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Josef"
            },
            "example": "Josef"
          },
          {
            "name": "organizace.NazevDoplnujici",
            "in": "query",
            "description": "Doplňující název",
            "schema": {
              "maxLength": 80,
              "type": "string",
              "example": "NAZEV_DOPLN"
            },
            "example": "NAZEV_DOPLN"
          },
          {
            "name": "organizace.NazevOrganizace",
            "in": "query",
            "description": "Název organizace",
            "schema": {
              "maxLength": 100,
              "type": "string",
              "example": "ALLSOFT s.r.o"
            },
            "example": "ALLSOFT s.r.o"
          },
          {
            "name": "organizace.OrganizaceIdEx",
            "in": "query",
            "description": "Externí identifikátor organizace",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "OIX_0001"
            },
            "example": "OIX_0001"
          },
          {
            "name": "organizace.PravniForma",
            "in": "query",
            "description": "Právní forma",
            "schema": {
              "maxLength": 6,
              "type": "string",
              "example": "SO"
            },
            "example": "SO"
          },
          {
            "name": "organizace.Prijmeni",
            "in": "query",
            "description": "Příjmení",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Červený"
            },
            "example": "Červený"
          },
          {
            "name": "organizace.RodneCislo",
            "in": "query",
            "description": "Rodné číslo",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "1234567777"
            },
            "example": "1234567777"
          },
          {
            "name": "organizace.CisloDokladu",
            "in": "query",
            "description": "Číslo dokladu (max. 30 znaků)",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "112233445566"
            },
            "example": "112233445566"
          },
          {
            "name": "organizace.TypDokladu",
            "in": "query",
            "description": "Typ dokladu - občanský průkaz (O) nebo cestovní pas (C)",
            "schema": {
              "maxLength": 1,
              "type": "string",
              "example": "C"
            },
            "example": "C"
          },
          {
            "name": "variabilniSymbol",
            "in": "query",
            "schema": {
              "maxLength": 10,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfUhradaDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "Uhrada"
        ],
        "parameters": [
          {
            "name": "fakturaId",
            "in": "query",
            "description": "Interní identifikátor Faktury vydané",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 781254
            },
            "example": 781254
          },
          {
            "name": "fakturaIdEx",
            "in": "query",
            "description": "Externí identifikátor Faktury vydané",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "FAK_0001"
            },
            "example": "FAK_0001"
          },
          {
            "name": "organizace.DatumNarozeni",
            "in": "query",
            "description": "Datum narození",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "2001-01-29"
            },
            "example": "2001-01-29"
          },
          {
            "name": "organizace.Dic",
            "in": "query",
            "description": "DIČ",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "CZ11111111111"
            },
            "example": "CZ11111111111"
          },
          {
            "name": "organizace.Ico",
            "in": "query",
            "description": "IČO",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "22222222222"
            },
            "example": "22222222222"
          },
          {
            "name": "organizace.Jmeno",
            "in": "query",
            "description": "Jméno",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Josef"
            },
            "example": "Josef"
          },
          {
            "name": "organizace.NazevDoplnujici",
            "in": "query",
            "description": "Doplňující název",
            "schema": {
              "maxLength": 80,
              "type": "string",
              "example": "NAZEV_DOPLN"
            },
            "example": "NAZEV_DOPLN"
          },
          {
            "name": "organizace.NazevOrganizace",
            "in": "query",
            "description": "Název organizace",
            "schema": {
              "maxLength": 100,
              "type": "string",
              "example": "ALLSOFT s.r.o"
            },
            "example": "ALLSOFT s.r.o"
          },
          {
            "name": "organizace.OrganizaceIdEx",
            "in": "query",
            "description": "Externí identifikátor organizace",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "OIX_0001"
            },
            "example": "OIX_0001"
          },
          {
            "name": "organizace.PravniForma",
            "in": "query",
            "description": "Právní forma",
            "schema": {
              "maxLength": 6,
              "type": "string",
              "example": "SO"
            },
            "example": "SO"
          },
          {
            "name": "organizace.Prijmeni",
            "in": "query",
            "description": "Příjmení",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Červený"
            },
            "example": "Červený"
          },
          {
            "name": "organizace.RodneCislo",
            "in": "query",
            "description": "Rodné číslo",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "1234567777"
            },
            "example": "1234567777"
          },
          {
            "name": "organizace.CisloDokladu",
            "in": "query",
            "description": "Číslo dokladu (max. 30 znaků)",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "112233445566"
            },
            "example": "112233445566"
          },
          {
            "name": "organizace.TypDokladu",
            "in": "query",
            "description": "Typ dokladu - občanský průkaz (O) nebo cestovní pas (C)",
            "schema": {
              "maxLength": 1,
              "type": "string",
              "example": "C"
            },
            "example": "C"
          },
          {
            "name": "variabilniSymbol",
            "in": "query",
            "schema": {
              "maxLength": 10,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfUhradaDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Uhrada/Dobropis": {
      "get": {
        "tags": [
          "Uhrada"
        ],
        "parameters": [
          {
            "name": "dobropisId",
            "in": "query",
            "description": "Interní identifikátor Dobropisu",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 781254
            },
            "example": 781254
          },
          {
            "name": "dobropisIdEx",
            "in": "query",
            "description": "Externí identifikátor Dobropisu",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "FAK_0001"
            },
            "example": "FAK_0001"
          },
          {
            "name": "organizace.DatumNarozeni",
            "in": "query",
            "description": "Datum narození",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "2001-01-29"
            },
            "example": "2001-01-29"
          },
          {
            "name": "organizace.Dic",
            "in": "query",
            "description": "DIČ",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "CZ11111111111"
            },
            "example": "CZ11111111111"
          },
          {
            "name": "organizace.Ico",
            "in": "query",
            "description": "IČO",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "22222222222"
            },
            "example": "22222222222"
          },
          {
            "name": "organizace.Jmeno",
            "in": "query",
            "description": "Jméno",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Josef"
            },
            "example": "Josef"
          },
          {
            "name": "organizace.NazevDoplnujici",
            "in": "query",
            "description": "Doplňující název",
            "schema": {
              "maxLength": 80,
              "type": "string",
              "example": "NAZEV_DOPLN"
            },
            "example": "NAZEV_DOPLN"
          },
          {
            "name": "organizace.NazevOrganizace",
            "in": "query",
            "description": "Název organizace",
            "schema": {
              "maxLength": 100,
              "type": "string",
              "example": "ALLSOFT s.r.o"
            },
            "example": "ALLSOFT s.r.o"
          },
          {
            "name": "organizace.OrganizaceIdEx",
            "in": "query",
            "description": "Externí identifikátor organizace",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "OIX_0001"
            },
            "example": "OIX_0001"
          },
          {
            "name": "organizace.PravniForma",
            "in": "query",
            "description": "Právní forma",
            "schema": {
              "maxLength": 6,
              "type": "string",
              "example": "SO"
            },
            "example": "SO"
          },
          {
            "name": "organizace.Prijmeni",
            "in": "query",
            "description": "Příjmení",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Červený"
            },
            "example": "Červený"
          },
          {
            "name": "organizace.RodneCislo",
            "in": "query",
            "description": "Rodné číslo",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "1234567777"
            },
            "example": "1234567777"
          },
          {
            "name": "organizace.CisloDokladu",
            "in": "query",
            "description": "Číslo dokladu (max. 30 znaků)",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "112233445566"
            },
            "example": "112233445566"
          },
          {
            "name": "organizace.TypDokladu",
            "in": "query",
            "description": "Typ dokladu - občanský průkaz (O) nebo cestovní pas (C)",
            "schema": {
              "maxLength": 1,
              "type": "string",
              "example": "C"
            },
            "example": "C"
          },
          {
            "name": "variabilniSymbol",
            "in": "query",
            "schema": {
              "maxLength": 10,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfUhradaDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "Uhrada"
        ],
        "parameters": [
          {
            "name": "dobropisId",
            "in": "query",
            "description": "Interní identifikátor Dobropisu",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 781254
            },
            "example": 781254
          },
          {
            "name": "dobropisIdEx",
            "in": "query",
            "description": "Externí identifikátor Dobropisu",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "FAK_0001"
            },
            "example": "FAK_0001"
          },
          {
            "name": "organizace.DatumNarozeni",
            "in": "query",
            "description": "Datum narození",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "2001-01-29"
            },
            "example": "2001-01-29"
          },
          {
            "name": "organizace.Dic",
            "in": "query",
            "description": "DIČ",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "CZ11111111111"
            },
            "example": "CZ11111111111"
          },
          {
            "name": "organizace.Ico",
            "in": "query",
            "description": "IČO",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "22222222222"
            },
            "example": "22222222222"
          },
          {
            "name": "organizace.Jmeno",
            "in": "query",
            "description": "Jméno",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Josef"
            },
            "example": "Josef"
          },
          {
            "name": "organizace.NazevDoplnujici",
            "in": "query",
            "description": "Doplňující název",
            "schema": {
              "maxLength": 80,
              "type": "string",
              "example": "NAZEV_DOPLN"
            },
            "example": "NAZEV_DOPLN"
          },
          {
            "name": "organizace.NazevOrganizace",
            "in": "query",
            "description": "Název organizace",
            "schema": {
              "maxLength": 100,
              "type": "string",
              "example": "ALLSOFT s.r.o"
            },
            "example": "ALLSOFT s.r.o"
          },
          {
            "name": "organizace.OrganizaceIdEx",
            "in": "query",
            "description": "Externí identifikátor organizace",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "OIX_0001"
            },
            "example": "OIX_0001"
          },
          {
            "name": "organizace.PravniForma",
            "in": "query",
            "description": "Právní forma",
            "schema": {
              "maxLength": 6,
              "type": "string",
              "example": "SO"
            },
            "example": "SO"
          },
          {
            "name": "organizace.Prijmeni",
            "in": "query",
            "description": "Příjmení",
            "schema": {
              "maxLength": 50,
              "type": "string",
              "example": "Červený"
            },
            "example": "Červený"
          },
          {
            "name": "organizace.RodneCislo",
            "in": "query",
            "description": "Rodné číslo",
            "schema": {
              "maxLength": 15,
              "type": "string",
              "example": "1234567777"
            },
            "example": "1234567777"
          },
          {
            "name": "organizace.CisloDokladu",
            "in": "query",
            "description": "Číslo dokladu (max. 30 znaků)",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "112233445566"
            },
            "example": "112233445566"
          },
          {
            "name": "organizace.TypDokladu",
            "in": "query",
            "description": "Typ dokladu - občanský průkaz (O) nebo cestovní pas (C)",
            "schema": {
              "maxLength": 1,
              "type": "string",
              "example": "C"
            },
            "example": "C"
          },
          {
            "name": "variabilniSymbol",
            "in": "query",
            "schema": {
              "maxLength": 10,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfUhradaDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Uhrada/Predpis": {
      "get": {
        "tags": [
          "Uhrada"
        ],
        "parameters": [
          {
            "name": "kodKnihy",
            "in": "query",
            "description": "Kód knihy poplatku",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 777
            },
            "example": 777
          },
          {
            "name": "platceId",
            "in": "query",
            "description": "Interní identifikátor Plátce",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 781254
            },
            "example": 781254
          },
          {
            "name": "platceIdEx",
            "in": "query",
            "description": "Externí identifikátor Plátce",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "PLC_0001"
            },
            "example": "PLC_0001"
          },
          {
            "name": "predpisId",
            "in": "query",
            "description": "Interní identifikátor Předpisu",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 781254
            },
            "example": 781254
          },
          {
            "name": "predpisIdEx",
            "in": "query",
            "description": "Externí identifikátor Předpisu",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "PRE_0001"
            },
            "example": "PRE_0001"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfUhradaDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "Uhrada"
        ],
        "parameters": [
          {
            "name": "kodKnihy",
            "in": "query",
            "description": "Kód knihy poplatku",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 777
            },
            "example": 777
          },
          {
            "name": "platceId",
            "in": "query",
            "description": "Interní identifikátor Plátce",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 781254
            },
            "example": 781254
          },
          {
            "name": "platceIdEx",
            "in": "query",
            "description": "Externí identifikátor Plátce",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "PLC_0001"
            },
            "example": "PLC_0001"
          },
          {
            "name": "predpisId",
            "in": "query",
            "description": "Interní identifikátor Předpisu",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 781254
            },
            "example": 781254
          },
          {
            "name": "predpisIdEx",
            "in": "query",
            "description": "Externí identifikátor Předpisu",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "PRE_0001"
            },
            "example": "PRE_0001"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfUhradaDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Uhrada/Preplatek": {
      "get": {
        "tags": [
          "Uhrada"
        ],
        "parameters": [
          {
            "name": "kodKnihy",
            "in": "query",
            "description": "Kód knihy poplatku",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 777
            },
            "example": 777
          },
          {
            "name": "platceId",
            "in": "query",
            "description": "Interní identifikátor Plátce",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 781254
            },
            "example": 781254
          },
          {
            "name": "platceIdEx",
            "in": "query",
            "description": "Externí identifikátor Plátce",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "PLC_0001"
            },
            "example": "PLC_0001"
          },
          {
            "name": "preplatekId",
            "in": "query",
            "description": "Interní identifikátor Přeplatku",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "preplatekIdEx",
            "in": "query",
            "description": "Externí identifikátor Přeplatku",
            "schema": {
              "maxLength": 20,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfUhradaDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "Uhrada"
        ],
        "parameters": [
          {
            "name": "kodKnihy",
            "in": "query",
            "description": "Kód knihy poplatku",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 777
            },
            "example": 777
          },
          {
            "name": "platceId",
            "in": "query",
            "description": "Interní identifikátor Plátce",
            "schema": {
              "type": "integer",
              "format": "int32",
              "example": 781254
            },
            "example": 781254
          },
          {
            "name": "platceIdEx",
            "in": "query",
            "description": "Externí identifikátor Plátce",
            "schema": {
              "maxLength": 20,
              "type": "string",
              "example": "PLC_0001"
            },
            "example": "PLC_0001"
          },
          {
            "name": "preplatekId",
            "in": "query",
            "description": "Interní identifikátor Přeplatku",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "preplatekIdEx",
            "in": "query",
            "description": "Externí identifikátor Přeplatku",
            "schema": {
              "maxLength": 20,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfUhradaDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Zamestnanec": {
      "get": {
        "tags": [
          "Zamestnanec"
        ],
        "summary": "Vyhledání zaměstnance pomocí atributů třídy ZamestnanecSearch ve FromQuery.",
        "parameters": [
          {
            "name": "osobniCislo",
            "in": "query",
            "description": "Osobní číslo.",
            "schema": {
              "maxLength": 30,
              "type": "string",
              "example": "ZHK0001"
            },
            "example": "ZHK0001"
          },
          {
            "name": "login",
            "in": "query",
            "description": "Login.",
            "schema": {
              "maxLength": 60,
              "type": "string",
              "example": "magdalena.nova"
            },
            "example": "magdalena.nova"
          },
          {
            "name": "jmeno",
            "in": "query",
            "description": "Jméno.",
            "schema": {
              "maxLength": 40,
              "type": "string",
              "example": "Magdalena"
            },
            "example": "Magdalena"
          },
          {
            "name": "prijmeni",
            "in": "query",
            "description": "Příjmení.",
            "schema": {
              "maxLength": 40,
              "type": "string",
              "example": "Nová"
            },
            "example": "Nová"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfZamestnanecDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Zamestnanec/{recordNumber}": {
      "get": {
        "tags": [
          "Zamestnanec"
        ],
        "summary": "Vyhledání zaměstnance pomocí ID v routě.",
        "parameters": [
          {
            "name": "recordNumber",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfZamestnanecDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "Zamestnanec"
        ],
        "summary": "Vyhledání zaměstnance pomocí ID v routě.",
        "parameters": [
          {
            "name": "recordNumber",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfZamestnanecDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    },
    "/api/v1/Customer/Pantheon/Zeme": {
      "get": {
        "tags": [
          "Zeme"
        ],
        "summary": "Seznam třídy Země (číselník)",
        "description": "ZemeSeznamAsync",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfZeme"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      },
      "head": {
        "tags": [
          "Zeme"
        ],
        "summary": "Seznam třídy Země (číselník)",
        "description": "ZemeSeznamAsync",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResultOfZeme"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "503": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "basicAuth": [ ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Adresa": {
        "type": "object",
        "properties": {
          "typAdresy": {
            "type": "string",
            "description": "Typ adresy (hodnota z atr. kod v číselníku TypAdresy)",
            "nullable": true,
            "example": "Trvalá"
          },
          "cisloCo": {
            "maxLength": 10,
            "type": "string",
            "description": "Cislo orientacni",
            "nullable": true,
            "example": "15"
          },
          "cisloCp": {
            "maxLength": 10,
            "type": "string",
            "description": "Číslo popisné",
            "nullable": true,
            "example": "263"
          },
          "obec": {
            "type": "string",
            "description": "Název obce",
            "nullable": true,
            "example": "Plzeň"
          },
          "castObce": {
            "type": "string",
            "description": "Část obce",
            "nullable": true,
            "example": "Bolevec"
          },
          "mestskyObvod": {
            "type": "string",
            "description": "Městský obvod",
            "nullable": true,
            "example": "Plzeň 1"
          },
          "okres": {
            "type": "string",
            "description": "Okres",
            "nullable": true,
            "example": "Plzeň město"
          },
          "pismenoCo": {
            "type": "string",
            "description": "Pismeno cisla orientacniho",
            "nullable": true,
            "example": "a"
          },
          "psc": {
            "type": "string",
            "description": "PSČ",
            "nullable": true,
            "example": "32300"
          },
          "stavAdresy": {
            "type": "integer",
            "description": "Stav Adresy",
            "format": "int32",
            "example": 1
          },
          "typCislaDomovniho": {
            "type": "integer",
            "description": "Typ cisla domovniho",
            "format": "int32",
            "example": 1
          },
          "ulice": {
            "type": "string",
            "description": "Nazev ulice",
            "nullable": true,
            "example": "Nefritová"
          }
        },
        "additionalProperties": false
      },
      "AdresaUpdate": {
        "type": "object",
        "properties": {
          "organizaceIdEx": {
            "maxLength": 20,
            "type": "string",
            "nullable": true,
            "example": "OIX_0001"
          },
          "typAdresy": {
            "type": "string",
            "description": "Typ adresy (hodnota z atr. kod v číselníku TypAdresy)",
            "nullable": true,
            "example": "Trvalá"
          },
          "cisloCo": {
            "maxLength": 10,
            "type": "string",
            "description": "Cislo orientacni",
            "nullable": true,
            "example": "15"
          },
          "cisloCp": {
            "maxLength": 10,
            "type": "string",
            "description": "Číslo popisné",
            "nullable": true,
            "example": "263"
          },
          "obec": {
            "type": "string",
            "description": "Název obce",
            "nullable": true,
            "example": "Plzeň"
          },
          "castObce": {
            "type": "string",
            "description": "Část obce",
            "nullable": true,
            "example": "Bolevec"
          },
          "mestskyObvod": {
            "type": "string",
            "description": "Městský obvod",
            "nullable": true,
            "example": "Plzeň 1"
          },
          "okres": {
            "type": "string",
            "description": "Okres",
            "nullable": true,
            "example": "Plzeň město"
          },
          "pismenoCo": {
            "type": "string",
            "description": "Pismeno cisla orientacniho",
            "nullable": true,
            "example": "a"
          },
          "psc": {
            "type": "string",
            "description": "PSČ",
            "nullable": true,
            "example": "32300"
          },
          "stavAdresy": {
            "type": "integer",
            "description": "Stav Adresy",
            "format": "int32",
            "example": 1
          },
          "typCislaDomovniho": {
            "type": "integer",
            "description": "Typ cisla domovniho",
            "format": "int32",
            "example": 1
          },
          "ulice": {
            "type": "string",
            "description": "Nazev ulice",
            "nullable": true,
            "example": "Nefritová"
          }
        },
        "additionalProperties": false
      },
      "AttributesCollectionOfIAttributeResult": {
        "type": "object",
        "properties": {
          "attributeItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttributeResult"
            },
            "description": "Collection of user defined attributes.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Class which contains collection of of user defined attributes."
      },
      "AttributesCollectionOfIUserDefinedAttributeResult": {
        "type": "object",
        "properties": {
          "attributeItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IUserDefinedAttributeResult"
            },
            "description": "Collection of user defined attributes.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Class which contains collection of of user defined attributes."
      },
      "AttributesCollectionOfUserDefinedAttributeChange": {
        "type": "object",
        "properties": {
          "attributeItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserDefinedAttributeChange"
            },
            "description": "Collection of user defined attributes.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Class which contains collection of of user defined attributes."
      },
      "AuthenticateRequest": {
        "type": "object",
        "properties": {
          "userName": {
            "type": "string",
            "description": "<br>\r\n            Gets or sets the user name (login name or login email).\r\n            \r\n<br>\r\n            It can be unspecified when ASOL.Nephrite.WebAPI.AuthProvider.Contracts.AuthenticateRequest.UseWindowsAuthentication and ASOL.Nephrite.WebAPI.AuthProvider.Contracts.AuthenticateRequest.UseCurrentUserCredentials is true, \r\n            otherwise it has to be filled.\r\n            ",
            "nullable": true,
            "example": "domain\name.surname"
          },
          "password": {
            "type": "string",
            "description": "<br>\r\n            Gets or sets the password.\r\n            \r\n<br>\r\n            It can be unspecified when ASOL.Nephrite.WebAPI.AuthProvider.Contracts.AuthenticateRequest.UseWindowsAuthentication and ASOL.Nephrite.WebAPI.AuthProvider.Contracts.AuthenticateRequest.UseCurrentUserCredentials is true, \r\n            otherwise it has to be filled.\r\n            ",
            "nullable": true,
            "example": "SecretPassword*01"
          },
          "useWindowsAuthentication": {
            "type": "boolean",
            "description": "<br>\r\n            If true, windows authentication is used to connect to HeG (System.Net.NetworkCredential are created and used to login). \r\n            If ASOL.Nephrite.WebAPI.AuthProvider.Contracts.AuthenticateRequest.UseCurrentUserCredentials is true as well, ASOL.Nephrite.WebAPI.AuthProvider.Contracts.AuthenticateRequest.UserName and ASOL.Nephrite.WebAPI.AuthProvider.Contracts.AuthenticateRequest.Password are ignored. \r\n            System.Net.CredentialCache.DefaultCredentials are used then.\r\n            \r\n<br>\r\n            If false, basic authentication using ASOL.Nephrite.WebAPI.AuthProvider.Contracts.AuthenticateRequest.UserName  and ASOL.Nephrite.WebAPI.AuthProvider.Contracts.AuthenticateRequest.Password is used to connect to HeG.\r\n            \r\n<br>\r\n            This property must filled when default value is not specified in application settings \r\n            or if a different value should be used.\r\n            The application can be set such way, this property may not be set at all.\r\n            Contact administrator to ensure how to authenticate if needed. \r\n            ",
            "example": false
          },
          "useCurrentUserCredentials": {
            "type": "boolean",
            "description": "<br>\r\n            This property is taken into account when ASOL.Nephrite.WebAPI.AuthProvider.Contracts.AuthenticateRequest.UseWindowsAuthentication is true only.\r\n            System.Net.CredentialCache.DefaultCredentials are used instead of ASOL.Nephrite.WebAPI.AuthProvider.Contracts.AuthenticateRequest.UserName and ASOL.Nephrite.WebAPI.AuthProvider.Contracts.AuthenticateRequest.Password then.\r\n            \r\n<br>\r\n            This property must filled when default value is not specified in application settings \r\n            or if a different value should be used.\r\n            The application can be set such way, this property may not be set at all.\r\n            Contact administrator to ensure how to authenticate if needed. \r\n            ",
            "example": false
          },
          "languageId": {
            "type": "string",
            "description": "<br>\r\n            Gets or sets the code of language (czech is CZ, slovak is SK, english is EN). \r\n            \r\n<br>\r\n            This property must filled when default language is not specified in application settings \r\n            or if a different language should be used.\r\n            The application can be set such way, this property may not be set at all.\r\n            Contact administrator to ensure how to authenticate if needed. \r\n            ",
            "nullable": true,
            "example": "CZ"
          },
          "dbProfile": {
            "type": "string",
            "description": "<br>\r\n            Gets or sets the db profile where the user is to be connected to.\r\n            \r\n<br>\r\n            This property must filled when default db profile is not specified in application settings\r\n             or if a different db profile should be used.\r\n            The application can be set such way, this property may not be set at all.\r\n            Contact administrator to ensure how to authenticate if needed. \r\n            ",
            "nullable": true,
            "example": "MySqlServer.TestDbProfile"
          },
          "serverURL": {
            "type": "string",
            "description": "<br>\r\n            Gets or sets the URL of application server.\r\n            \r\n<br>\r\n            This property must filled when default server URL is not specified in application settings\r\n            or if a different server be used.\r\n            The application can be set such way, this property may not be set at all.\r\n            Contact administrator to ensure how to authenticate if needed. \r\n            ",
            "nullable": true,
            "example": "http://testserever/testapp"
          }
        },
        "additionalProperties": false,
        "description": "Model for authentication."
      },
      "AuthenticateResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "If true, authention was successfull.",
            "readOnly": true,
            "example": true
          },
          "statusCode": {
            "$ref": "#/components/schemas/HttpStatusCode"
          },
          "errorMessage": {
            "type": "string",
            "description": "Error message in case of authentication was not successful..",
            "nullable": true,
            "example": "Some error message."
          },
          "userName": {
            "type": "string",
            "description": "Username to log-in.",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "Unique identifier to log-in. Something like token.",
            "nullable": true,
            "example": "UserId 31f49a7ddc18e97247308d5180ac684890f5a5c3442e0ab7115e037f6d6dd2f6"
          }
        },
        "additionalProperties": false,
        "description": "Model for response of authentication."
      },
      "BrowseColumnInfo": {
        "type": "object",
        "properties": {
          "columnName": {
            "type": "string",
            "description": "Gets or sets column name.",
            "nullable": true
          },
          "visible": {
            "type": "boolean",
            "description": "Gets or sets column's visibility."
          },
          "headerText": {
            "type": "string",
            "description": "Gets or sets header text.",
            "nullable": true
          },
          "dataFormat": {
            "type": "string",
            "description": "Defines the format how to display data.",
            "nullable": true
          },
          "italica": {
            "type": "boolean",
            "description": "Is an Italica used for font?"
          },
          "bold": {
            "type": "boolean",
            "description": "Is a font bold?"
          },
          "underline": {
            "type": "boolean",
            "description": "Is an underline font used?"
          },
          "align": {
            "type": "integer",
            "description": "<list type=\"bullet\">\r\n  <listheader>Aligning of a column.</listheader>\r\n  <item>0 - Left</item>\r\n  <item>1 - Right</item>\r\n  <item>2 - Center</item>\r\n</list>",
            "format": "int32"
          },
          "dataTypeRepo": {
            "type": "string",
            "description": "Datový type of a column - repository definition.\r\n\"money\" , \"varchar\" , \"string\", \"datetime\", \"date\", \"time\", \"folder\", \"boolean\" , \"multilline_text\", \"text\", \"pointer\", \"binary\"",
            "nullable": true
          },
          "fullDbName": {
            "type": "string",
            "description": "Full db name in a select command.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Data structure represents information about one browse column."
      },
      "BrowseDataRowInfo": {
        "type": "object",
        "additionalProperties": false
      },
      "BrowseGroupRowInfo": {
        "type": "object",
        "properties": {
          "level": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "BrowseResponse": {
        "type": "object",
        "properties": {
          "data": {
            "nullable": true
          },
          "totalRowCount": {
            "type": "integer",
            "description": "Count of all rows for specified conditions. -1 if information is not accessible.",
            "format": "int32"
          },
          "rowCount": {
            "type": "integer",
            "description": "Count of returned rows. -1 if information is not accessible.",
            "format": "int32",
            "readOnly": true
          },
          "browseId": {
            "type": "integer",
            "format": "int32"
          },
          "browseName": {
            "type": "string",
            "nullable": true
          },
          "folderId": {
            "type": "integer",
            "format": "int32"
          },
          "classId": {
            "type": "integer",
            "format": "int32"
          },
          "rowsType": {
            "$ref": "#/components/schemas/RecordDataRowType"
          },
          "columnsInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrowseColumnInfo"
            },
            "nullable": true
          },
          "rowsInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrowseRowInfo"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BrowseRowInfo": {
        "type": "object",
        "properties": {
          "dataRow": {
            "$ref": "#/components/schemas/BrowseDataRowInfo"
          },
          "groupRow": {
            "$ref": "#/components/schemas/BrowseGroupRowInfo"
          },
          "rowType": {
            "$ref": "#/components/schemas/BrowseRowType"
          }
        },
        "additionalProperties": false
      },
      "BrowseRowType": {
        "enum": [
          "dataRow",
          "groupRow"
        ],
        "type": "string"
      },
      "BrowseType": {
        "enum": [
          "template",
          "view"
        ],
        "type": "string",
        "description": "The browse type (template/view)."
      },
      "CacheItemPriority": {
        "enum": [
          "low",
          "normal",
          "high",
          "neverRemove"
        ],
        "type": "string"
      },
      "CacheRequest": {
        "required": [
          "key"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key for a memory cache."
          },
          "value": {
            "maxLength": 4096,
            "minLength": 1,
            "type": "string",
            "description": "Value to store to a cache.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contract which is used to store ASOL.Nephrite.WebAPI.Contracts.Infrastructure.Caching.CacheRequest.Value to a memory cache with ASOL.Nephrite.WebAPI.Contracts.Infrastructure.Caching.CacheRequest.Key."
      },
      "CacheResponse": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Value stored in cache.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contract which is used to get ASOL.Nephrite.WebAPI.Contracts.Infrastructure.Caching.CacheResponse.Value from a memory cache."
      },
      "CiselnikEvidencniTyp": {
        "type": "object",
        "properties": {
          "kod": {
            "type": "string",
            "description": "Kód Evidenčního typu",
            "nullable": true,
            "example": "MKO"
          },
          "nazev": {
            "type": "string",
            "description": "Název Evidenčního typu",
            "nullable": true,
            "example": "Běžné pohledávky"
          },
          "jeMistniPoplatek": {
            "type": "string",
            "description": "Je místní poplatek",
            "nullable": true,
            "example": "A"
          },
          "jePrijemDleDanovehoRadu": {
            "type": "string",
            "description": "Je příjem podle daňového řádu",
            "nullable": true,
            "example": "A"
          },
          "jeUctovatelny": {
            "type": "string",
            "description": "Je účtovatelný",
            "nullable": true,
            "example": "A"
          },
          "legislativa": {
            "type": "string",
            "description": "Legislativa",
            "nullable": true,
            "example": "Zákon 565/1990 Sb.a příslušná obecní vyhláška"
          },
          "platnostOd": {
            "type": "string",
            "description": "Platnost od",
            "nullable": true,
            "example": "1.1.2023"
          },
          "platnostDo": {
            "type": "string",
            "description": "Platnost do",
            "nullable": true,
            "example": "1.2.2023"
          },
          "pouzeProEvidencniAgendu": {
            "type": "string",
            "description": "Pouze pro evidenční agendu",
            "nullable": true,
            "example": "N"
          },
          "pouzivaKalendarPredpisu": {
            "type": "string",
            "description": "Používá kalendář předpisů",
            "nullable": true,
            "example": "A"
          },
          "pouzivaKartuPrijmu": {
            "type": "string",
            "description": "Používá kartu příjmu",
            "nullable": true,
            "example": "A"
          },
          "pouzivaOpravnePolozky": {
            "type": "string",
            "description": "Používá opravné položky",
            "nullable": true,
            "example": "A"
          },
          "pouzivaPodrozvahu": {
            "type": "string",
            "description": "Používá podrozvahu",
            "nullable": true,
            "example": "A"
          },
          "pouzivaStorno": {
            "type": "string",
            "description": "Používá storno",
            "nullable": true,
            "example": "N"
          }
        },
        "additionalProperties": false
      },
      "CiselnikKodDph": {
        "type": "object",
        "properties": {
          "kod": {
            "type": "string",
            "nullable": true
          },
          "sazba": {
            "type": "number",
            "format": "double"
          },
          "popis": {
            "type": "string",
            "nullable": true
          },
          "platnostOd": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Číselník Kódy DPH"
      },
      "CiselnikTypUhrady": {
        "type": "object",
        "properties": {
          "kod": {
            "type": "string",
            "nullable": true
          },
          "popis": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Číselník Stav organizace"
      },
      "CollectionResultOfCiselnikEvidencniTyp": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CiselnikEvidencniTyp"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfCiselnikKodDph": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CiselnikKodDph"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfCiselnikTypUhrady": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CiselnikTypUhrady"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfDobropisFvDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DobropisFvDto"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfFakturaVydanaDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FakturaVydanaDto"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfMajetekDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MajetekDto"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfMistnostDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MistnostDto"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfPlatceDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatceDto"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfPokladniDokladDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PokladniDokladDto"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfPravniForma": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PravniForma"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfPredpisDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PredpisDto"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfPreplatekDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PreplatekDto"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfStavOrganizace": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StavOrganizace"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfTypAdresy": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TypAdresy"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfUhradaDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UhradaDto"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfZamestnanecDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ZamestnanecDto"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CollectionResultOfZeme": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Zeme"
            },
            "description": "Created entities.",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "description": "Total available rows count. -1 if not specified.",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "description": "Total rows count on current page. -1 if not specified.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Size of result. -1 if not specified.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Total pages based on current page size and total available items.  -1 if not specified.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Collection of created entities with paging information."
      },
      "CountryCreate": {
        "required": [
          "folderId"
        ],
        "type": "object",
        "properties": {
          "abridgedCZName": {
            "type": "string",
            "description": "An abridged name of a country in Czech.",
            "nullable": true
          },
          "abridgedENName": {
            "type": "string",
            "description": "An abridged name of a country in English.",
            "nullable": true
          },
          "fullCZName": {
            "type": "string",
            "description": "A full name of a country in Czech.",
            "nullable": true
          },
          "fullENName": {
            "type": "string",
            "description": "A full name of a country in English.",
            "nullable": true
          },
          "isoCode": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "ISO code of a country (A-2).",
            "nullable": true
          },
          "implicitLanguageId": {
            "type": "integer",
            "description": "Identifier of an implicit language.",
            "format": "int32",
            "nullable": true
          },
          "nationalCurrencyId": {
            "type": "integer",
            "description": "Identifier of a national currency of a country.",
            "format": "int32",
            "nullable": true
          },
          "folderId": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "Identifier of a folder where to create a record.\r\n0 means a default folder of the class/entity.",
            "format": "int32",
            "example": 1023
          },
          "reference": {
            "type": "string",
            "description": "Reference no. of record.",
            "nullable": true,
            "example": "X000000001"
          },
          "name": {
            "type": "string",
            "description": "Name of record.",
            "nullable": true,
            "example": "My name"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelChange"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfUserDefinedAttributeChange"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfForeignKeyRelationItemChange"
          }
        },
        "additionalProperties": false,
        "description": "Contract to create record of the Country entity."
      },
      "CountryResult": {
        "required": [
          "classId"
        ],
        "type": "object",
        "properties": {
          "abridgedCZName": {
            "type": "string",
            "description": "An abridged name of a country in Czech.",
            "nullable": true
          },
          "abridgedENName": {
            "type": "string",
            "description": "An abridged name of a country in English.",
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "description": "A full name of a country.",
            "nullable": true
          },
          "fullCZName": {
            "type": "string",
            "description": "A full name of a country in Czech.",
            "nullable": true
          },
          "fullENName": {
            "type": "string",
            "description": "A full name of a country in English.",
            "nullable": true
          },
          "isoCode": {
            "type": "string",
            "description": "ISO code of a country (A-2).",
            "nullable": true
          },
          "implicitLanguageId": {
            "type": "integer",
            "description": "Identifier of an implicit language.",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "implicitLanguage": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "nationalCurrencyId": {
            "type": "integer",
            "description": "Identifier of a national currency of a country.",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "nationalCurrency": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "id": {
            "type": "integer",
            "description": "Identifier (PK) of a record.",
            "format": "int32",
            "example": 1
          },
          "classId": {
            "type": "integer",
            "description": "Identifier of the class of the entity.",
            "format": "int32",
            "example": 1023
          },
          "className": {
            "type": "string",
            "description": "Localized name of an entity class. Optional.",
            "nullable": true,
            "example": "My class name"
          },
          "folderId": {
            "type": "integer",
            "description": "Identifier of the folder.",
            "format": "int32",
            "example": 123
          },
          "folderName": {
            "type": "string",
            "description": "Localized name of an entity folder. Optional.",
            "nullable": true,
            "example": "My folder name"
          },
          "lastUpdatedOn": {
            "type": "string",
            "description": "Gets or sets an entity last update date and time.\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "description": "Gets or sets date and time when entity was created .\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "Gets entity timestamp.",
            "nullable": true,
            "example": "00000000000117CB"
          },
          "gunid": {
            "type": "string",
            "description": "Global record identifier within several databases.\r\nThis value is generated by database on a back-end.",
            "nullable": true,
            "example": "00000K00001U00000P"
          },
          "createdById": {
            "type": "integer",
            "description": "Primary key of the creator of the entity/record.",
            "format": "int32",
            "nullable": true,
            "example": 69
          },
          "createdBy": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "lastUpdatedById": {
            "type": "integer",
            "description": "Primary key of the last updated user of the entity",
            "format": "int32",
            "nullable": true,
            "example": 69
          },
          "lastUpdatedBy": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelResult"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfIUserDefinedAttributeResult"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfIForeignKeyRelationItemResult"
          },
          "reference": {
            "type": "string",
            "description": "Reference no. of record.",
            "nullable": true,
            "example": "X0000001"
          },
          "name": {
            "type": "string",
            "description": "Name of record.",
            "nullable": true,
            "example": "Record name"
          }
        },
        "additionalProperties": false,
        "description": "A result contract for the Country entity."
      },
      "CountryUpdate": {
        "type": "object",
        "properties": {
          "abridgedCZName": {
            "type": "string",
            "description": "An abridged name of a country in Czech.",
            "nullable": true
          },
          "abridgedENName": {
            "type": "string",
            "description": "An abridged name of a country in English.",
            "nullable": true
          },
          "fullCZName": {
            "type": "string",
            "description": "A full name of a country in Czech.",
            "nullable": true
          },
          "fullENName": {
            "type": "string",
            "description": "A full name of a country in English.",
            "nullable": true
          },
          "implicitLanguageId": {
            "type": "integer",
            "description": "Identifier of an implicit language.",
            "format": "int32",
            "nullable": true
          },
          "nationalCurrencyId": {
            "type": "integer",
            "description": "Identifier of a national currency of a country.",
            "format": "int32",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "description": "Reference no. of record.",
            "nullable": true,
            "example": "X000000001"
          },
          "name": {
            "type": "string",
            "description": "Name of record.",
            "nullable": true,
            "example": "My name"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelChange"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfUserDefinedAttributeChange"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfForeignKeyRelationItemChange"
          }
        },
        "additionalProperties": false
      },
      "DobropisFvCreate": {
        "required": [
          "variabilniSymbol"
        ],
        "type": "object",
        "properties": {
          "cisloJednaci": {
            "type": "string",
            "nullable": true
          },
          "cisloPoradace": {
            "type": "integer",
            "format": "int32"
          },
          "datumDuzp": {
            "type": "string",
            "nullable": true
          },
          "datumPorizeni": {
            "type": "string",
            "nullable": true
          },
          "datumSplatnosti": {
            "type": "string",
            "nullable": true
          },
          "dobropisIdEx": {
            "type": "string",
            "nullable": true
          },
          "konstantniSymbol": {
            "type": "string",
            "nullable": true
          },
          "organizace": {
            "$ref": "#/components/schemas/OrganizaceCreate"
          },
          "organizace2": {
            "$ref": "#/components/schemas/OrganizaceCreate"
          },
          "podkladovaFakturaId": {
            "type": "integer",
            "description": "Podkladová FV (tř.65), na kterou se má dobropis dopárovat",
            "format": "int32"
          },
          "podkladovaFakturaIdEx": {
            "type": "string",
            "description": "Podkladová FV (tř.65), na kterou se má dobropis dopárovat",
            "nullable": true
          },
          "poznamka": {
            "type": "string",
            "nullable": true
          },
          "specifickySymbol": {
            "maxLength": 10,
            "type": "string",
            "nullable": true
          },
          "typUhrady": {
            "type": "string",
            "nullable": true
          },
          "variabilniSymbol": {
            "maxLength": 10,
            "type": "string"
          },
          "polozky": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Polozka"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DobropisFvDto": {
        "type": "object",
        "properties": {
          "cisloJednaci": {
            "type": "string",
            "nullable": true
          },
          "datumDuzp": {
            "type": "string",
            "format": "date-time"
          },
          "datumPorizeni": {
            "type": "string",
            "format": "date-time"
          },
          "datumSplatnosti": {
            "type": "string",
            "format": "date-time"
          },
          "dobropisId": {
            "type": "integer",
            "format": "int32"
          },
          "dobropisIdEx": {
            "type": "string",
            "nullable": true
          },
          "konstantniSymbol": {
            "type": "string",
            "nullable": true
          },
          "organizaceOdberatel": {
            "$ref": "#/components/schemas/OrganizaceDto"
          },
          "organizacePrijemce": {
            "$ref": "#/components/schemas/OrganizaceDto"
          },
          "poznamka": {
            "type": "string",
            "nullable": true
          },
          "specifickySymbol": {
            "type": "string",
            "nullable": true
          },
          "stav": {
            "type": "integer",
            "format": "int32"
          },
          "stavUhrazenosti": {
            "type": "string",
            "nullable": true
          },
          "variabilniSymbol": {
            "type": "string",
            "nullable": true
          },
          "zbyvaUhradit": {
            "type": "number",
            "format": "double"
          },
          "polozky": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Polozka"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FakturaVydanaCreate": {
        "required": [
          "datumPorizeni",
          "organizace",
          "variabilniSymbol"
        ],
        "type": "object",
        "properties": {
          "cisloJednaci": {
            "type": "string",
            "nullable": true
          },
          "cisloPoradace": {
            "type": "integer",
            "format": "int32"
          },
          "datumDuzp": {
            "type": "string",
            "nullable": true
          },
          "datumPorizeni": {
            "type": "string"
          },
          "datumSplatnosti": {
            "type": "string",
            "nullable": true
          },
          "fakturaIdEx": {
            "type": "string",
            "nullable": true
          },
          "konstantniSymbol": {
            "type": "string",
            "nullable": true
          },
          "organizace": {
            "$ref": "#/components/schemas/OrganizaceCreate"
          },
          "organizace2": {
            "$ref": "#/components/schemas/OrganizaceCreate"
          },
          "poznamka": {
            "type": "string",
            "nullable": true
          },
          "specifickySymbol": {
            "maxLength": 10,
            "type": "string",
            "nullable": true
          },
          "typUhrady": {
            "type": "string",
            "nullable": true
          },
          "variabilniSymbol": {
            "maxLength": 10,
            "type": "string"
          },
          "polozky": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Polozka"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Faktura vydaná"
      },
      "FakturaVydanaDto": {
        "type": "object",
        "properties": {
          "cenaCelkem": {
            "type": "number",
            "format": "double"
          },
          "cisloJednaci": {
            "type": "string",
            "nullable": true
          },
          "datumDuzp": {
            "type": "string",
            "format": "date-time"
          },
          "datumPorizeni": {
            "type": "string",
            "format": "date-time"
          },
          "datumSplatnosti": {
            "type": "string",
            "format": "date-time"
          },
          "fakturaId": {
            "type": "integer",
            "format": "int32"
          },
          "fakturaIdEx": {
            "type": "string",
            "nullable": true
          },
          "konstantniSymbol": {
            "type": "string",
            "nullable": true
          },
          "organizaceOdberatel": {
            "$ref": "#/components/schemas/OrganizaceDto"
          },
          "organizacePrijemce": {
            "$ref": "#/components/schemas/OrganizaceDto"
          },
          "poznamka": {
            "type": "string",
            "nullable": true
          },
          "specifickySymbol": {
            "type": "string",
            "nullable": true
          },
          "stav": {
            "type": "integer",
            "format": "int32"
          },
          "stavUhrazenosti": {
            "type": "string",
            "nullable": true
          },
          "variabilniSymbol": {
            "type": "string",
            "nullable": true
          },
          "polozky": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Polozka"
            },
            "nullable": true
          },
          "zbyvaUhradit": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Faktura vydaná DTO"
      },
      "ForeignKeyRelationItemChange": {
        "required": [
          "relationId",
          "side"
        ],
        "type": "object",
        "properties": {
          "record": {
            "$ref": "#/components/schemas/RelatedRecordModelChange"
          },
          "side": {
            "$ref": "#/components/schemas/RelationSide"
          },
          "relationId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets unique relation identifier.",
            "format": "int32"
          },
          "symbolicName": {
            "type": "string",
            "description": "Symbolic name of relation.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A contract to hold information about record in a relation which is a foreign key and which is to be changed."
      },
      "ForeignKeyRelationItemResult": {
        "required": [
          "relationId",
          "side"
        ],
        "type": "object",
        "properties": {
          "record": {
            "$ref": "#/components/schemas/RelatedRecordModelResult"
          },
          "side": {
            "$ref": "#/components/schemas/RelationSide"
          },
          "relationId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets unique relation identifier.\r\nCZ: Vrací nebo nastavuje číslo vztahu.",
            "format": "int32"
          },
          "symbolicName": {
            "type": "string",
            "description": "Symbolic name of relation.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A contract to hold information about record in a relation which is a foreign key."
      },
      "GeneralItemModelResult": {
        "required": [
          "itemId",
          "rowOrdinalNumber"
        ],
        "type": "object",
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfIAttributeResult"
          },
          "staticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfIForeignKeyRelationItemResult"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelResult"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfIUserDefinedAttributeResult"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfIForeignKeyRelationItemResult"
          },
          "itemId": {
            "type": "integer",
            "description": "Identifier of item in a record.",
            "format": "int32"
          },
          "rowOrdinalNumber": {
            "type": "integer",
            "description": "Row ordinal number.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "General contract for items which are used to retrieve items of entity, if no specific model for items is used."
      },
      "GeneralModelResultWithItems": {
        "required": [
          "classId"
        ],
        "type": "object",
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfIAttributeResult"
          },
          "staticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfIForeignKeyRelationItemResult"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GeneralItemModelResult"
            },
            "description": "Items of records. Optional.",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "Identifier (PK) of a record.",
            "format": "int32",
            "example": 1
          },
          "classId": {
            "type": "integer",
            "description": "Identifier of the class of the entity.",
            "format": "int32",
            "example": 1023
          },
          "className": {
            "type": "string",
            "description": "Localized name of an entity class. Optional.",
            "nullable": true,
            "example": "My class name"
          },
          "folderId": {
            "type": "integer",
            "description": "Identifier of the folder.",
            "format": "int32",
            "example": 123
          },
          "folderName": {
            "type": "string",
            "description": "Localized name of an entity folder. Optional.",
            "nullable": true,
            "example": "My folder name"
          },
          "lastUpdatedOn": {
            "type": "string",
            "description": "Gets or sets an entity last update date and time.\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "description": "Gets or sets date and time when entity was created .\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "Gets entity timestamp.",
            "nullable": true,
            "example": "00000000000117CB"
          },
          "gunid": {
            "type": "string",
            "description": "Global record identifier within several databases.\r\nThis value is generated by database on a back-end.",
            "nullable": true,
            "example": "00000K00001U00000P"
          },
          "createdById": {
            "type": "integer",
            "description": "Primary key of the creator of the entity/record.",
            "format": "int32",
            "nullable": true,
            "example": 69
          },
          "createdBy": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "lastUpdatedById": {
            "type": "integer",
            "description": "Primary key of the last updated user of the entity",
            "format": "int32",
            "nullable": true,
            "example": 69
          },
          "lastUpdatedBy": {
            "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
          },
          "dynamicRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfRelationItemModelResult"
          },
          "userDefinedAttributes": {
            "$ref": "#/components/schemas/AttributesCollectionOfIUserDefinedAttributeResult"
          },
          "userDefinedStaticRelations": {
            "$ref": "#/components/schemas/RelationCollectionOfIForeignKeyRelationItemResult"
          },
          "reference": {
            "type": "string",
            "description": "Reference no. of record.",
            "nullable": true,
            "example": "X0000001"
          },
          "name": {
            "type": "string",
            "description": "Name of record.",
            "nullable": true,
            "example": "Record name"
          }
        },
        "additionalProperties": false
      },
      "HttpStatusCode": {
        "enum": [
          "continue",
          "switchingProtocols",
          "processing",
          "earlyHints",
          "ok",
          "created",
          "accepted",
          "nonAuthoritativeInformation",
          "noContent",
          "resetContent",
          "partialContent",
          "multiStatus",
          "alreadyReported",
          "imUsed",
          "ambiguous",
          "moved",
          "redirect",
          "redirectMethod",
          "notModified",
          "useProxy",
          "unused",
          "temporaryRedirect",
          "permanentRedirect",
          "badRequest",
          "unauthorized",
          "paymentRequired",
          "forbidden",
          "notFound",
          "methodNotAllowed",
          "notAcceptable",
          "proxyAuthenticationRequired",
          "requestTimeout",
          "conflict",
          "gone",
          "lengthRequired",
          "preconditionFailed",
          "requestEntityTooLarge",
          "requestUriTooLong",
          "unsupportedMediaType",
          "requestedRangeNotSatisfiable",
          "expectationFailed",
          "misdirectedRequest",
          "unprocessableEntity",
          "locked",
          "failedDependency",
          "upgradeRequired",
          "preconditionRequired",
          "tooManyRequests",
          "requestHeaderFieldsTooLarge",
          "unavailableForLegalReasons",
          "internalServerError",
          "notImplemented",
          "badGateway",
          "serviceUnavailable",
          "gatewayTimeout",
          "httpVersionNotSupported",
          "variantAlsoNegotiates",
          "insufficientStorage",
          "loopDetected",
          "notExtended",
          "networkAuthenticationRequired"
        ],
        "type": "string"
      },
      "IAttributeResult": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of a column an attribute is mapped to.",
            "nullable": true,
            "readOnly": true
          },
          "value": {
            "description": "Value of the attribute.",
            "nullable": true
          },
          "symbolicName": {
            "type": "string",
            "description": "Symbolic of attribute.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Interface which describes a attribute in results of requests."
      },
      "IForeignKeyRelationItemResult": {
        "type": "object",
        "properties": {
          "record": {
            "$ref": "#/components/schemas/RelatedRecordModelResult"
          },
          "side": {
            "$ref": "#/components/schemas/RelationSide"
          },
          "relationId": {
            "type": "integer",
            "format": "int32"
          },
          "symbolicName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Interface for a contract to hold information about record in a relation which is a foreign key."
      },
      "IRecordId": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "classId": {
            "type": "integer",
            "format": "int32"
          },
          "isEmpty": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "IUserDefinedAttributeResult": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of a column an attribute is mapped to.",
            "nullable": true,
            "readOnly": true
          },
          "value": {
            "description": "Value of the attribute.",
            "nullable": true
          },
          "symbolicName": {
            "type": "string",
            "description": "Symbolic of attribute.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Interface which describes a user defined attribute in results of requests."
      },
      "MajetekDto": {
        "type": "object",
        "properties": {
          "porizovaciCena": {
            "type": "number",
            "description": "Pořizovací cena.",
            "format": "double"
          },
          "aktualniCena": {
            "type": "number",
            "description": "Aktuální cena.",
            "format": "double"
          },
          "datumPorizeni": {
            "type": "string",
            "description": "Datum pořízení.",
            "format": "date-time",
            "nullable": true
          },
          "datumVyrazeni": {
            "type": "string",
            "description": "Datum vyřazení.",
            "format": "date-time",
            "nullable": true
          },
          "datumZarazeni": {
            "type": "string",
            "description": "Datum zařazení.",
            "format": "date-time",
            "nullable": true
          },
          "inventarniCislo": {
            "type": "string",
            "description": "Inventární číslo.",
            "nullable": true
          },
          "majetekId": {
            "type": "integer",
            "description": "Jednoznačný identifikátor.",
            "format": "int32"
          },
          "mistnost": {
            "$ref": "#/components/schemas/MistnostDto"
          },
          "nazev": {
            "type": "string",
            "description": "Název.",
            "nullable": true
          },
          "zodpovednaOsoba": {
            "$ref": "#/components/schemas/ZamestnanecDto"
          },
          "stav": {
            "type": "integer",
            "description": "Stav: 1 - Převzat do evidence, 2 - Zařazen, 3 - Aktivní, 4 - Připraven k vyřazení, 5 - Vyřazen, 6 - Převeden, 7 - Stornován, 8 - Předimportován, 9 - Předzpracován.",
            "format": "int32"
          },
          "vyrobniCislo": {
            "type": "string",
            "description": "Výrobní číslo.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Majetek DTO"
      },
      "Microsoft.AspNetCore.Mvc.ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "MistnostDto": {
        "type": "object",
        "properties": {
          "cislo": {
            "type": "string",
            "description": "Číslo místnosti.",
            "nullable": true
          },
          "mistnostId": {
            "type": "integer",
            "format": "int32"
          },
          "nazev": {
            "type": "string",
            "description": "Název místnosti.",
            "nullable": true
          },
          "stav": {
            "type": "string",
            "description": "Stav (valuace atributu třídy Místnosti, atribut Stav): 0 - Aktivní, 1 - Uzavřena, 2 - Dočasně mimo provoz.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Místnost DTO"
      },
      "OrganizaceCreate": {
        "type": "object",
        "properties": {
          "datumNarozeni": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "example": "2001-01-29"
          },
          "datumUmrti": {
            "maxLength": 30,
            "type": "string",
            "nullable": true
          },
          "dic": {
            "maxLength": 15,
            "type": "string",
            "nullable": true,
            "example": "CZ11111111111"
          },
          "eMail": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "example": "org@org.net"
          },
          "ico": {
            "maxLength": 15,
            "type": "string",
            "nullable": true,
            "example": "22222222222"
          },
          "idPartnera": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "example": "EXP_00001"
          },
          "jmeno": {
            "maxLength": 50,
            "type": "string",
            "nullable": true,
            "example": "Josef"
          },
          "nazevDoplnujici": {
            "maxLength": 80,
            "type": "string",
            "nullable": true,
            "example": "NAZEV_DOPLN"
          },
          "nazevOrganizace": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "example": "ALLSOFT s.r.o"
          },
          "nazevZkraceny": {
            "maxLength": 40,
            "type": "string",
            "nullable": true,
            "example": "NAZEV_ZKR"
          },
          "organizaceIdEx": {
            "maxLength": 20,
            "type": "string",
            "nullable": true,
            "example": "OIX_0001"
          },
          "platceDph": {
            "maxLength": 1,
            "type": "string",
            "nullable": true,
            "example": "A"
          },
          "poznamka": {
            "type": "string",
            "nullable": true,
            "example": "POZNAMKA"
          },
          "pravniForma": {
            "maxLength": 6,
            "type": "string",
            "nullable": true,
            "example": "SO"
          },
          "prijmeni": {
            "maxLength": 50,
            "type": "string",
            "nullable": true,
            "example": "prijmeni"
          },
          "rodneCislo": {
            "maxLength": 15,
            "type": "string",
            "nullable": true,
            "example": "1234567777"
          },
          "zemeId": {
            "maxLength": 3,
            "type": "string",
            "nullable": true,
            "example": "CZ"
          },
          "adresy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Adresa"
            },
            "description": "Seznam adres organizace",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganizaceDto": {
        "type": "object",
        "properties": {
          "cisloOrganizace": {
            "type": "string",
            "nullable": true
          },
          "datumNarozeni": {
            "type": "string",
            "format": "date-time"
          },
          "datumUmrti": {
            "type": "string",
            "format": "date-time"
          },
          "dic": {
            "type": "string",
            "nullable": true
          },
          "eMail": {
            "type": "string",
            "nullable": true
          },
          "ico": {
            "type": "string",
            "nullable": true
          },
          "idPartnera": {
            "type": "string",
            "nullable": true
          },
          "jmeno": {
            "type": "string",
            "nullable": true
          },
          "nazevDoplnujici": {
            "type": "string",
            "nullable": true
          },
          "nazevOrganizace": {
            "type": "string",
            "nullable": true
          },
          "nazevZkraceny": {
            "type": "string",
            "nullable": true
          },
          "organizaceIdEx": {
            "type": "string",
            "nullable": true
          },
          "platceDph": {
            "type": "string",
            "nullable": true
          },
          "poznamka": {
            "type": "string",
            "nullable": true
          },
          "pravniForma": {
            "type": "string",
            "nullable": true
          },
          "prijmeni": {
            "type": "string",
            "nullable": true
          },
          "rodneCislo": {
            "type": "string",
            "nullable": true
          },
          "stav": {
            "type": "string",
            "nullable": true
          },
          "zemeId": {
            "type": "string",
            "nullable": true
          },
          "adresy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Adresa"
            },
            "description": "Seznam adres organizace",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganizaceUpdate": {
        "type": "object",
        "properties": {
          "datumNarozeni": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "example": "2001-01-29"
          },
          "datumUmrti": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "example": "2079-03-27"
          },
          "dic": {
            "maxLength": 15,
            "type": "string",
            "nullable": true,
            "example": "CZ11111111111"
          },
          "eMail": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "example": "org@org.net"
          },
          "idPartnera": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "example": "EXP_00001"
          },
          "jmeno": {
            "maxLength": 50,
            "type": "string",
            "nullable": true,
            "example": "Josef"
          },
          "nazevDoplnujici": {
            "maxLength": 80,
            "type": "string",
            "nullable": true,
            "example": "NAZEV_DOPLN"
          },
          "nazevOrganizace": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "example": "ALLSOFT s.r.o"
          },
          "nazevZkraceny": {
            "maxLength": 40,
            "type": "string",
            "nullable": true,
            "example": "NAZEV ZKRACENY"
          },
          "organizaceIdEx": {
            "maxLength": 20,
            "type": "string",
            "nullable": true,
            "example": "OIX_0001"
          },
          "platceDph": {
            "maxLength": 1,
            "type": "string",
            "nullable": true,
            "example": "A"
          },
          "poznamka": {
            "type": "string",
            "nullable": true,
            "example": "POZNAMKA"
          },
          "pravniForma": {
            "maxLength": 6,
            "type": "string",
            "nullable": true,
            "example": "SO"
          },
          "prijmeni": {
            "maxLength": 50,
            "type": "string",
            "nullable": true,
            "example": "prijmeni"
          },
          "zemeId": {
            "maxLength": 3,
            "type": "string",
            "nullable": true,
            "example": "CZ"
          },
          "adresy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdresaUpdate"
            },
            "description": "Seznam adres organizace",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlatceCreate": {
        "required": [
          "kodKnihy",
          "variabilniSymbol"
        ],
        "type": "object",
        "properties": {
          "kodKnihy": {
            "type": "integer",
            "description": "Kód knihy poplatku",
            "format": "int32",
            "example": 123
          },
          "platceIdEx": {
            "type": "string",
            "nullable": true
          },
          "platnostOd": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "example": "2001-01-29"
          },
          "poznamka": {
            "type": "string",
            "description": "Poznámka",
            "nullable": true
          },
          "spojovaciCislo": {
            "type": "number",
            "format": "double"
          },
          "specifickySymbol": {
            "type": "number",
            "format": "double"
          },
          "variabilniSymbol": {
            "maxLength": 10,
            "type": "string",
            "description": "Variabilní symbol"
          },
          "organizace": {
            "$ref": "#/components/schemas/OrganizaceCreate"
          }
        },
        "additionalProperties": false
      },
      "PlatceDto": {
        "type": "object",
        "properties": {
          "celkemZaPredpisy": {
            "type": "number",
            "format": "double"
          },
          "kodKnihy": {
            "type": "integer",
            "format": "int32"
          },
          "platceId": {
            "type": "integer",
            "format": "int32"
          },
          "platceIdEx": {
            "type": "string",
            "nullable": true
          },
          "platnostDo": {
            "type": "string",
            "format": "date-time"
          },
          "platnostOd": {
            "type": "string",
            "format": "date-time"
          },
          "poznamka": {
            "type": "string",
            "nullable": true
          },
          "specifickySymbol": {
            "type": "number",
            "format": "double"
          },
          "spojovaciCislo": {
            "type": "number",
            "format": "double"
          },
          "variabilniSymbol": {
            "type": "string",
            "nullable": true
          },
          "zbyvaZaPredpisy": {
            "type": "number",
            "format": "double"
          },
          "organizace": {
            "$ref": "#/components/schemas/OrganizaceDto"
          }
        },
        "additionalProperties": false
      },
      "PlatceInvalidate": {
        "type": "object",
        "properties": {
          "datumUkonceni": {
            "type": "string",
            "nullable": true
          },
          "poznamka": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Třída hodnot pro zneplatnění Plátce"
      },
      "PlatceUpdate": {
        "type": "object",
        "properties": {
          "poznamka": {
            "type": "string",
            "description": "Poznámka",
            "nullable": true
          },
          "spojovaciCislo": {
            "type": "number",
            "description": "Spojovací číslo",
            "format": "double"
          },
          "organizace": {
            "$ref": "#/components/schemas/OrganizaceUpdate"
          }
        },
        "additionalProperties": false
      },
      "PokladniDokladCreate": {
        "required": [
          "cisloPoradace",
          "datumPorizeni",
          "organizaceSubjekt",
          "typ"
        ],
        "type": "object",
        "properties": {
          "referenceSubjektu": {
            "type": "string",
            "description": "Interní číslo dokladu.",
            "nullable": true
          },
          "cisloPoradace": {
            "type": "integer",
            "format": "int32"
          },
          "cisloDokladuEx": {
            "type": "string",
            "description": "Číslo dokladu externí.",
            "nullable": true
          },
          "datumDuzp": {
            "type": "string",
            "nullable": true
          },
          "datumPorizeni": {
            "type": "string"
          },
          "pokladniDokladIdEx": {
            "type": "string",
            "nullable": true
          },
          "organizaceSubjekt": {
            "$ref": "#/components/schemas/OrganizaceCreate"
          },
          "poznamka": {
            "type": "string",
            "nullable": true
          },
          "ucelPlatby": {
            "type": "string",
            "nullable": true
          },
          "zpusobUhrady": {
            "type": "string",
            "description": "Způsob úhrady: H - Hotově, P - Platební kartou.",
            "nullable": true
          },
          "typ": {
            "type": "string",
            "description": "Typ pokladního dokladu: P - Příjmový, V - Výdajový."
          },
          "polozky": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PokladniDokladPolozka"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Pokladní doklad"
      },
      "PokladniDokladDto": {
        "type": "object",
        "properties": {
          "cenaCelkem": {
            "type": "number",
            "format": "double"
          },
          "datumDuzp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "datumPorizeni": {
            "type": "string",
            "format": "date-time"
          },
          "organizaceSubjekt": {
            "$ref": "#/components/schemas/OrganizaceDto"
          },
          "pokladniDokladId": {
            "type": "integer",
            "format": "int32"
          },
          "pokladniDokladIdEx": {
            "type": "string",
            "nullable": true
          },
          "poznamka": {
            "type": "string",
            "nullable": true
          },
          "referenceSubjektu": {
            "type": "string",
            "description": "Interní číslo dokladu.",
            "nullable": true
          },
          "stav": {
            "type": "integer",
            "description": "Stav: 0 - Pořízeno, 1 - Zaúčtováno, 7 - Stornováno.",
            "format": "int32"
          },
          "typ": {
            "type": "string",
            "description": "Typ pokladního dokladu: P - Příjmový, V - Výdajový.",
            "nullable": true
          },
          "ucelPlatby": {
            "type": "string",
            "nullable": true
          },
          "zpusobUhrady": {
            "type": "string",
            "description": "Způsob úhrady: H - Hotově, P - Platební kartou.",
            "nullable": true
          },
          "polozky": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PokladniDokladPolozka"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Pokladní doklad DTO"
      },
      "PokladniDokladPolozka": {
        "required": [
          "nazev"
        ],
        "type": "object",
        "properties": {
          "cenaCelkem": {
            "type": "number",
            "description": "Atribut zveřejněn pouze pro čtení dat PokladniDokladDto.\r\nPři uložení hodnotu dopočítá instance třídy sama.",
            "format": "double"
          },
          "cenaJednotkova": {
            "type": "number",
            "description": "Při doplnění této hodnoty se využije atribut pocet a aplikačně se vypočte cenaZaklad a cenaCelkem.\r\nPlatí, že pocet x cenaJednotkova = cenaZaklad.",
            "format": "double"
          },
          "cenaZaklad": {
            "type": "number",
            "description": "Při doplnění této hodnoty se využije atribut pocet a aplikačně se vypočte cenaJednotkova a cenaCelkem.\r\ndefault:\r\npocet =1\r\ncenaJednotkova=cenaZaklad\r\n<remarks>\r\nPovinnost je cena základ nebo množství a cena jednotková (pak se cena základ neuvádí).\r\n</remarks>",
            "format": "double"
          },
          "dphCelkem": {
            "type": "number",
            "format": "double"
          },
          "kodDph": {
            "type": "string",
            "description": "Kód DPH obsahuje referenci na třídu 48 Sazby DPH....kod repretentuje sazbu DPH.",
            "nullable": true
          },
          "nazev": {
            "type": "string",
            "description": "Předmět. Text na řádku."
          },
          "pocet": {
            "type": "number",
            "description": "vychozí hodnota = 1\r\nnení třeba dopňovat\r\nplatí, že\r\npocet x cen_jedn = cenaZaklad",
            "format": "double"
          },
          "hrazenyDokladId": {
            "type": "integer",
            "description": "Jednoznačný identifikátor (číslo subjektu) hrazeného dokladu.",
            "format": "int32"
          },
          "parovaciZnak": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Položka pokladního dokladu"
      },
      "Polozka": {
        "required": [
          "cena_zaklad",
          "nazev"
        ],
        "type": "object",
        "properties": {
          "cena_celkem": {
            "type": "number",
            "description": "Atribut zveřejněn pouze pro čtení dat\r\nFakturaVydanaDto, DobropisDto",
            "format": "double"
          },
          "cena_jedn": {
            "type": "number",
            "description": "není třeba dopňovat\r\nplatí, že\r\npocet x cen_jedn = cena_zaklad",
            "format": "double"
          },
          "cena_zaklad": {
            "type": "number",
            "description": "při doplnění této hodnoty se aplikačně doplní cena_jedn + pocet\r\ndefault\r\npocet =1\r\ncena_jedn=cena_zaklad",
            "format": "double"
          },
          "dph_celkem": {
            "type": "string",
            "nullable": true
          },
          "kod_dph": {
            "type": "string",
            "description": "Kód DPH obsahuje referenci na třídu 48 Sazby DPH....kod repretentuje sazbu DPH",
            "nullable": true
          },
          "nazev": {
            "type": "string"
          },
          "pocet": {
            "type": "number",
            "description": "vychozí hodnota = 1\r\nnení třeba dopňovat\r\nplatí, že\r\npocet x cen_jedn = cena_zaklad",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "PravniForma": {
        "type": "object",
        "properties": {
          "kod": {
            "type": "string",
            "nullable": true
          },
          "kodRES": {
            "type": "string",
            "nullable": true
          },
          "typ": {
            "type": "string",
            "nullable": true
          },
          "popis": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Číselník Právní forma organizace"
      },
      "PredpisCreate": {
        "type": "object",
        "properties": {
          "platceId": {
            "type": "integer",
            "description": "Interní identifikátor Plátce",
            "format": "int32"
          },
          "platceIdEx": {
            "type": "string",
            "description": "Externí identifikátor Plátce",
            "nullable": true
          },
          "predpisIdEx": {
            "type": "string",
            "description": "Externí identifikátor Předpisu",
            "nullable": true
          },
          "faktura": {
            "$ref": "#/components/schemas/FakturaVydanaCreate"
          }
        },
        "additionalProperties": false,
        "description": "Třída Předpisy"
      },
      "PredpisDto": {
        "type": "object",
        "properties": {
          "predpisId": {
            "type": "integer",
            "format": "int32"
          },
          "predpisIdEx": {
            "type": "string",
            "nullable": true
          },
          "platceId": {
            "type": "integer",
            "format": "int32"
          },
          "platceIdEx": {
            "type": "string",
            "nullable": true
          },
          "faktura": {
            "$ref": "#/components/schemas/FakturaVydanaDto"
          }
        },
        "additionalProperties": false,
        "description": "Třída Předpisy (do Response)"
      },
      "PreplatekCreate": {
        "type": "object",
        "properties": {
          "platceId": {
            "type": "integer",
            "description": "Interní identifikátor Plátce",
            "format": "int32"
          },
          "platceIdEx": {
            "type": "string",
            "description": "Externí identifikátor Plátce",
            "nullable": true
          },
          "preplatekIdEx": {
            "type": "string",
            "description": "Externí identifikátor Přeplatku",
            "nullable": true
          },
          "dobropis": {
            "$ref": "#/components/schemas/DobropisFvCreate"
          }
        },
        "additionalProperties": false,
        "description": "Třída Přeplatky"
      },
      "PreplatekDto": {
        "type": "object",
        "properties": {
          "preplatekId": {
            "type": "integer",
            "format": "int32"
          },
          "preplatekIdEx": {
            "type": "string",
            "nullable": true
          },
          "platceId": {
            "type": "integer",
            "format": "int32"
          },
          "platceIdEx": {
            "type": "string",
            "nullable": true
          },
          "dobropis": {
            "$ref": "#/components/schemas/DobropisFvDto"
          }
        },
        "additionalProperties": false,
        "description": "Třída Přeplatky (do Response)"
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "errorNumber": {
            "type": "integer",
            "description": "Internal error number. Optional.",
            "format": "int64",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { },
        "description": "A machine-readable format for specifying errors in HTTP API responses based on  https://tools.ietf.org/html/rfc7807"
      },
      "RecordDataRowType": {
        "enum": [
          "header",
          "item"
        ],
        "type": "string",
        "description": "Type of row."
      },
      "RecordPartScope": {
        "enum": [
          "none",
          "header",
          "items",
          "all"
        ],
        "type": "string",
        "description": "Defines a part of a record"
      },
      "RelatedRecordModelChange": {
        "required": [
          "classId",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "Identifier (PK) of an entity/record.\r\nZero means unset.",
            "format": "int32"
          },
          "classId": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "Identifier of an entity/record class.\r\nZero means unset.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "A contract to hold related record to change."
      },
      "RelatedRecordModelResult": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "Identifier (PK) of an entity/record.",
            "format": "int32"
          },
          "classId": {
            "type": "integer",
            "description": "Identifier of an entity class.",
            "format": "int32"
          },
          "className": {
            "type": "string",
            "description": "Localized name of an entity class. Optional.",
            "nullable": true
          },
          "folderId": {
            "type": "integer",
            "description": "Identifier of an entity folder.",
            "format": "int32"
          },
          "folderName": {
            "type": "string",
            "description": "Localized name of an entity folder. Optional.",
            "nullable": true
          },
          "gunid": {
            "type": "string",
            "description": "Global record identifier within several databases.\r\nThis value is generated by database on a back-end.",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "description": "Gets or sets date and time when entity was created .\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "lastUpdatedOn": {
            "type": "string",
            "description": "Gets or sets an entity last update date and time.\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
            "format": "date-time",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of an entity record.",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "description": "Reference no. of an entity record.",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "Gets record timestamp.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A contract to hold data of a retrieved related entity/record. Invoice, Customer etc. \r\nIt does not contain all data of entity/record. Only the significant ones."
      },
      "RelationCollectionOfForeignKeyRelationItemChange": {
        "type": "object",
        "properties": {
          "relationItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ForeignKeyRelationItemChange"
            },
            "description": "Collection of related entities/records.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Object which contains a collection of related entities/records."
      },
      "RelationCollectionOfIForeignKeyRelationItemResult": {
        "type": "object",
        "properties": {
          "relationItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IForeignKeyRelationItemResult"
            },
            "description": "Collection of related entities/records.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Object which contains a collection of related entities/records."
      },
      "RelationCollectionOfRelationItemModelChange": {
        "type": "object",
        "properties": {
          "relationItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelationItemModelChange"
            },
            "description": "Collection of related entities/records.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Object which contains a collection of related entities/records."
      },
      "RelationCollectionOfRelationItemModelResult": {
        "type": "object",
        "properties": {
          "relationItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelationItemModelResult"
            },
            "description": "Collection of related entities/records.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Object which contains a collection of related entities/records."
      },
      "RelationItemModelChange": {
        "required": [
          "relationId",
          "side"
        ],
        "type": "object",
        "properties": {
          "records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedRecordModelChange"
            },
            "description": "Information about an related entity/record of the relation.\r\nIf ASOL.Nephrite.WebAPI.Contracts.RelationItemModelBase.Side is ASOL.Nephrite.WebAPI.Contracts.RelationSide.Left, this is a TO ROLE record, if  ASOL.Nephrite.WebAPI.Contracts.RelationItemModelBase.Side is  ASOL.Nephrite.WebAPI.Contracts.RelationSide.Right, this is a FROM ROLE record.",
            "nullable": true
          },
          "side": {
            "$ref": "#/components/schemas/RelationSide"
          },
          "relationId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets unique relation identifier.\r\nCZ: Vrací nebo nastavuje číslo vztahu.",
            "format": "int32"
          },
          "symbolicName": {
            "type": "string",
            "description": "Symbolic name of relation.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contract to information about changes in dynamic relation item."
      },
      "RelationItemModelResult": {
        "required": [
          "relationId",
          "side"
        ],
        "type": "object",
        "properties": {
          "records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedRecordModelResult"
            },
            "description": "Information about an related entity/record of the relation.\r\nIf ASOL.Nephrite.WebAPI.Contracts.RelationItemModelBase.Side is ASOL.Nephrite.WebAPI.Contracts.RelationSide.Left, this is a TO ROLE record, if  ASOL.Nephrite.WebAPI.Contracts.RelationItemModelBase.Side is  ASOL.Nephrite.WebAPI.Contracts.RelationSide.Right, this is a FROM ROLE record.",
            "nullable": true
          },
          "side": {
            "$ref": "#/components/schemas/RelationSide"
          },
          "relationId": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "Gets or sets unique relation identifier.\r\nCZ: Vrací nebo nastavuje číslo vztahu.",
            "format": "int32"
          },
          "symbolicName": {
            "type": "string",
            "description": "Symbolic name of relation.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A contract to hold information about records in relation."
      },
      "RelationSide": {
        "enum": [
          "left",
          "right"
        ],
        "type": "string",
        "description": "Side of relations (ORIENTATION), primarily for dynamic relations.\r\n(For static relation is used ASOL.Nephrite.WebAPI.Contracts.RelationSide.Left)"
      },
      "StavOrganizace": {
        "type": "object",
        "properties": {
          "kod": {
            "type": "string",
            "nullable": true
          },
          "popis": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Číselník Stav organizace"
      },
      "TypAdresy": {
        "type": "object",
        "properties": {
          "kod": {
            "type": "string",
            "nullable": true
          },
          "popis": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Číselník Typ adresy"
      },
      "UhradaDto": {
        "type": "object",
        "properties": {
          "castka": {
            "type": "number",
            "format": "double"
          },
          "datumUhrady": {
            "type": "string",
            "format": "date-time"
          },
          "hradiciDokladId": {
            "type": "integer",
            "format": "int32"
          },
          "hradiciDokladCislo": {
            "type": "string",
            "nullable": true
          },
          "hrazenyDokladId": {
            "type": "integer",
            "format": "int32"
          },
          "hrazenyDokladIdEx": {
            "type": "string",
            "nullable": true
          },
          "typUhrady": {
            "type": "string",
            "description": "Typ úhrady",
            "nullable": true
          },
          "uhradaId": {
            "type": "integer",
            "description": "Identifikátor úhrady",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the subject identifier.\r\nThe same user can have more ASOL.Nephrite.WebAPI.AuthProvider.Contracts.User.Ids when connects using more languages or db profiles.",
            "nullable": true,
            "example": "UserId 22c60fc06eb1bc33fe7210afcc30af1247b4dab5fe719be160627288d0b7f7f1"
          },
          "firstName": {
            "type": "string",
            "description": "Given name of the user.",
            "nullable": true,
            "example": "Firstname"
          },
          "lastName": {
            "type": "string",
            "description": "Family name of the user.",
            "nullable": true,
            "example": "Lastname"
          },
          "userName": {
            "type": "string",
            "description": "Gets or sets the username (login name or login email).",
            "nullable": true,
            "example": "domain\firstname.lastname"
          },
          "password": {
            "type": "string",
            "description": "Gets or sets the password.",
            "nullable": true
          },
          "providerSubjectId": {
            "type": "string",
            "description": "Gets or sets the subject identifier from HeG.",
            "nullable": true,
            "example": "16589745"
          },
          "providerName": {
            "type": "string",
            "description": "Gets or sets the name of provider which got ASOL.Nephrite.WebAPI.AuthProvider.Contracts.User.ProviderSubjectId.",
            "nullable": true,
            "example": "Noris.Clients.ServiceGate.ServiceGateConnector"
          },
          "systemRole": {
            "type": "string",
            "description": "Gets or sets the system role of the user on a server side (admin/user).",
            "nullable": true,
            "example": "user"
          },
          "email": {
            "type": "string",
            "description": "Gets or sets the email of the user.",
            "nullable": true,
            "example": "user"
          }
        },
        "additionalProperties": false,
        "description": "User entity."
      },
      "UserDefinedAttributeChange": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of a column an attribute is mapped to.",
            "nullable": true
          },
          "value": {
            "description": "Value of the attribute.",
            "nullable": true
          },
          "symbolicName": {
            "type": "string",
            "description": "Symbolic name of attribute.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Class which describes a user defined attribute change."
      },
      "ValidationErrorMessage": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key of message.",
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "Text of message.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Validation error message."
      },
      "ValidationProblemDetails": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationErrorMessage"
            },
            "description": "Collection of errors. Optional.",
            "nullable": true
          },
          "errorNumber": {
            "type": "integer",
            "description": "Internal error number. Optional.",
            "format": "int64",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "ZamestnanecDto": {
        "type": "object",
        "properties": {
          "osobniCislo": {
            "type": "string",
            "description": "Osobní číslo.",
            "nullable": true
          },
          "zamestnanecId": {
            "type": "integer",
            "description": "Jednoznačný identifikátor.",
            "format": "int32"
          },
          "jmeno": {
            "type": "string",
            "description": "Jméno.",
            "nullable": true
          },
          "prijmeni": {
            "type": "string",
            "description": "Příjmení.",
            "nullable": true
          },
          "login": {
            "type": "string",
            "description": "Login.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Zaměstnanec DTO"
      },
      "Zeme": {
        "type": "object",
        "properties": {
          "kod": {
            "type": "string",
            "nullable": true
          },
          "popis": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Číselník Země"
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "description": "Basic Authorization header using the Basic scheme. \r\n\r\n Enter 'UserName' and 'UserId ' values got by api/Connect/LogIn endpoint . \r\n\r\n E.g. UserName = ASOL\\firstname.lastname, Password: 'UserId  ebbea0265....'",
        "scheme": "basic"
      }
    }
  },
  "tags": [
    {
      "name": "Cache",
      "description": "Controller enables to store a value to a memory cache."
    },
    {
      "name": "Connect",
      "description": "Controller for actions with users."
    },
    {
      "name": "GenericData",
      "description": "<br>\r\n            This controller is obsolete and it will be removed in the future. Use generic requests or dedicated endpoints instead.\r\n            \r\n<br>\r\n            Controller contains common actions for entities which can be defined universally.\r\n            "
    }
  ]
}